{"version":3,"file":"resource.d.ts","sources":["resource.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["import { HalOptions } from './rest.service';\r\nimport { SubTypeBuilder } from './subtype-builder';\r\nimport { Observable } from 'rxjs';\r\n/** Abstract resource class*/\r\nexport declare abstract class Resource {\r\n    /** proxy URL */\r\n    proxyUrl: string;\r\n    /** root URL */\r\n    rootUrl: string;\r\n    /** links */\r\n    _links: any;\r\n    /** subtypes */\r\n    _subtypes: Map<string, any>;\r\n    /** get subtypes */\r\n    /** set subtypes */\r\n    subtypes: Map<string, any>;\r\n    /** constructor*/\r\n    constructor();\r\n    /** Get collection of related resources */\r\n    getRelationArray<T extends Resource>(type: {\r\n        new (): T;\r\n    }, relation: string, _embedded?: string, options?: HalOptions, builder?: SubTypeBuilder): Observable<T[]>;\r\n    /** Get related resource */\r\n    getRelation<T extends Resource>(type: {\r\n        new (): T;\r\n    }, relation: string, builder?: SubTypeBuilder): Observable<T>;\r\n    /** Adds the given resource to the bound collection by the relation */\r\n    addRelation<T extends Resource>(relation: string, resource: T): Observable<any>;\r\n    /** Bind the given resource to this resource by the given relation*/\r\n    updateRelation<T extends Resource>(relation: string, resource: T): Observable<any>;\r\n    /** Bind the given resource to this resource by the given relation*/\r\n    substituteRelation<T extends Resource>(relation: string, resource: T): Observable<any>;\r\n    /** Bind the given resource to this resource by the given relation*/\r\n    substituteAllRelation<T extends Resource>(relation: string, resources: Resource[]): Observable<any>;\r\n    /** Unbind the resource with the given relation from this resource*/\r\n    deleteRelation<T extends Resource>(relation: string, resource: T): Observable<any>;\r\n    /** Unbind the resource with the given relation from this resource*/\r\n    deleteAllRelation<T extends Resource>(relation: string): Observable<any>;\r\n}\r\n"]}