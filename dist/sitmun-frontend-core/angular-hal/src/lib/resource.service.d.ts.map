{"version":3,"file":"resource.service.d.ts","sources":["resource.service.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["import { Resource } from './resource';\r\nimport { Sort } from './sort';\r\nimport { ResourceArray } from './resource-array';\r\nimport { ExternalService } from './external.service';\r\nimport { HalOptions } from './rest.service';\r\nimport { SubTypeBuilder } from './subtype-builder';\r\nimport { Observable } from 'rxjs';\r\n/** ResourceService */\r\nexport declare class ResourceService {\r\n    private externalService;\r\n    /** constructor */\r\n    constructor(externalService: ExternalService);\r\n    /** get URL */\r\n    private static getURL();\r\n    /** get all resources from a base URI of a given type */\r\n    getAll<T extends Resource>(type: {\r\n        new (): T;\r\n    }, resource: string, _embedded: string, options?: HalOptions, subType?: SubTypeBuilder): Observable<ResourceArray<T>>;\r\n    /** get resource from a base URI and a given id */\r\n    get<T extends Resource>(type: {\r\n        new (): T;\r\n    }, resource: string, id: any): Observable<T>;\r\n    /** get resource from its selflink */\r\n    getBySelfLink<T extends Resource>(type: {\r\n        new (): T;\r\n    }, resourceLink: string): Observable<T>;\r\n    /** search resources from a given base path, query and options */\r\n    search<T extends Resource>(type: {\r\n        new (): T;\r\n    }, query: string, resource: string, _embedded: string, options?: HalOptions): Observable<ResourceArray<T>>;\r\n    /** search a single resource from a given base path, query and options */\r\n    searchSingle<T extends Resource>(type: {\r\n        new (): T;\r\n    }, query: string, resource: string, options?: HalOptions): Observable<T>;\r\n    /** search resources from a given base path, custom query and options */\r\n    customQuery<T extends Resource>(type: {\r\n        new (): T;\r\n    }, query: string, resource: string, _embedded: string, options?: HalOptions): Observable<ResourceArray<T>>;\r\n    /** get resource given a relation link */\r\n    getByRelation<T extends Resource>(type: {\r\n        new (): T;\r\n    }, resourceLink: string): Observable<T>;\r\n    /** get resource array given a relation link */\r\n    getByRelationArray<T extends Resource>(type: {\r\n        new (): T;\r\n    }, resourceLink: string, _embedded: string, builder?: SubTypeBuilder): Observable<ResourceArray<T>>;\r\n    /** count resources given a path */\r\n    count(resource: string): Observable<number>;\r\n    /** create resource from self link and entity data*/\r\n    create<T extends Resource>(selfResource: string, entity: T): Observable<Observable<never> | T>;\r\n    /** update resource from a given entity data*/\r\n    update<T extends Resource>(entity: T): Observable<Observable<never> | T>;\r\n    /** update resource from a given entity data*/\r\n    updateCollection<T extends Resource>(resourceArray: ResourceArray<T>, resourceLink: string): Observable<string | Observable<never>>;\r\n    /** patch resource from a given entity data*/\r\n    patch<T extends Resource>(entity: T): Observable<Observable<never> | T>;\r\n    /** delete resource from a given entity data*/\r\n    delete<T extends Resource>(entity: T): Observable<Object>;\r\n    /** whether a resource array has next page of results*/\r\n    hasNext<T extends Resource>(resourceArray: ResourceArray<T>): boolean;\r\n    /** whether a resource array has previous page of results*/\r\n    hasPrev<T extends Resource>(resourceArray: ResourceArray<T>): boolean;\r\n    /** whether a resource array has first page of results*/\r\n    hasFirst<T extends Resource>(resourceArray: ResourceArray<T>): boolean;\r\n    /** whether a resource array has last page of results*/\r\n    hasLast<T extends Resource>(resourceArray: ResourceArray<T>): boolean;\r\n    /** get resource array next page of results*/\r\n    next<T extends Resource>(resourceArray: ResourceArray<T>, type: {\r\n        new (): T;\r\n    }): Observable<ResourceArray<T>>;\r\n    /** get resource array previous page of results*/\r\n    prev<T extends Resource>(resourceArray: ResourceArray<T>, type: {\r\n        new (): T;\r\n    }): Observable<ResourceArray<T>>;\r\n    /** get resource array first page of results*/\r\n    first<T extends Resource>(resourceArray: ResourceArray<T>, type: {\r\n        new (): T;\r\n    }): Observable<ResourceArray<T>>;\r\n    /** get resource array last page of results*/\r\n    last<T extends Resource>(resourceArray: ResourceArray<T>, type: {\r\n        new (): T;\r\n    }): Observable<ResourceArray<T>>;\r\n    /** get resource array page of results given a page number*/\r\n    page<T extends Resource>(resourceArray: ResourceArray<T>, type: {\r\n        new (): T;\r\n    }, id: number): Observable<ResourceArray<T>>;\r\n    /** sort resource array with a given sorting params */\r\n    sortElements<T extends Resource>(resourceArray: ResourceArray<T>, type: {\r\n        new (): T;\r\n    }, ...sort: Sort[]): Observable<ResourceArray<T>>;\r\n    /** get resource array size*/\r\n    size<T extends Resource>(resourceArray: ResourceArray<T>, type: {\r\n        new (): T;\r\n    }, size: number): Observable<ResourceArray<T>>;\r\n    /** get resource URL from a given path*/\r\n    getResourceUrl(resource?: string): string;\r\n    /** set proxy and root urls of given resource array */\r\n    private setUrls<T>(result);\r\n    /** set proxy and root urls of given resource */\r\n    private setUrlsResource<T>(result);\r\n}\r\n"]}