{"version":3,"file":"principal.service.d.ts","sources":["principal.service.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["import { Observable } from 'rxjs/Observable';\r\nimport { AccountService } from '../account/account.service';\r\n/** Principal service*/\r\nexport declare class Principal {\r\n    private account;\r\n    private userIdentity;\r\n    private authenticated;\r\n    private authenticationState;\r\n    /** constructor */\r\n    constructor(account: AccountService);\r\n    /** authenticate with given identity*/\r\n    authenticate(identity: any): void;\r\n    /** check whether current user has any of the given authorities */\r\n    hasAnyAuthority(authorities: string[]): Promise<boolean>;\r\n    /** check whether current user has any of the given authorities on the given territory */\r\n    hasAnyAuthorityOnTerritory(authorities: string[], territory: string): Promise<boolean>;\r\n    /** check whether current user has any of the given authorities without resolving promises*/\r\n    hasAnyAuthorityDirect(authorities: string[]): boolean;\r\n    /** check whether current user has any of the given authorities on the given territory without resolving promises */\r\n    hasAnyAuthorityDirectOnTerritory(authorities: string[], territory: string): boolean;\r\n    /** check whether current user has the given authority */\r\n    hasAuthority(authority: string): Promise<boolean>;\r\n    /** check whether current user has the given authority on the given territory*/\r\n    hasAuthorityOnTerritory(authority: string, territory: string): Promise<boolean>;\r\n    /** check user identity*/\r\n    identity(force?: boolean): Promise<any>;\r\n    /** check whether current user is authenticated */\r\n    isAuthenticated(): boolean;\r\n    /** check whether current user identity is resolved */\r\n    isIdentityResolved(): boolean;\r\n    /** get current user authentication state */\r\n    getAuthenticationState(): Observable<any>;\r\n}\r\n"]}