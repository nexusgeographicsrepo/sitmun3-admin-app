{"version":3,"sources":["null","ng://@sitmun/frontend-core/src/lib/angular-hal/lib/resource-array.ts","ng://@sitmun/frontend-core/src/lib/angular-hal/lib/resource-helper.ts","ng://@sitmun/frontend-core/src/lib/angular-hal/lib/external.service.ts","ng://@sitmun/frontend-core/src/lib/angular-hal/lib/resource.service.ts","ng://@sitmun/frontend-core/src/lib/angular-hal/lib/rest.service.ts","ng://@sitmun/frontend-core/src/lib/angular-hal/lib/resource.ts","ng://@sitmun/frontend-core/src/lib/angular-hal/lib/angular-hal.module.ts"],"names":["__values","o","m","Symbol","iterator","i","call","next","length","value","done","__read","n","r","e","ar","push","error","ResourceArray","el","_this","result","type","response","sortInfo","ResourceHelper","createEmptyResult","_embedded","instantiateResourceCollection","next_uri","getHttp","get","getProxy","headers","pipe","map","init","catchError","observableThrowError","prev_uri","first_uri","last_uri","pageNumber","self_uri","replace","urlParsed","url.parse","query","replaceOrAdd","pageSize","toString","uri","concat","addSortInfo","sort","_i","arguments","size","prototype","this","_a","tslib_1.__values","_b","item","path","order","field","idx","indexOf","idxNextAmp","seachValue","substring","optionParams","params","options","param","append","key","_d","_e","s","sortString","resolveRelations","resource","isNullOrUndefined","className","find","Array","isArray","array","forEach","element","isPrimitive","resourceArray","getClassName","obj","results","exec","constructor","objProto","classNames","Object","getPrototypeOf","payload","builder","embeddedName","keys","embeddedClassName","items","items_1","items_1_1","instance","searchSubtypes","instantiateResource","totalElements","page","totalPages","number","_links","self","href","undefined","prev","first","last","subtypes","from","subtypeKey","toLowerCase","startsWith","subtype","entity","p","setProxyUri","proxy_uri","setRootUri","root_uri","getURL","addSlash","uriParsed","search","url","setHttp","http","getRootUri","HttpHeaders","ExternalService","externalConfigurationService","getProxyUri","updateExternalConfigurationHandlerInterface","getExternalConfiguration","Injectable","Inject","args","ResourceService","externalService","getAll","subType","getResourceUrl","HttpParams","setUrls","id","setUrlsResource","data","getBySelfLink","resourceLink","searchSingle","customQuery","getByRelation","getByRelationArray","count","observe","Number","body","create","selfResource","post","status","update","put","updateCollection","headersReq","set","patch","delete","hasNext","hasPrev","hasFirst","hasLast","sortElements","apply","__spread","endsWith","proxyUrl","rootUrl","RestService","injector","resourceService","handleError","mergeMap","notPaged","observableOf","selfLink","relation","totalElement","Resource","_subtypes","getRelationArray","getRelation","lastIndexOf","realClassName","addRelation","header","updateRelation","substituteRelation","substituteAllRelation","resources","deleteRelation","link","relationId","deleteAllRelation","AngularHalModule","forRoot","ngModule","providers","HttpClient","provide","useClass","deps","NgModule","imports","HttpClientModule","declarations","exports"],"mappings":"4vBAcA,SAAAA,EAsFyBC,GACrB,IAAIC,EAAsB,mBAAXC,QAAyBF,EAAEE,OAAOC,UAAWC,EAAI,EAChE,OAAIH,EAAUA,EAAEI,KAAKL,GACd,CACHM,KAAM,WAEF,OADIN,GAAKI,GAAKJ,EAAEO,SAAQP,OAAI,GACrB,CAAEQ,MAAOR,GAAKA,EAAEI,KAAMK,MAAOT,KAKhD,SAAAU,EAAuBV,EAAGW,GACtB,IAAIV,EAAsB,mBAAXC,QAAyBF,EAAEE,OAAOC,UACjD,IAAKF,EAAG,OAAOD,EACf,IAAmBY,EAAYC,EAA3BT,EAAIH,EAAEI,KAAKL,GAAOc,EAAK,GAC3B,IACI,WAAc,IAANH,GAAsB,EAANA,QAAcC,EAAIR,EAAEE,QAAQG,MAAMK,EAAGC,KAAKH,EAAEJ,OAExE,MAAOQ,GAASH,EAAI,CAAEG,MAAOA,WAEzB,IACQJ,IAAMA,EAAEH,OAASR,EAAIG,EAAU,YAAIH,EAAEI,KAAKD,WAExC,GAAIS,EAAG,MAAMA,EAAEG,OAE7B,OAAOF,ECjHX,IAAAG,EAAA,sDAuB2B,kBAEH,kBAGA,cAMC,aAGd,SAACC,GACJC,EAAKC,OAAOL,KAAKG,gBAIZ,WACL,OAAOC,EAAKC,OAAOb,kBAIR,SAACc,EAAoBC,EAAeC,GAC/C,IAAMH,EAA2BI,EAAeC,kBAAqBN,EAAKO,WAG1E,OAFAN,EAAOG,SAAWA,EAClBC,EAAeG,8BAA8BN,EAAMC,EAAUF,GACtDA,aAIJ,SAACC,GACJ,OAAIF,EAAKS,SACEJ,EAAeK,UAAUC,IAAIN,EAAeO,SAASZ,EAAKS,UAAW,CAACI,QAASR,EAAeQ,UAAUC,KAC3GC,EAAAA,IAAI,SAAAZ,GAAY,OAAAH,EAAKgB,KAAKd,EAAMC,EAAUH,EAAKI,YAC/Ca,EAAAA,WAAW,SAAApB,GAAS,OAAAqB,EAAAA,WAAqBrB,MAE1CqB,EAAAA,WAAqB,8BAIzB,SAAChB,GACJ,OAAIF,EAAKmB,SACEd,EAAeK,UAAUC,IAAIN,EAAeO,SAASZ,EAAKmB,UAAW,CAACN,QAASR,EAAeQ,UAAUC,KAC3GC,EAAAA,IAAI,SAAAZ,GAAY,OAAAH,EAAKgB,KAAKd,EAAMC,EAAUH,EAAKI,YAC/Ca,EAAAA,WAAW,SAAApB,GAAS,OAAAqB,EAAAA,WAAqBrB,MAE1CqB,EAAAA,WAAqB,+BAIxB,SAAChB,GACL,OAAIF,EAAKoB,UACEf,EAAeK,UAAUC,IAAIN,EAAeO,SAASZ,EAAKoB,WAAY,CAACP,QAASR,EAAeQ,UAAUC,KAC5GC,EAAAA,IAAI,SAAAZ,GAAY,OAAAH,EAAKgB,KAAKd,EAAMC,EAAUH,EAAKI,YAC/Ca,EAAAA,WAAW,SAAApB,GAAS,OAAAqB,EAAAA,WAAqBrB,MAE1CqB,EAAAA,WAAqB,+BAIzB,SAAChB,GACJ,OAAIF,EAAKqB,SACEhB,EAAeK,UAAUC,IAAIN,EAAeO,SAASZ,EAAKqB,UAAW,CAACR,QAASR,EAAeQ,UAAUC,KAC3GC,EAAAA,IAAI,SAAAZ,GAAY,OAAAH,EAAKgB,KAAKd,EAAMC,EAAUH,EAAKI,YAC/Ca,EAAAA,WAAW,SAAApB,GAAS,OAAAqB,EAAAA,WAAqBrB,MAE1CqB,EAAAA,WAAqB,8BAIzB,SAAChB,EAAoBoB,GACxBtB,EAAKuB,SAAWvB,EAAKuB,SAASC,QAAQ,oBAAqB,IAC3DxB,EAAKuB,SAAWvB,EAAKuB,SAASC,QAAQ,UAAW,IACjD,IAAIC,EAAYC,EAAAA,MAAUrB,EAAeO,SAASZ,EAAKuB,WACnDI,EAAgB7B,EAAc8B,aAAaH,EAAUE,MAAO,OAAQ3B,EAAK6B,SAASC,YACtFH,EAAQ7B,EAAc8B,aAAaD,EAAO,OAAQL,EAAWQ,YAG7D,IAAIC,EAAMN,EAAUE,MAChBtB,EAAeO,SAASZ,EAAKuB,UAAUC,QAAQC,EAAUE,MAAOA,GAAStB,EAAeO,SAASZ,EAAKuB,UAAUS,OAAOL,GAE3H,OADAI,EAAM/B,EAAKiC,YAAYF,GAChB1B,EAAeK,UAAUC,IAAIoB,EAAK,CAAClB,QAASR,EAAeQ,UAAUC,KACxEC,EAAAA,IAAI,SAAAZ,GAAY,OAAAH,EAAKgB,KAAKd,EAAMC,EAAUH,EAAKI,YAC/Ca,EAAAA,WAAW,SAAApB,GAAS,OAAAqB,EAAAA,WAAqBrB,yBAIlC,SAACK,OAAoB,IAAAgC,EAAA,GAAAC,EAAA,EAAAA,EAAAC,UAAAhD,OAAA+C,IAAAD,EAAAC,EAAA,GAAAC,UAAAD,GAChCnC,EAAKuB,SAAWvB,EAAKuB,SAASC,QAAQ,oBAAqB,IAC3DxB,EAAKuB,SAAWvB,EAAKuB,SAASC,QAAQ,UAAW,IACjD,IAAIO,EAAM1B,EAAeO,SAASZ,EAAKuB,UAAUS,OAAO,IAAK,QAAShC,EAAK6B,SAASC,WAAY,SAAU9B,EAAKsB,WAAWQ,YAE1H,OADAC,EAAM/B,EAAKiC,YAAYF,GAChB1B,EAAeK,UAAUC,IAAIoB,EAAK,CAAClB,QAASR,EAAeQ,UAAUC,KACxEC,EAAAA,IAAI,SAAAZ,GAAY,OAAAH,EAAKgB,KAAKd,EAAMC,EAAU+B,KAC1CjB,EAAAA,WAAW,SAAApB,GAAS,OAAAqB,EAAAA,WAAqBrB,iBAI1C,SAACK,EAAoBmC,GACxB,IAAIN,EAAM1B,EAAeO,SAASZ,EAAKuB,UAAUS,OAAO,IAAK,QAASK,EAAKP,YAE3E,OADAC,EAAM/B,EAAKiC,YAAYF,GAChB1B,EAAeK,UAAUC,IAAIoB,EAAK,CAAClB,QAASR,EAAeQ,UAAUC,KACxEC,EAAAA,IAAI,SAAAZ,GAAY,OAAAH,EAAKgB,KAAKd,EAAMC,EAAUH,EAAKI,YAC/Ca,EAAAA,WAAW,SAAApB,GAAS,OAAAqB,EAAAA,WAAqBrB,cAIzCC,EAAAwC,UAAAL,qBAAYF,GAChB,GAAIQ,KAAKnC,aACL,IAAmB,IAAAoC,EAAAC,EAAAF,KAAKnC,UAAQsC,EAAAF,EAAArD,QAAAuD,EAAApD,KAAAoD,EAAAF,EAAArD,OAAA,CAA3B,IAAMwD,EAAID,EAAArD,MACX0C,EAAMA,EAAIC,OAAO,SAAUW,EAAKC,KAAM,IAAKD,EAAKE,4GAGxD,OAAOd,WAIIjC,EAAA8B,sBAAaD,EAAemB,EAAezD,GACtD,GAAIsC,EAAO,CACP,IAAIoB,EAAcpB,EAAMqB,QAAQF,GAC5BG,GAAiD,GAA5BtB,EAAMqB,QAAQ,IAAKD,GAAapB,EAAMqB,QAAQ,IAAKD,GAAOpB,EAAMqB,QAAQ,IAAKD,GAEtG,IAAY,GAARA,EAAW,CACX,IAAIG,EAAavB,EAAMwB,UAAUJ,EAAKE,GACtCtB,EAAQA,EAAMH,QAAQ0B,EAAYJ,EAAQ,IAAMzD,QAEhDsC,EAAQA,EAAMK,OAAO,IAAMc,EAAQ,IAAMzD,QAG7CsC,EAAQ,IAAMmB,EAAQ,IAAMzD,EAEhC,OAAOsC,KA5Jf,qCCqBWtB,EAAA+C,aAAP,SAAoBC,EAAoBC,GACpC,GAAIA,EAAS,CAET,GAAIA,EAAQD,WACR,IAAoB,IAAAb,EAAAC,EAAAa,EAAQD,QAAMX,EAAAF,EAAArD,QAAAuD,EAAApD,KAAAoD,EAAAF,EAAArD,OAAA,CAA7B,IAAMoE,EAAKb,EAAArD,MACZgE,EAASA,EAAOG,OAAOD,EAAME,IAAKF,EAAMlE,MAAMyC,iHAQtD,GAJIwB,EAAQjB,OACRgB,EAASA,EAAOG,OAAO,OAAQF,EAAQjB,KAAKP,aAG5CwB,EAAQpB,SACR,IAAgB,IAAAwB,EAAAjB,EAAAa,EAAQpB,MAAIyB,EAAAD,EAAAvE,QAAAwE,EAAArE,KAAAqE,EAAAD,EAAAvE,OAAA,CAAvB,IAAMyE,EAACD,EAAAtE,MACJwE,EAAa,GACjBA,EAAaD,EAAEhB,KAAOiB,EAAW7B,OAAO4B,EAAEhB,MAAQiB,EAClDA,EAAaD,EAAEf,MAAQgB,EAAW7B,OAAO,KAAKA,OAAO4B,EAAEf,OAASgB,EAChER,EAASA,EAAOG,OAAO,OAAQK,yGAK3C,OAAOR,eAIJhD,EAAAyD,iBAAP,SAAwBC,GAAxB,IAAA/D,EAAAuC,KACUtC,EAAc,cACTwD,GACP,IAAKO,EAAAA,kBAAkBD,EAASN,IAC5B,GAAIpD,EAAe4D,UAAUF,EAASN,IACjCS,KAAK,SAACD,GAAsB,MAAa,YAAbA,IACzBF,EAASN,GAAa,SACtBxD,EAAOwD,GAAOM,EAASN,GAAa,OAAQ,KAAQ,WACrD,GAAIU,MAAMC,QAAQL,EAASN,IAAO,CACrC,IAAIY,EAAeN,EAASN,GACxBY,IACApE,EAAOwD,GAAO,IAAIU,MAClBE,EAAMC,QAAQ,SAACC,GACPC,EAAAA,YAAYD,GACZtE,EAAOwD,GAAK7D,KAAK2E,GAGjBtE,EAAOwD,GAAK7D,KAAKI,EAAK8D,iBAAiBS,YAKnDtE,EAAOwD,GAAOM,EAASN,IApBnC,IAAK,IAAMA,KAAOM,IAAPN,GAwBX,OAAA,GAIGpD,EAAAC,kBAAP,SAA6CC,GACzC,IAAIkE,EAAkC,IAAI3E,EAE1C,OADA2E,EAAclE,UAAYA,EACnBkE,GAIJpE,EAAAqE,aAAP,SAAoBC,GAChB,IACIC,EADgB,mBACUC,KAAKF,EAAIG,YAAYhD,YACnD,OAAQ8C,GAA4B,EAAjBA,EAAQxF,OAAcwF,EAAQ,GAAK,IAKnDvE,EAAA4D,UAAP,SAAiBc,GAKb,IAJA,IAEId,EAFAe,EAAa,GACbL,EAAMM,OAAOC,eAAeH,GAG0B,YAAlDd,EAAY5D,EAAeqE,aAAaC,KAC5CK,EAAWpF,KAAKqE,GAChBU,EAAMM,OAAOC,eAAeP,GAGhC,OAAOK,GAIJ3E,EAAAG,8BAAP,SAAyDN,EAAoBiF,EACpBlF,EAA0BmF,EAAyBC,OACxG,IAAgC,IAAA7C,EAAAC,EAAAwC,OAAOK,KAAKH,EAAQlF,EAAOM,aAAWmC,EAAAF,EAAArD,QAAAuD,EAAApD,KAAAoD,EAAAF,EAAArD,OAAA,CAAjE,IAAMoG,EAAiB7C,EAAArD,MACxB,IAAIgG,GAAiBA,GAAgBE,GAAmBF,EAAc,CAClE,IACMG,EADcL,EAAQlF,EAAOM,WACZgF,OACvB,IAAiB,IAAAE,EAAAhD,EAAA+C,GAAKE,EAAAD,EAAAtG,QAAAuG,EAAApG,KAAAoG,EAAAD,EAAAtG,OAAA,CAAjB,IAAIwD,EAAI+C,EAAArG,MACLsG,EAAc,IAAIzF,EACtByF,EAAWpD,KAAKqD,eAAeR,EAASG,EAAmBI,GAE3DpD,KAAKsD,oBAAoBF,EAAUhD,GACnC1C,EAAOL,KAAK+F,+MAexB,OAVA1F,EAAO6F,cAAgBX,EAAQY,KAAOZ,EAAQY,KAAKD,cAAgB7F,EAAOb,OAC1Ea,EAAO+F,WAAab,EAAQY,KAAOZ,EAAQY,KAAKC,WAAa,EAC7D/F,EAAOqB,WAAa6D,EAAQY,KAAOZ,EAAQY,KAAKE,OAAS,EACzDhG,EAAO4B,SAAWsD,EAAQY,KAAOZ,EAAQY,KAAK1D,KAAO,GAErDpC,EAAOsB,SAAW4D,EAAQe,QAAUf,EAAQe,OAAOC,KAAOhB,EAAQe,OAAOC,KAAKC,KAAOC,UACrFpG,EAAOQ,SAAW0E,EAAQe,QAAUf,EAAQe,OAAO/G,KAAOgG,EAAQe,OAAO/G,KAAKiH,KAAOC,UACrFpG,EAAOkB,SAAWgE,EAAQe,QAAUf,EAAQe,OAAOI,KAAOnB,EAAQe,OAAOI,KAAKF,KAAOC,UACrFpG,EAAOmB,UAAY+D,EAAQe,QAAUf,EAAQe,OAAOK,MAAQpB,EAAQe,OAAOK,MAAMH,KAAOC,UACxFpG,EAAOoB,SAAW8D,EAAQe,QAAUf,EAAQe,OAAOM,KAAOrB,EAAQe,OAAOM,KAAKJ,KAAOC,UAC9EpG,eAIJI,EAAAuF,eAAP,SAA0CR,EAAyBG,EAA2BI,GAC1F,GAAIP,GAAWA,EAAQqB,SAAU,CAC7B,IAAInB,EAAOF,EAAQqB,SAASnB,OAC5BnB,MAAMuC,KAAKpB,GAAMhB,QAAQ,SAACqC,GACtB,GAAIpB,EAAkBqB,cAAcC,WAAWF,EAAWC,eAAgB,CACtE,IAAIE,EAA0B1B,EAAQqB,SAAS9F,IAAIgG,GACnDhB,EAAW,IAAImB,KAI3B,OAAOnB,GAIJtF,EAAAwF,oBAAP,SAA+CkB,EAAW5B,GACtD,IAAK,IAAM6B,KAAK7B,EAKZ4B,EAAOC,GAAK7B,EAAQ6B,GAExB,OAAOD,GAIJ1G,EAAA4G,YAAP,SAAmBC,GACf7G,EAAe6G,UAAYA,GAIxB7G,EAAA8G,WAAP,SAAkBC,GACd/G,EAAe+G,SAAWA,GAIhB/G,EAAAgH,kBACV,OACIhH,EAAeiH,SADZjH,EAAe6G,WAAyC,IAA5B7G,EAAe6G,UACtB7G,EAAe6G,UACf7G,EAAe+G,WAIhC/G,EAAAiH,kBAASvF,GACpB,IAAIwF,EAAY7F,EAAAA,MAAUK,GAC1B,OAAIiC,EAAAA,kBAAkBuD,EAAUC,SAAWzF,GAA8B,KAAvBA,EAAIA,EAAI3C,OAAS,GACxD2C,EAAM,IACVA,GAIG1B,EAAAO,kBAAS6G,GACnB,OAAKpH,EAAe6G,WAAyC,IAA5B7G,EAAe6G,UAEzC7G,EAAeiH,SAASG,EAAIjG,QAAQnB,EAAe+G,SAAU/G,EAAe6G,YADxEO,GAKDpH,EAAAqH,iBAAQC,GAClBtH,EAAesH,KAAOA,GAIZtH,EAAAK,mBACV,OAAOL,EAAesH,MAInBtH,EAAAuH,WAAP,WACI,OAAOvH,EAAe+G,oBA9MW,IAAIS,EAAAA,wBAEN,gBAED,YAEA,uBCNlC,SAAAC,EAA4DC,GAAAxF,KAAAwF,6BAAAA,EACxD1H,EAAe4G,YAAYc,EAA6BC,eACxD3H,EAAe8G,WAAWY,EAA6BH,cACvDvH,EAAeqH,QAAQK,EAA6BrH,kBAIjDoH,EAAAxF,UAAA2F,qDAA4CF,GACtDxF,KAAKwF,6BAA+BA,EAE7B1H,EAAe4G,YAAYc,EAA6BC,eACxD3H,EAAe8G,WAAWY,EAA6BH,cACvDvH,EAAeqH,QAAQK,EAA6BrH,YAIjDoH,EAAAxF,UAAA4F,oCACH,OAAO3F,KAAKwF,6BAA6BG,4BAItCJ,EAAAxF,UAAA0F,uBACH,OAAOzF,KAAKwF,6BAA6BC,eAItCF,EAAAxF,UAAAsF,sBACH,OAAOrF,KAAKwF,6BAA6BH,cAItCE,EAAAxF,UAAA+E,kBACH,OAAOhH,EAAegH,UAInBS,EAAAxF,UAAA5B,mBACH,OAAOL,EAAeK,+BAzC7ByH,EAAAA,kFAIgBC,EAAAA,OAAMC,KAAA,CAAC,uDCSpB,SAAAC,EAAoBC,GAAAhG,KAAAgG,gBAAAA,SAILD,EAAAjB,kBACX,OAAOhH,EAAegH,UAInBiB,EAAAhG,UAAAkG,gBAA2BtI,EAAoB6D,EAAkBxD,EAAmB+C,EAAsBmF,EAA0BpD,GACvI,IAAMtD,EAAMQ,KAAKmG,eAAe3E,GAAU/B,OAAO,oBAC3CqB,EAAShD,EAAe+C,aAAa,IAAIuF,EAAAA,WAAcrF,GACvDrD,EAA2BI,EAAeC,kBAAqBC,GAKrE,OAHAgC,KAAKqG,QAAQ3I,GACbA,EAAOG,SAAWkD,EAAUA,EAAQpB,KAAOmE,UAC1BhG,EAAeK,UAAUC,IAAIoB,EAAK,CAAElB,QAASR,EAAeQ,QAASwC,OAAQA,IAC5EvC,KAAKC,EAAAA,IAAI,SAAAZ,GAAY,OAAAE,EAAeG,8BAA8BN,EAAMC,EAAUF,EAAQwI,EAAQpD,KAChHpE,EAAAA,WAAW,SAAApB,GAAS,OAAAqB,EAAAA,WAAqBrB,OAI1CyI,EAAAhG,UAAA3B,aAAwBT,EAAoB6D,EAAkB8E,GACjE,IAAM9G,EAAMQ,KAAKmG,eAAe3E,GAAU/B,OAAO,IAAK6G,EAAI,oBACpD5I,EAAY,IAAIC,EAItB,OAFAqC,KAAKuG,gBAAgB7I,GACJI,EAAeK,UAAUC,IAAIoB,EAAK,CAAElB,QAASR,EAAeQ,UAC3DC,KAAKC,EAAAA,IAAI,SAAAgI,GAAQ,OAAA1I,EAAewF,oBAAoB5F,EAAQ8I,KAC1E9H,EAAAA,WAAW,SAAApB,GAAS,OAAAqB,EAAAA,WAAqBrB,OAI1CyI,EAAAhG,UAAA0G,uBAAkC9I,EAAoB+I,GACzD,IAAMhJ,EAAY,IAAIC,EAItB,OAFAqC,KAAKuG,gBAAgB7I,GACJI,EAAeK,UAAUC,IAAIN,EAAeO,SAASqI,GAAe,CAAEpI,QAASR,EAAeQ,UAC7FC,KAAKC,EAAAA,IAAI,SAAAgI,GAAQ,OAAA1I,EAAewF,oBAAoB5F,EAAQ8I,KAC1E9H,EAAAA,WAAW,SAAApB,GAAS,OAAAqB,EAAAA,WAAqBrB,OAI1CyI,EAAAhG,UAAAkF,gBAA2BtH,EAAoByB,EAAeoC,EAAkBxD,EAAmB+C,GACtG,IAAMvB,EAAMQ,KAAKmG,eAAe3E,GAAU/B,OAAO,WAAYL,GACvD0B,EAAShD,EAAe+C,aAAa,IAAIuF,EAAAA,WAAcrF,GACvDrD,EAA2BI,EAAeC,kBAAqBC,GAIrE,OAFAgC,KAAKqG,QAAQ3I,GACII,EAAeK,UAAUC,IAAIoB,EAAK,CAAElB,QAASR,EAAeQ,QAASwC,OAAQA,IAC5EvC,KAAKC,EAAAA,IAAI,SAAAZ,GAAY,OAAAE,EAAeG,8BAA8BN,EAAMC,EAAUF,KAChGgB,EAAAA,WAAW,SAAApB,GAAS,OAAAqB,EAAAA,WAAqBrB,OAI1CyI,EAAAhG,UAAA4G,sBAAiChJ,EAAoByB,EAAeoC,EAAkBT,GACzF,IAAMvB,EAAMQ,KAAKmG,eAAe3E,GAAU/B,OAAO,WAAYL,GACvD0B,EAAShD,EAAe+C,aAAa,IAAIuF,EAAAA,WAAcrF,GACvDrD,EAAY,IAAIC,EAItB,OAFAqC,KAAKuG,gBAAgB7I,GACJI,EAAeK,UAAUC,IAAIoB,EAAK,CAAElB,QAASR,EAAeQ,QAASwC,OAAQA,IAC5EvC,KAAKC,EAAAA,IAAI,SAAAZ,GAAY,OAAAE,EAAewF,oBAAoB5F,EAAQE,KAC9Ec,EAAAA,WAAW,SAAApB,GAAS,OAAAqB,EAAAA,WAAqBrB,OAI1CyI,EAAAhG,UAAA6G,qBAAgCjJ,EAAoByB,EAAeoC,EAAkBxD,EAAmB+C,GAC3G,IAAMvB,EAAMQ,KAAKmG,eAAe3E,EAAWpC,GACrC0B,EAAShD,EAAe+C,aAAa,IAAIuF,EAAAA,WAAcrF,GACvDrD,EAA2BI,EAAeC,kBAAqBC,GAIrE,OAFAgC,KAAKqG,QAAQ3I,GACII,EAAeK,UAAUC,IAAIoB,EAAK,CAAElB,QAASR,EAAeQ,QAASwC,OAAQA,IAC5EvC,KAAKC,EAAAA,IAAI,SAAAZ,GAAY,OAAAE,EAAeG,8BAA8BN,EAAMC,EAAUF,KAChGgB,EAAAA,WAAW,SAAApB,GAAS,OAAAqB,EAAAA,WAAqBrB,OAI1CyI,EAAAhG,UAAA8G,uBAAkClJ,EAAoB+I,GACzD,IAAIhJ,EAAY,IAAIC,EAIpB,OAFAqC,KAAKuG,gBAAgB7I,GACJI,EAAeK,UAAUC,IAAIsI,EAAc,CAAEpI,QAASR,EAAeQ,UACpEC,KAAKC,EAAAA,IAAI,SAAAgI,GAAQ,OAAA1I,EAAewF,oBAAoB5F,EAAQ8I,KAC1E9H,EAAAA,WAAW,SAAApB,GAAS,OAAAqB,EAAAA,WAAqBrB,OAI1CyI,EAAAhG,UAAA+G,4BAAuCnJ,EAAoB+I,EAAsB1I,EAAmB6E,GACvG,IAAMnF,EAA2BI,EAAeC,kBAAqBC,GAIrE,OAFAgC,KAAKqG,QAAQ3I,GACII,EAAeK,UAAUC,IAAIsI,EAAc,CAAEpI,QAASR,EAAeQ,UACpEC,KAAKC,EAAAA,IAAI,SAAAZ,GAAY,OAAAE,EAAeG,8BAA8BN,EAAMC,EAAUF,EAAQmF,KACxGnE,EAAAA,WAAW,SAAApB,GAAS,OAAAqB,EAAAA,WAAqBrB,OAI1CyI,EAAAhG,UAAAgH,eAAMvF,GACT,IAAMhC,EAAMQ,KAAKmG,eAAe3E,GAAU/B,OAAO,oBAEjD,OAAO3B,EAAeK,UAAUC,IAAIoB,EAAK,CAAElB,QAASR,EAAeQ,QAAS0I,QAAS,SAAUzI,KAC3FC,EAAAA,IAAI,SAACZ,GAAuB,OAAAqJ,OAAOrJ,EAASsJ,QAC5CxI,EAAAA,WAAW,SAAApB,GAAS,OAAAqB,EAAAA,WAAqBrB,OAI1CyI,EAAAhG,UAAAoH,gBAA2BC,EAAsB5C,GACpD,IAAMhF,EAAM1B,EAAegH,SAAWsC,EAChCxE,EAAU9E,EAAeyD,iBAAiBiD,GAIhD,OAFAxE,KAAKuG,gBAAgB/B,GACJ1G,EAAeK,UAAUkJ,KAAK7H,EAAKoD,EAAS,CAAEtE,QAASR,EAAeQ,QAAS0I,QAAS,aACvFzI,KAAKC,EAAAA,IAAI,SAACZ,GACxB,GAAuB,KAAnBA,EAAS0J,QAAiB1J,EAAS0J,QAAU,IAC7C,OAAOxJ,EAAewF,oBAAoBkB,EAAQ5G,EAASsJ,MAC1D,GAAuB,KAAnBtJ,EAAS0J,OAAe,CAC7B,IAAIJ,EAAYtJ,EAASsJ,KACzB,OAAOvI,EAAAA,WAAqBuI,EAAK5J,UAErCoB,EAAAA,WAAW,SAAApB,GAAS,OAAAqB,EAAAA,WAAqBrB,OAI1CyI,EAAAhG,UAAAwH,gBAA2B/C,GAC9B,IAAMhF,EAAM1B,EAAeO,SAASmG,EAAOb,OAAOC,KAAKC,MACjDjB,EAAU9E,EAAeyD,iBAAiBiD,GAGhD,OAFAxE,KAAKuG,gBAAgB/B,GACJ1G,EAAeK,UAAUqJ,IAAIhI,EAAKoD,EAAS,CAAEtE,QAASR,EAAeQ,QAAS0I,QAAS,aACtFzI,KAAKC,EAAAA,IAAI,SAACZ,GACxB,GAAuB,KAAnBA,EAAS0J,QAAiB1J,EAAS0J,QAAU,IAC7C,OAAOxJ,EAAewF,oBAAoBkB,EAAQ5G,EAASsJ,MAC1D,GAAuB,KAAnBtJ,EAAS0J,OAAe,CAC7B,IAAIJ,EAAYtJ,EAASsJ,KACzB,OAAOvI,EAAAA,WAAqBuI,EAAK5J,UAErCoB,EAAAA,WAAW,SAAApB,GAAS,OAAAqB,EAAAA,WAAqBrB,OAI1CyI,EAAAhG,UAAA0H,0BAAqCvF,EAAiCwE,GACzE,IAAMlH,EAAM1B,EAAeO,SAASqI,GAGhCgB,EAAa5J,EAAeQ,QAGhC,OAFAoJ,EAAWC,IAAI,eAAgB,iBACd7J,EAAeK,UAAUqJ,IAAIhI,EAAK0C,EAAe,CAAE5D,QAASoJ,EAAYV,QAAS,aAChFzI,KAAKC,EAAAA,IAAI,SAACZ,GACxB,GAAuB,KAAnBA,EAAS0J,QAAiB1J,EAAS0J,QAAU,IAC7C,MAAO,GACN,GAAuB,KAAnB1J,EAAS0J,OAAe,CAC7B,IAAIJ,EAAYtJ,EAASsJ,KACzB,OAAOvI,EAAAA,WAAqBuI,EAAK5J,UAErCoB,EAAAA,WAAW,SAAApB,GAAS,OAAAqB,EAAAA,WAAqBrB,OAI1CyI,EAAAhG,UAAA6H,eAA0BpD,GAC7B,IAAMhF,EAAM1B,EAAeO,SAASmG,EAAOb,OAAOC,KAAKC,MACjDjB,EAAU9E,EAAeyD,iBAAiBiD,GAGhD,OAFAxE,KAAKuG,gBAAgB/B,GACJ1G,EAAeK,UAAUyJ,MAAMpI,EAAKoD,EAAS,CAAEtE,QAASR,EAAeQ,QAAS0I,QAAS,aACxFzI,KAAKC,EAAAA,IAAI,SAACZ,GACxB,GAAuB,KAAnBA,EAAS0J,QAAiB1J,EAAS0J,QAAU,IAC7C,OAAOxJ,EAAewF,oBAAoBkB,EAAQ5G,EAASsJ,MAC1D,GAAuB,KAAnBtJ,EAAS0J,OAAe,CAC7B,IAAIJ,EAAYtJ,EAASsJ,KACzB,OAAOvI,EAAAA,WAAqBuI,EAAK5J,UAErCoB,EAAAA,WAAW,SAAApB,GAAS,OAAAqB,EAAAA,WAAqBrB,OAI1CyI,EAAAhG,UAAA8H,mBAA2BrD,GAC9B,IAAMhF,EAAM1B,EAAeO,SAASmG,EAAOb,OAAOC,KAAKC,MACvD,OAAO/F,EAAeK,UAAU0J,UAAOrI,EAAK,CAAElB,QAASR,EAAeQ,UAAWC,KAAKG,EAAAA,WAAW,SAAApB,GAAS,OAAAqB,EAAAA,WAAqBrB,OAI5HyI,EAAAhG,UAAA+H,iBAA4B5F,GAC/B,OAAOA,EAAchE,UAAY4F,WAI9BiC,EAAAhG,UAAAgI,iBAA4B7F,GAC/B,OAAOA,EAActD,UAAYkF,WAI9BiC,EAAAhG,UAAAiI,kBAA6B9F,GAChC,OAAOA,EAAcrD,WAAaiF,WAI/BiC,EAAAhG,UAAAkI,iBAA4B/F,GAC/B,OAAOA,EAAcpD,UAAYgF,WAI9BiC,EAAAhG,UAAAnD,cAAyBsF,EAAiCvE,GAC7D,OAAOuE,EAActF,KAAKe,IAIvBoI,EAAAhG,UAAAgE,cAAyB7B,EAAiCvE,GAC7D,OAAOuE,EAAc6B,KAAKpG,IAIvBoI,EAAAhG,UAAAiE,eAA0B9B,EAAiCvE,GAC9D,OAAOuE,EAAc8B,MAAMrG,IAIxBoI,EAAAhG,UAAAkE,cAAyB/B,EAAiCvE,GAC7D,OAAOuE,EAAc+B,KAAKtG,IAIvBoI,EAAAhG,UAAAyD,cAAyBtB,EAAiCvE,EAAoB2I,GACjF,OAAOpE,EAAcsB,KAAK7F,EAAM2I,IAI7BP,EAAAhG,UAAAmI,sBAAiChG,EAAiCvE,OAAoB,IAAAgC,EAAA,GAAAC,EAAA,EAAAA,EAAAC,UAAAhD,OAAA+C,IAAAD,EAAAC,EAAA,GAAAC,UAAAD,GACzF,OAAOsC,EAAcgG,aAAYC,MAA1BjG,EJxHf,SAAAkG,IACI,IAAK,IAAIhL,EAAK,GAAIV,EAAI,EAAGA,EAAImD,UAAUhD,OAAQH,IAC3CU,EAAKA,EAAGqC,OAAOzC,EAAO6C,UAAUnD,KACpC,OAAOU,EIqHiBgL,CAAA,CAAczK,GAASgC,KAIxCoG,EAAAhG,UAAAD,cAAyBoC,EAAiCvE,EAAoBmC,GACjF,OAAOoC,EAAcpC,KAAKnC,EAAMmC,IAI7BiG,EAAAhG,UAAAoG,wBAAe3E,GAClB,IAAI0D,EAAMa,EAAgBjB,SAI1B,OAHKI,EAAImD,SAAS,OACdnD,EAAMA,EAAIzF,OAAO,MAEjB+B,EACO0D,EAAIzF,OAAO+B,GAEf0D,GAIHa,EAAAhG,UAAAsG,iBAA4B3I,GAChCA,EAAO4K,SAAWtI,KAAKgG,gBAAgBP,cACvC/H,EAAO6K,QAAUvI,KAAKgG,gBAAgBX,cAIlCU,EAAAhG,UAAAwG,yBAAoC7I,GACxCA,EAAO4K,SAAWtI,KAAKgG,gBAAgBP,cACvC/H,EAAO6K,QAAUvI,KAAKgG,gBAAgBX,kCArQ7CO,EAAAA,sDANQL,UCOTiD,EAAA,WAaI,SAAAA,EAAY7K,EACA6D,EACQiH,EACRzK,GADQgC,KAAAyI,SAAAA,iBALQ,YAOxBzI,KAAKrC,KAAOA,EACZqC,KAAKwB,SAAWA,EAChBxB,KAAK0I,gBAAkBD,EAASrK,IAAI2H,GAC/BtE,EAAAA,kBAAkBzD,KACnBgC,KAAKhC,UAAYA,UAIfwK,EAAAzI,UAAA4I,YAAV,SAAsBrL,GAClB,OAAOkL,EAAYG,YAAYrL,IAIlBkL,EAAAG,YAAjB,SAA6BrL,GACzB,OAAOqB,EAAAA,WAAqBrB,IAIzBkL,EAAAzI,UAAAkG,gBAAOlF,EAAsBmF,EAA0BpD,cAC1D,OAAO9C,KAAK0I,gBAAgBzC,OAAOjG,KAAKrC,KAAMqC,KAAKwB,SAAUxB,KAAKhC,UAAW+C,EAASmF,EAAQpD,GAAcvE,KACxGqK,EAAAA,SAAS,SAAC1G,GACN,OAAInB,GAAWA,EAAQ8H,WAAapH,EAAAA,kBAAkBS,EAAcrD,YAChEkC,EAAQ8H,UAAW,EACnB9H,EAAQjB,KAAOoC,EAAcqB,cACtB9F,EAAKwI,OAAOlF,KAEnBtD,EAAKyE,cAAgBA,EACd4G,EAAAA,GAAa5G,EAAcxE,aAM3C8K,EAAAzI,UAAA3B,aAAIkI,GACP,OAAOtG,KAAK0I,gBAAgBtK,IAAI4B,KAAKrC,KAAMqC,KAAKwB,SAAU8E,IAIvDkC,EAAAzI,UAAA0G,uBAAcsC,GACjB,OAAO/I,KAAK0I,gBAAgBjC,cAAczG,KAAKrC,KAAMoL,IAIlDP,EAAAzI,UAAAkF,gBAAO7F,EAAe2B,cACzB,OAAOf,KAAK0I,gBAAgBzD,OAAOjF,KAAKrC,KAAMyB,EAAOY,KAAKwB,SAAUxB,KAAKhC,UAAW+C,GAASxC,KACzFqK,EAAAA,SAAS,SAAC1G,GACN,OAAInB,GAAWA,EAAQ8H,WAAapH,EAAAA,kBAAkBS,EAAcrD,YAChEkC,EAAQ8H,UAAW,EACnB9H,EAAQjB,KAAOoC,EAAcqB,cACtB9F,EAAKwH,OAAO7F,EAAO2B,KAE1BtD,EAAKyE,cAAgBA,EACd4G,EAAAA,GAAa5G,EAAcxE,aAM3C8K,EAAAzI,UAAA4G,sBAAavH,EAAe2B,GAC/B,OAAOf,KAAK0I,gBAAgB/B,aAAa3G,KAAKrC,KAAMyB,EAAOY,KAAKwB,SAAUT,IAIvEyH,EAAAzI,UAAA6G,qBAAYxH,EAAe2B,cAC9B,OAAOf,KAAK0I,gBAAgB9B,YAAY5G,KAAKrC,KAAMyB,EAAOY,KAAKwB,SAAUxB,KAAKhC,UAAW+C,GAASxC,KAC9FqK,EAAAA,SAAS,SAAC1G,GACN,OAAInB,GAAWA,EAAQ8H,WAAapH,EAAAA,kBAAkBS,EAAcrD,YAChEkC,EAAQ8H,UAAW,EACnB9H,EAAQjB,KAAOoC,EAAcqB,cACtB9F,EAAKmJ,YAAYxH,EAAO2B,KAE/BtD,EAAKyE,cAAgBA,EACd4G,EAAAA,GAAa5G,EAAcxE,aAO3C8K,EAAAzI,UAAA+G,4BAAmBkC,EAAkBnG,cACxC,OAAO7C,KAAK0I,gBAAgB5B,mBAAmB9G,KAAKrC,KAAMqL,EAAUhJ,KAAKhC,UAAW6E,GAAStE,KACzFC,EAAAA,IAAI,SAAC0D,GAED,OADAzE,EAAKyE,cAAgBA,GACAxE,WAK1B8K,EAAAzI,UAAA8G,uBAAcmC,GACjB,OAAOhJ,KAAK0I,gBAAgB7B,cAAc7G,KAAKrC,KAAMqL,IAIlDR,EAAAzI,UAAAgH,iBACH,OAAO/G,KAAK0I,gBAAgB3B,MAAM/G,KAAKwB,WAIpCgH,EAAAzI,UAAAoH,gBAAO3C,GACV,OAAOxE,KAAK0I,gBAAgBvB,OAAOnH,KAAKwB,SAAUgD,IAI/CgE,EAAAzI,UAAAwH,gBAAO/C,GACV,OAAOxE,KAAK0I,gBAAgBnB,OAAO/C,IAIhCgE,EAAAzI,UAAA6H,eAAMpD,GACT,OAAOxE,KAAK0I,gBAAgBd,MAAMpD,IAI/BgE,EAAAzI,UAAA8H,mBAAOrD,GACV,OAAOxE,KAAK0I,gBAAgBb,UAAOrD,IAIhCgE,EAAAzI,UAAAkJ,wBACH,OAAIjJ,KAAKkC,eAAiBlC,KAAKkC,cAAcqB,cAClCvD,KAAKkC,cAAcqB,cACvB,GAIJiF,EAAAzI,UAAAiI,oBACH,QAAIhI,KAAKkC,eACElC,KAAK0I,gBAAgBV,SAAShI,KAAKkC,gBAK3CsG,EAAAzI,UAAA+H,mBACH,QAAI9H,KAAKkC,eACElC,KAAK0I,gBAAgBZ,QAAQ9H,KAAKkC,gBAK1CsG,EAAAzI,UAAAgI,mBACH,QAAI/H,KAAKkC,eACElC,KAAK0I,gBAAgBX,QAAQ/H,KAAKkC,gBAK1CsG,EAAAzI,UAAAkI,mBACH,QAAIjI,KAAKkC,eACElC,KAAK0I,gBAAgBT,QAAQjI,KAAKkC,gBAK1CsG,EAAAzI,UAAAnD,2BACH,GAAIoD,KAAKkC,cACL,OAAOlC,KAAK0I,gBAAgB9L,KAAKoD,KAAKkC,cAAelC,KAAKrC,MAAMY,KAC5DC,EAAAA,IAAI,SAAC0D,GAED,OADAzE,EAAKyE,cAAgBA,GACAxE,UAG7BiB,EAAAA,WAAqB,2BAItB6J,EAAAzI,UAAAgE,2BACH,GAAI/D,KAAKkC,cACL,OAAOlC,KAAK0I,gBAAgB3E,KAAK/D,KAAKkC,cAAelC,KAAKrC,MAAMY,KAC5DC,EAAAA,IAAI,SAAC0D,GAED,OADAzE,EAAKyE,cAAgBA,GACAxE,UAG7BiB,EAAAA,WAAqB,2BAItB6J,EAAAzI,UAAAiE,4BACH,GAAIhE,KAAKkC,cACL,OAAOlC,KAAK0I,gBAAgB1E,MAAMhE,KAAKkC,cAAelC,KAAKrC,MACtDY,KACGC,EAAAA,IAAI,SAAC0D,GAED,OADAzE,EAAKyE,cAAgBA,GACAxE,UAIjCiB,EAAAA,WAAqB,2BAItB6J,EAAAzI,UAAAkE,2BACH,GAAIjE,KAAKkC,cACL,OAAOlC,KAAK0I,gBAAgBzE,KAAKjE,KAAKkC,cAAelC,KAAKrC,MACrDY,KACGC,EAAAA,IAAI,SAAC0D,GAED,OADAzE,EAAKyE,cAAgBA,GACAxE,UAIjCiB,EAAAA,WAAqB,2BAItB6J,EAAAzI,UAAAyD,cAAKzE,cACR,GAAIiB,KAAKkC,cACL,OAAOlC,KAAK0I,gBAAgBlF,KAAKxD,KAAKkC,cAAelC,KAAKrC,KAAMoB,GAAYR,KACxEC,EAAAA,IAAI,SAAC0D,GAED,OADAzE,EAAKyE,cAAgBA,GACAxE,UAG7BiB,EAAAA,WAAqB,6BAtOjC,gBCyBI,SAAAuK,kCAVWA,EAAAnJ,UAAA,WAAQ,gBACf,OAAOC,KAAKmJ,wBAIIA,GAChBnJ,KAAKmJ,UAAYA,mCAQdD,EAAAnJ,UAAAqJ,0BAAqCzL,EAAoBqL,EAAkBhL,EAAoB+C,EAAsB8B,GAExH,IAAM/B,EAAShD,EAAe+C,aAAa,IAAIuF,EAAAA,WAAcrF,GACvDrD,EAA2BI,EAAeC,kBAAqB0D,EAAAA,kBAAkBzD,GAAa,YAAcA,GAClH,OAAKyD,EAAAA,kBAAkBzB,KAAK2D,SAAYlC,EAAAA,kBAAkBzB,KAAK2D,OAAOqF,IAQ3DF,EAAAA,GAAa,IAPHhL,EAAeK,UAAUC,IAAIN,EAAeO,SAAS2B,KAAK2D,OAAOqF,GAAUnF,MAAO,CAC/FvF,QAASR,EAAeQ,QACxBwC,OAAQA,IAEMvC,KAAKC,EAAAA,IAAI,SAAAZ,GAAY,OAAAE,EAAeG,8BAAiCN,EAAMC,EAAUF,EAAQmF,KAC3GrE,EAAAA,IAAI,SAACsD,GAA4B,OAAAA,EAAMpE,WAO5CwL,EAAAnJ,UAAAsJ,qBAAgC1L,EAAoBqL,EAAkBnG,GACzE,IAAInF,EAAY,IAAIC,EACpB,OAAK8D,EAAAA,kBAAkBzB,KAAK2D,SAAYlC,EAAAA,kBAAkBzB,KAAK2D,OAAOqF,IAiB3DF,EAAAA,GAAa,MAhBHhL,EAAeK,UAAUC,IAAIN,EAAeO,SAAS2B,KAAK2D,OAAOqF,GAAUnF,MAAO,CAACvF,QAASR,EAAeQ,UAC1GC,KAAKC,EAAAA,IAAI,SAACgI,GACxB,GAAI3D,MACA,IAAgC,IAAA5C,EAAAC,EAAAwC,OAAOK,KAAKyD,EAAa,SAAErG,EAAAF,EAAArD,QAAAuD,EAAApD,KAAAoD,EAAAF,EAAArD,OAAA,CAAtD,IAAMoG,EAAiB7C,EAAArD,MACxB,GAAyB,QAArBkG,EAA6B,CAC7B,IAAIa,EAAe2C,EAAK7C,OAAOX,GAAmBa,KAC9CrD,EAAcqD,EAAKyF,YAAY,KAC/BC,EAAgB1F,EAAK5E,QAAQnB,EAAeuH,aAAc,IAAIzE,UAAU,EAAGJ,GAC/E9C,EAASI,EAAeuF,eAAeR,EAAS0G,EAAe7L,GAC/D,4GAIZ,OAAOI,EAAewF,oBAAoB5F,EAAQ8I,eAQvD0C,EAAAnJ,UAAAyJ,qBAAgCR,EAAkBxH,GACrD,GAAKC,EAAAA,kBAAkBzB,KAAK2D,SAAYlC,EAAAA,kBAAkBzB,KAAK2D,OAAOqF,IAIlE,OAAOrK,EAAAA,WAAqB,qBAH5B,IAAI8K,EAAS3L,EAAeQ,QAAQ2C,OAAO,eAAgB,iBAC3D,OAAOnD,EAAeK,UAAUkJ,KAAKvJ,EAAeO,SAAS2B,KAAK2D,OAAOqF,GAAUnF,MAAOrC,EAASmC,OAAOC,KAAKC,KAAM,CAACvF,QAASmL,KAOhIP,EAAAnJ,UAAA2J,wBAAmCV,EAAkBxH,GACxD,GAAKC,EAAAA,kBAAkBzB,KAAK2D,SAAYlC,EAAAA,kBAAkBzB,KAAK2D,OAAOqF,IAIlE,OAAOrK,EAAAA,WAAqB,qBAH5B,IAAI8K,EAAS3L,EAAeQ,QAAQ2C,OAAO,eAAgB,iBAC3D,OAAOnD,EAAeK,UAAUyJ,MAAM9J,EAAeO,SAAS2B,KAAK2D,OAAOqF,GAAUnF,MAAOrC,EAASmC,OAAOC,KAAKC,KAAM,CAACvF,QAASmL,KAOjIP,EAAAnJ,UAAA4J,4BAAuCX,EAAkBxH,GAC5D,GAAKC,EAAAA,kBAAkBzB,KAAK2D,SAAYlC,EAAAA,kBAAkBzB,KAAK2D,OAAOqF,IAIlE,OAAOrK,EAAAA,WAAqB,qBAH5B,IAAI8K,EAAS3L,EAAeQ,QAAQ2C,OAAO,eAAgB,iBAC3D,OAAOnD,EAAeK,UAAUqJ,IAAI1J,EAAeO,SAAS2B,KAAK2D,OAAOqF,GAAUnF,MAAOrC,EAASmC,OAAOC,KAAKC,KAAM,CAACvF,QAASmL,KAQ/HP,EAAAnJ,UAAA6J,+BAA0CZ,EAAkBa,GAC/D,GAAKpI,EAAAA,kBAAkBzB,KAAK2D,SAAYlC,EAAAA,kBAAkBzB,KAAK2D,OAAOqF,IAIlE,OAAOrK,EAAAA,WAAqB,qBAH5B,IAAI8K,EAAS3L,EAAeQ,QAAQ2C,OAAO,eAAgB,iBAC3D,OAAOnD,EAAeK,UAAUqJ,IAAI1J,EAAeO,SAAS2B,KAAK2D,OAAOqF,GAAUnF,MAAOgG,EAAUrL,IAAI,SAACgD,GAAa,OAAAA,EAASmC,OAAOC,KAAKC,OAAO,CAACvF,QAASmL,KAS5JP,EAAAnJ,UAAA+J,wBAAmCd,EAAkBxH,GACxD,GAAKC,EAAAA,kBAAkBzB,KAAK2D,SAAYlC,EAAAA,kBAAkBD,EAASmC,QAU/D,OAAOhF,EAAAA,WAAqB,qBAT5B,IAAIoL,EAAevI,EAASmC,OAAa,KAAEE,KACvCrD,EAAcuJ,EAAKT,YAAY,KAAO,EAE1C,IAAY,GAAR9I,EACA,OAAO7B,EAAAA,WAAqB,qBAEhC,IAAIqL,EAAqBD,EAAKnJ,UAAUJ,GACxC,OAAO1C,EAAeK,UAAU0J,UAAO/J,EAAeO,SAAS2B,KAAK2D,OAAOqF,GAAUnF,KAAO,IAAMmG,GAAa,CAAC1L,QAASR,EAAeQ,WAOzI4K,EAAAnJ,UAAAkK,2BAAsCjB,GACzC,OAAOlL,EAAeK,UAAU0J,UAAO/J,EAAeO,SAAS2B,KAAK2D,OAAOqF,GAAUnF,MAAQ,CAACvF,QAASR,EAAeQ,+BAlI7HsH,EAAAA,0FCsBUsE,EAAAC,QAAP,WACI,MAAO,CACHC,SAAUF,EACVG,UAAW,CACP9E,EACA+E,EAAAA,WACA,CACIC,QAASxE,EACTyE,SAAUzE,EACV0E,KAAM,CAAClF,2BAvB1BmF,EAAAA,SAAQ5E,KAAA,CAAC,CACN6E,QAAS,CAACC,EAAAA,kBACVC,aAAc,GACdC,QAAS,CAACF,EAAAA,kBACVP,UAAW,CACP9E,EACA+E,EAAAA,WACA,CACIC,QAASxE,EACTyE,SAAUzE,EACV0E,KAAM,CAAClF","sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = Object.setPrototypeOf ||\r\n    ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n    function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = Object.assign || function __assign(t) {\r\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n        s = arguments[i];\r\n        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n    }\r\n    return t;\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator.throw(value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = y[op[0] & 2 ? \"return\" : op[0] ? \"throw\" : \"next\"]) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [0, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);  }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { if (o[n]) i[n] = function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; }; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator];\r\n    return m ? m.call(o) : typeof __values === \"function\" ? __values(o) : o[Symbol.iterator]();\r\n}","\r\nimport {throwError as observableThrowError} from 'rxjs';\r\n\r\nimport {catchError, map} from 'rxjs/operators';\r\nimport {Sort} from './sort';\r\nimport {ArrayInterface} from './array-interface';\r\nimport {ResourceHelper} from './resource-helper';\r\nimport {Resource} from './resource';\r\nimport * as url from 'url';\r\nimport {Observable} from 'rxjs';\r\n\r\n/** REST array of resource implementation */\r\nexport class ResourceArray<T extends Resource> implements ArrayInterface<T> {\r\n    /** sorting info */\r\n    public sortInfo: Sort[];\r\n    /** proxy url */\r\n    public proxyUrl: string;\r\n    /** root url */\r\n    public rootUrl: string;\r\n\r\n    /** self url */\r\n    public self_uri: string;\r\n    /** next resource url */\r\n    public next_uri: string;\r\n    /** previous resource url */\r\n    public prev_uri: string;\r\n    /** first resource url */\r\n    public first_uri: string;\r\n    /** last resource url */\r\n    public last_uri: string;\r\n\r\n    /** embedded array list */\r\n    public _embedded;\r\n\r\n    /** total number of elements in this array */\r\n    public totalElements = 0;\r\n    /** total number of pages in the response */\r\n    public totalPages = 1;\r\n    \r\n    /** page number in the response */\r\n    public pageNumber = 1;\r\n    \r\n    /** page size */\r\n    public pageSize: number;\r\n\r\n    /** array components */\r\n    public result: T[] = [];\r\n\r\n    /** push a new resource to the array */\r\n    push = (el: T) => {\r\n        this.result.push(el);\r\n    };\r\n\r\n    /** length of the array */\r\n    length = (): number => {\r\n        return this.result.length;\r\n    };\r\n\r\n    /** load array data from REST request */\r\n    private init = (type: { new(): T }, response: any, sortInfo: Sort[]): ResourceArray<T> => {\r\n        const result: ResourceArray<T> = ResourceHelper.createEmptyResult<T>(this._embedded);\r\n        result.sortInfo = sortInfo;\r\n        ResourceHelper.instantiateResourceCollection(type, response, result);\r\n        return result;\r\n    };\r\n\r\n    /** Load next page */\r\n    next = (type: { new(): T }): Observable<ResourceArray<T>> => {\r\n        if (this.next_uri) {\r\n            return ResourceHelper.getHttp().get(ResourceHelper.getProxy(this.next_uri), {headers: ResourceHelper.headers}).pipe(\r\n                map(response => this.init(type, response, this.sortInfo)),\r\n                catchError(error => observableThrowError(error)),);\r\n        }\r\n        return observableThrowError('no next defined');\r\n    };\r\n\r\n    /** Load previous page */\r\n    prev = (type: { new(): T }): Observable<ResourceArray<T>> => {\r\n        if (this.prev_uri) {\r\n            return ResourceHelper.getHttp().get(ResourceHelper.getProxy(this.prev_uri), {headers: ResourceHelper.headers}).pipe(\r\n                map(response => this.init(type, response, this.sortInfo)),\r\n                catchError(error => observableThrowError(error)),);\r\n        }\r\n        return observableThrowError('no prev defined');\r\n    };\r\n\r\n    /** Load first page */\r\n    first = (type: { new(): T }): Observable<ResourceArray<T>> => {\r\n        if (this.first_uri) {\r\n            return ResourceHelper.getHttp().get(ResourceHelper.getProxy(this.first_uri), {headers: ResourceHelper.headers}).pipe(\r\n                map(response => this.init(type, response, this.sortInfo)),\r\n                catchError(error => observableThrowError(error)),);\r\n        }\r\n        return observableThrowError('no first defined');\r\n    };\r\n\r\n    /** Load last page */\r\n    last = (type: { new(): T }): Observable<ResourceArray<T>> => {\r\n        if (this.last_uri) {\r\n            return ResourceHelper.getHttp().get(ResourceHelper.getProxy(this.last_uri), {headers: ResourceHelper.headers}).pipe(\r\n                map(response => this.init(type, response, this.sortInfo)),\r\n                catchError(error => observableThrowError(error)),);\r\n        }\r\n        return observableThrowError('no last defined');\r\n    };\r\n\r\n    /** Load page with given pageNumber*/\r\n    page = (type: { new(): T }, pageNumber: number): Observable<ResourceArray<T>> => {\r\n        this.self_uri = this.self_uri.replace('{?page,size,sort}', '');\r\n        this.self_uri = this.self_uri.replace('{&sort}', '');\r\n        let urlParsed = url.parse(ResourceHelper.getProxy(this.self_uri));\r\n        let query: string = ResourceArray.replaceOrAdd(urlParsed.query, 'size', this.pageSize.toString());\r\n        query = ResourceArray.replaceOrAdd(query, 'page', pageNumber.toString());\r\n\r\n\r\n        let uri = urlParsed.query ?\r\n            ResourceHelper.getProxy(this.self_uri).replace(urlParsed.query, query) : ResourceHelper.getProxy(this.self_uri).concat(query);\r\n        uri = this.addSortInfo(uri);\r\n        return ResourceHelper.getHttp().get(uri, {headers: ResourceHelper.headers}).pipe(\r\n            map(response => this.init(type, response, this.sortInfo)),\r\n            catchError(error => observableThrowError(error)),);\r\n    };\r\n\r\n    /** Sort collection based on given sort attribute */\r\n    sortElements = (type: { new(): T }, ...sort: Sort[]): Observable<ResourceArray<T>> => {\r\n        this.self_uri = this.self_uri.replace('{?page,size,sort}', '');\r\n        this.self_uri = this.self_uri.replace('{&sort}', '');\r\n        let uri = ResourceHelper.getProxy(this.self_uri).concat('?', 'size=', this.pageSize.toString(), '&page=', this.pageNumber.toString());\r\n        uri = this.addSortInfo(uri);\r\n        return ResourceHelper.getHttp().get(uri, {headers: ResourceHelper.headers}).pipe(\r\n            map(response => this.init(type, response, sort)),\r\n            catchError(error => observableThrowError(error)),);\r\n    };\r\n\r\n    /** Load page with given size */\r\n    size = (type: { new(): T }, size: number): Observable<ResourceArray<T>> => {\r\n        let uri = ResourceHelper.getProxy(this.self_uri).concat('?', 'size=', size.toString());\r\n        uri = this.addSortInfo(uri);\r\n        return ResourceHelper.getHttp().get(uri, {headers: ResourceHelper.headers}).pipe(\r\n            map(response => this.init(type, response, this.sortInfo)),\r\n            catchError(error => observableThrowError(error)),);\r\n    };\r\n\r\n    /** Add sort info to given URI */\r\n    private addSortInfo(uri: string) {\r\n        if (this.sortInfo) {\r\n            for (const item of this.sortInfo) {\r\n                uri = uri.concat('&sort=', item.path, ',', item.order);\r\n            }\r\n        }\r\n        return uri;\r\n    }\r\n\r\n    /** Add replace or add param value to query string */\r\n    private static replaceOrAdd(query: string, field: string, value: string): string {\r\n        if (query) {\r\n            let idx: number = query.indexOf(field);\r\n            let idxNextAmp: number = query.indexOf('&', idx) == -1 ? query.indexOf('/', idx) : query.indexOf('&', idx);\r\n\r\n            if (idx != -1) {\r\n                let seachValue = query.substring(idx, idxNextAmp);\r\n                query = query.replace(seachValue, field + '=' + value);\r\n            } else {\r\n                query = query.concat(\"&\" + field + '=' + value);\r\n            }\r\n        } else {\r\n            query = \"?\" + field + '=' + value;\r\n        }\r\n        return query;\r\n    }\r\n}\r\n","import {HttpClient, HttpHeaders, HttpParams} from '@angular/common/http';\r\nimport {Resource} from './resource';\r\nimport {ResourceArray} from './resource-array';\r\nimport {HalOptions} from './rest.service';\r\nimport {SubTypeBuilder} from './subtype-builder';\r\nimport {isNullOrUndefined, isPrimitive} from 'util';\r\nimport * as url from 'url';\r\n\r\n/** REST API access helper */\r\nexport class ResourceHelper {\r\n\r\n    /** HttpHeaders */\r\n    public static headers: HttpHeaders = new HttpHeaders();\r\n    /** Proxy URL */\r\n    private static proxy_uri: string = null;\r\n    /** Root URL */\r\n    private static root_uri: string = null;\r\n    /** HttpClient */\r\n    private static http: HttpClient = null;\r\n\r\n    /** get request headers */\r\n    /*public static get headers(): HttpHeaders {\r\n        if (isNullOrUndefined(this._headers))\r\n          ResourceHelper._headers = new HttpHeaders();\r\n        return ResourceHelper._headers;\r\n    }*/\r\n\r\n    /** set request headers */\r\n    /*public static set headers(headers: HttpHeaders) {\r\n      ResourceHelper._headers = headers;\r\n    }*/\r\n\r\n    /** get request option params */\r\n    static optionParams(params: HttpParams, options?: HalOptions): HttpParams {\r\n        if (options) {\r\n\r\n            if (options.params) {\r\n                for (const param of options.params) {\r\n                    params = params.append(param.key, param.value.toString());\r\n                }\r\n            }\r\n\r\n            if (options.size) {\r\n                params = params.append('size', options.size.toString());\r\n            }\r\n\r\n            if (options.sort) {\r\n                for (const s of options.sort) {\r\n                    let sortString = '';\r\n                    sortString = s.path ? sortString.concat(s.path) : sortString;\r\n                    sortString = s.order ? sortString.concat(',').concat(s.order) : sortString;\r\n                    params = params.append('sort', sortString);\r\n                }\r\n            }\r\n\r\n        }\r\n        return params;\r\n    }\r\n\r\n    /** resolve resource relations */\r\n    static resolveRelations(resource: Resource): Object {\r\n        const result: any = {};\r\n        for (const key in resource) {\r\n            if (!isNullOrUndefined(resource[key])) {\r\n                if (ResourceHelper.className(resource[key])\r\n                    .find((className: string) => className == 'Resource')) {\r\n                    if (resource[key]['_links'])\r\n                        result[key] = resource[key]['_links']['self']['href'];\r\n                } else if (Array.isArray(resource[key])) {\r\n                    let array: any[] = resource[key];\r\n                    if (array) {\r\n                        result[key] = new Array();\r\n                        array.forEach((element) => {\r\n                            if (isPrimitive(element)) {\r\n                                result[key].push(element);\r\n                            }\r\n                            else {\r\n                                result[key].push(this.resolveRelations(element));\r\n                            }\r\n                        });\r\n                    }\r\n                } else {\r\n                    result[key] = resource[key];\r\n                }\r\n            }\r\n        }\r\n        return result as Object;\r\n    }\r\n\r\n    /** create an empty resource from embedded data*/\r\n    static createEmptyResult<T extends Resource>(_embedded: string): ResourceArray<T> {\r\n        let resourceArray: ResourceArray<T> = new ResourceArray<T>();\r\n        resourceArray._embedded = _embedded;\r\n        return resourceArray;\r\n    }\r\n\r\n    /** get resource class name*/\r\n    static getClassName(obj: any): string {\r\n        var funcNameRegex = /function (.+?)\\(/;\r\n        var results = (funcNameRegex).exec(obj.constructor.toString());\r\n        return (results && results.length > 1) ? results[1] : '';\r\n    }\r\n\r\n    \r\n    /** get resource class name from a prototype object*/\r\n    static className(objProto: any): string[] {\r\n        let classNames = [];\r\n        let obj = Object.getPrototypeOf(objProto);\r\n        let className: string;\r\n\r\n        while ((className = ResourceHelper.getClassName(obj)) !== 'Object') {\r\n            classNames.push(className);\r\n            obj = Object.getPrototypeOf(obj);\r\n        }\r\n\r\n        return classNames;\r\n    }\r\n\r\n    /** instantiate a ResourceCollection from response embedded data*/\r\n    static instantiateResourceCollection<T extends Resource>(type: { new(): T }, payload: any,\r\n                                                             result: ResourceArray<T>, builder?: SubTypeBuilder,embeddedName?:String): ResourceArray<T> {\r\n        for (const embeddedClassName of Object.keys(payload[result._embedded])) {\r\n            if(!embeddedName || (embeddedName && embeddedClassName==embeddedName)){\r\n                let embedded: any = payload[result._embedded];\r\n                const items = embedded[embeddedClassName];\r\n                for (let item of items) {\r\n                    let instance: T = new type();\r\n                    instance = this.searchSubtypes(builder, embeddedClassName, instance);\r\n\r\n                    this.instantiateResource(instance, item);\r\n                    result.push(instance);\r\n                }\r\n            }\r\n        }\r\n\r\n        result.totalElements = payload.page ? payload.page.totalElements : result.length;\r\n        result.totalPages = payload.page ? payload.page.totalPages : 1;\r\n        result.pageNumber = payload.page ? payload.page.number : 1;\r\n        result.pageSize = payload.page ? payload.page.size : 20;\r\n\r\n        result.self_uri = payload._links && payload._links.self ? payload._links.self.href : undefined;\r\n        result.next_uri = payload._links && payload._links.next ? payload._links.next.href : undefined;\r\n        result.prev_uri = payload._links && payload._links.prev ? payload._links.prev.href : undefined;\r\n        result.first_uri = payload._links && payload._links.first ? payload._links.first.href : undefined;\r\n        result.last_uri = payload._links && payload._links.last ? payload._links.last.href : undefined;\r\n        return result;\r\n    }\r\n\r\n    /** search subtypes*/\r\n    static searchSubtypes<T extends Resource>(builder: SubTypeBuilder, embeddedClassName: string, instance: T) {\r\n        if (builder && builder.subtypes) {\r\n            let keys = builder.subtypes.keys();\r\n            Array.from(keys).forEach((subtypeKey: string) => {\r\n                if (embeddedClassName.toLowerCase().startsWith(subtypeKey.toLowerCase())) {\r\n                    let subtype: { new(): any } = builder.subtypes.get(subtypeKey);\r\n                    instance = new subtype();\r\n                }\r\n            });\r\n        }\r\n        return instance;\r\n    }\r\n\r\n    /** instantiate a Resource from response */\r\n    static instantiateResource<T extends Resource>(entity: T, payload: Object): T {\r\n        for (const p in payload) {\r\n            //TODO array init\r\n            /* if(entity[p].constructor === Array && isNullOrUndefined(payload[p]))\r\n                 entity[p] = [];\r\n             else*/\r\n            entity[p] = payload[p];\r\n        }\r\n        return entity;\r\n    }\r\n\r\n    /** set proxy URL */\r\n    static setProxyUri(proxy_uri: string) {\r\n        ResourceHelper.proxy_uri = proxy_uri;\r\n    }\r\n\r\n    /** set Root URI */\r\n    static setRootUri(root_uri: string) {\r\n        ResourceHelper.root_uri = root_uri;\r\n    }\r\n\r\n    /** get proxy URL */\r\n    public static getURL(): string {\r\n        return ResourceHelper.proxy_uri && ResourceHelper.proxy_uri != '' ?\r\n            ResourceHelper.addSlash(ResourceHelper.proxy_uri) :\r\n            ResourceHelper.addSlash(ResourceHelper.root_uri);\r\n    }\r\n\r\n    /** add slash to URI */\r\n    private static addSlash(uri: string): string {\r\n        let uriParsed = url.parse(uri);\r\n        if (isNullOrUndefined(uriParsed.search) && uri && uri[uri.length - 1] != '/')\r\n            return uri + '/';\r\n        return uri;\r\n    }\r\n\r\n    /** get proxy from URL */\r\n    public static getProxy(url: string): string {\r\n        if (!ResourceHelper.proxy_uri || ResourceHelper.proxy_uri == '')\r\n            return url;\r\n        return ResourceHelper.addSlash(url.replace(ResourceHelper.root_uri, ResourceHelper.proxy_uri));\r\n    }\r\n\r\n    /** set HttpClient*/\r\n    public static setHttp(http: HttpClient) {\r\n        ResourceHelper.http = http;\r\n    }\r\n\r\n    /** get HttpClient*/\r\n    public static getHttp(): HttpClient {\r\n        return ResourceHelper.http;\r\n    }\r\n\r\n    /** get root URI*/\r\n    static getRootUri() {\r\n        return ResourceHelper.root_uri;\r\n    }\r\n}\r\n","import {HttpClient} from '@angular/common/http';\r\nimport {Inject, Injectable} from '@angular/core';\r\nimport {ResourceHelper} from './resource-helper';\r\nimport {ExternalConfigurationHandlerInterface} from './external-configuration.handler';\r\nimport {ExternalConfiguration} from './ExternalConfiguration';\r\n\r\n\r\n/** ExternalService */\r\n@Injectable()\r\nexport class ExternalService {\r\n\r\n    /** constructor */\r\n    constructor(@Inject('ExternalConfigurationService') private externalConfigurationService: ExternalConfigurationHandlerInterface) {\r\n        ResourceHelper.setProxyUri(externalConfigurationService.getProxyUri());\r\n        ResourceHelper.setRootUri(externalConfigurationService.getRootUri());\r\n        ResourceHelper.setHttp(externalConfigurationService.getHttp());\r\n    }\r\n\r\n    /** update ExternalConfigurationHandler */\r\n    public updateExternalConfigurationHandlerInterface(externalConfigurationService: ExternalConfigurationHandlerInterface) {\r\n\tthis.externalConfigurationService = externalConfigurationService;\r\n\r\n        ResourceHelper.setProxyUri(externalConfigurationService.getProxyUri());\r\n        ResourceHelper.setRootUri(externalConfigurationService.getRootUri());\r\n        ResourceHelper.setHttp(externalConfigurationService.getHttp());\r\n    }\r\n\r\n    /** get ExternalConfiguration */\r\n    public getExternalConfiguration(): ExternalConfiguration {\r\n        return this.externalConfigurationService.getExternalConfiguration();\r\n    }\r\n\r\n    /** get proxy URL */\r\n    public getProxyUri(): string {\r\n        return this.externalConfigurationService.getProxyUri();\r\n    }\r\n\r\n    /** get Root URI */\r\n    public getRootUri(): string {\r\n        return this.externalConfigurationService.getRootUri();\r\n    }\r\n\r\n    /** get URL */\r\n    public getURL(): string {\r\n        return ResourceHelper.getURL();\r\n    }\r\n\r\n    /** get HttpClient */\r\n    public getHttp(): HttpClient {\r\n        return ResourceHelper.getHttp();\r\n    }\r\n}\r\n","\r\nimport { throwError as observableThrowError } from 'rxjs';\r\n\r\nimport { catchError, map } from 'rxjs/operators';\r\nimport { Resource } from './resource';\r\nimport { ResourceHelper } from './resource-helper';\r\nimport { Injectable } from '@angular/core';\r\nimport { HttpParams, HttpResponse } from '@angular/common/http';\r\nimport { Sort } from './sort';\r\nimport { ResourceArray } from './resource-array';\r\nimport { ExternalService } from './external.service';\r\nimport { HalOptions } from './rest.service';\r\nimport { SubTypeBuilder } from './subtype-builder';\r\nimport { Observable } from 'rxjs';\r\n\r\n/** ResourceService */\r\n@Injectable()\r\nexport class ResourceService {\r\n\r\n\r\n    /** constructor */\r\n    constructor(private externalService: ExternalService) { }\r\n\r\n\r\n    /** get URL */\r\n    private static getURL(): string {\r\n        return ResourceHelper.getURL();\r\n    }\r\n\r\n    /** get all resources from a base URI of a given type */\r\n    public getAll<T extends Resource>(type: { new(): T }, resource: string, _embedded: string, options?: HalOptions, subType?: SubTypeBuilder, embeddedName?:String): Observable<ResourceArray<T>> {\r\n        const uri = this.getResourceUrl(resource).concat('?projection=view');\r\n        const params = ResourceHelper.optionParams(new HttpParams(), options);\r\n        const result: ResourceArray<T> = ResourceHelper.createEmptyResult<T>(_embedded);\r\n\r\n        this.setUrls(result);\r\n        result.sortInfo = options ? options.sort : undefined;\r\n        let observable = ResourceHelper.getHttp().get(uri, { headers: ResourceHelper.headers, params: params });\r\n        return observable.pipe(map(response => ResourceHelper.instantiateResourceCollection(type, response, result, subType,embeddedName)),\r\n            catchError(error => observableThrowError(error)));\r\n    }\r\n\r\n    /** get resource from a base URI and a given id */\r\n    public get<T extends Resource>(type: { new(): T }, resource: string, id: any): Observable<T> {\r\n        const uri = this.getResourceUrl(resource).concat('/', id, '?projection=view');\r\n        const result: T = new type();\r\n\r\n        this.setUrlsResource(result);\r\n        let observable = ResourceHelper.getHttp().get(uri, { headers: ResourceHelper.headers });\r\n        return observable.pipe(map(data => ResourceHelper.instantiateResource(result, data)),\r\n            catchError(error => observableThrowError(error)));\r\n    }\r\n\r\n    /** get resource from its selflink */\r\n    public getBySelfLink<T extends Resource>(type: { new(): T }, resourceLink: string): Observable<T> {\r\n        const result: T = new type();\r\n\r\n        this.setUrlsResource(result);\r\n        let observable = ResourceHelper.getHttp().get(ResourceHelper.getProxy(resourceLink), { headers: ResourceHelper.headers });\r\n        return observable.pipe(map(data => ResourceHelper.instantiateResource(result, data)),\r\n            catchError(error => observableThrowError(error)));\r\n    }\r\n\r\n    /** search resources from a given base path, query and options */\r\n    public search<T extends Resource>(type: { new(): T }, query: string, resource: string, _embedded: string, options?: HalOptions): Observable<ResourceArray<T>> {\r\n        const uri = this.getResourceUrl(resource).concat('/search/', query);\r\n        const params = ResourceHelper.optionParams(new HttpParams(), options);\r\n        const result: ResourceArray<T> = ResourceHelper.createEmptyResult<T>(_embedded);\r\n\r\n        this.setUrls(result);\r\n        let observable = ResourceHelper.getHttp().get(uri, { headers: ResourceHelper.headers, params: params });\r\n        return observable.pipe(map(response => ResourceHelper.instantiateResourceCollection(type, response, result)),\r\n            catchError(error => observableThrowError(error)));\r\n    }\r\n\r\n    /** search a single resource from a given base path, query and options */\r\n    public searchSingle<T extends Resource>(type: { new(): T }, query: string, resource: string, options?: HalOptions): Observable<T> {\r\n        const uri = this.getResourceUrl(resource).concat('/search/', query);\r\n        const params = ResourceHelper.optionParams(new HttpParams(), options);\r\n        const result: T = new type();\r\n\r\n        this.setUrlsResource(result);\r\n        let observable = ResourceHelper.getHttp().get(uri, { headers: ResourceHelper.headers, params: params });\r\n        return observable.pipe(map(response => ResourceHelper.instantiateResource(result, response)),\r\n            catchError(error => observableThrowError(error)));\r\n    }\r\n\r\n    /** search resources from a given base path, custom query and options */\r\n    public customQuery<T extends Resource>(type: { new(): T }, query: string, resource: string, _embedded: string, options?: HalOptions): Observable<ResourceArray<T>> {\r\n        const uri = this.getResourceUrl(resource + query);\r\n        const params = ResourceHelper.optionParams(new HttpParams(), options);\r\n        const result: ResourceArray<T> = ResourceHelper.createEmptyResult<T>(_embedded);\r\n\r\n        this.setUrls(result);\r\n        let observable = ResourceHelper.getHttp().get(uri, { headers: ResourceHelper.headers, params: params });\r\n        return observable.pipe(map(response => ResourceHelper.instantiateResourceCollection(type, response, result)),\r\n            catchError(error => observableThrowError(error)));\r\n    }\r\n\r\n    /** get resource given a relation link */\r\n    public getByRelation<T extends Resource>(type: { new(): T }, resourceLink: string): Observable<T> {\r\n        let result: T = new type();\r\n\r\n        this.setUrlsResource(result);\r\n        let observable = ResourceHelper.getHttp().get(resourceLink, { headers: ResourceHelper.headers });\r\n        return observable.pipe(map(data => ResourceHelper.instantiateResource(result, data)),\r\n            catchError(error => observableThrowError(error)));\r\n    }\r\n\r\n    /** get resource array given a relation link */\r\n    public getByRelationArray<T extends Resource>(type: { new(): T }, resourceLink: string, _embedded: string, builder?: SubTypeBuilder): Observable<ResourceArray<T>> {\r\n        const result: ResourceArray<T> = ResourceHelper.createEmptyResult<T>(_embedded);\r\n\r\n        this.setUrls(result);\r\n        let observable = ResourceHelper.getHttp().get(resourceLink, { headers: ResourceHelper.headers });\r\n        return observable.pipe(map(response => ResourceHelper.instantiateResourceCollection(type, response, result, builder)),\r\n            catchError(error => observableThrowError(error)));\r\n    }\r\n\r\n    /** count resources given a path */\r\n    public count(resource: string): Observable<number> {\r\n        const uri = this.getResourceUrl(resource).concat('/search/countAll');\r\n\r\n        return ResourceHelper.getHttp().get(uri, { headers: ResourceHelper.headers, observe: 'body' }).pipe(\r\n            map((response: Response) => Number(response.body)),\r\n            catchError(error => observableThrowError(error)));\r\n    }\r\n\r\n    /** create resource from self link and entity data*/\r\n    public create<T extends Resource>(selfResource: string, entity: T) {\r\n        const uri = ResourceHelper.getURL() + selfResource;\r\n        const payload = ResourceHelper.resolveRelations(entity);\r\n\r\n        this.setUrlsResource(entity);\r\n        let observable = ResourceHelper.getHttp().post(uri, payload, { headers: ResourceHelper.headers, observe: 'response' });\r\n        return observable.pipe(map((response: HttpResponse<string>) => {\r\n            if (response.status >= 200 && response.status <= 207)\r\n                return ResourceHelper.instantiateResource(entity, response.body);\r\n            else if (response.status == 500) {\r\n                let body: any = response.body;\r\n                return observableThrowError(body.error);\r\n            }\r\n        }), catchError(error => observableThrowError(error)));\r\n    }\r\n\r\n    /** update resource from a given entity data*/\r\n    public update<T extends Resource>(entity: T) {\r\n        const uri = ResourceHelper.getProxy(entity._links.self.href);\r\n        const payload = ResourceHelper.resolveRelations(entity);\r\n        this.setUrlsResource(entity);\r\n        let observable = ResourceHelper.getHttp().put(uri, payload, { headers: ResourceHelper.headers, observe: 'response' });\r\n        return observable.pipe(map((response: HttpResponse<string>) => {\r\n            if (response.status >= 200 && response.status <= 207)\r\n                return ResourceHelper.instantiateResource(entity, response.body);\r\n            else if (response.status == 500) {\r\n                let body: any = response.body;\r\n                return observableThrowError(body.error);\r\n            }\r\n        }), catchError(error => observableThrowError(error)));\r\n    }\r\n\r\n    /** update resource from a given entity data*/\r\n    public updateCollection<T extends Resource>(resourceArray: ResourceArray<T>, resourceLink: string) {\r\n        const uri = ResourceHelper.getProxy(resourceLink);\r\n        //const payload = ResourceHelper.resolveRelations(entity);\r\n        //this.setUrlsResource(entity);\r\n        var headersReq = ResourceHelper.headers;\r\n        headersReq.set(\"Content-Type\", \"text/uri-list\");\r\n        let observable = ResourceHelper.getHttp().put(uri, resourceArray, { headers: headersReq, observe: 'response' });\r\n        return observable.pipe(map((response: HttpResponse<string>) => {\r\n            if (response.status >= 200 && response.status <= 207)\r\n                return \"\";\r\n            else if (response.status == 500) {\r\n                let body: any = response.body;\r\n                return observableThrowError(body.error);\r\n            }\r\n        }), catchError(error => observableThrowError(error)));\r\n    }\r\n\r\n    /** patch resource from a given entity data*/\r\n    public patch<T extends Resource>(entity: T) {\r\n        const uri = ResourceHelper.getProxy(entity._links.self.href);\r\n        const payload = ResourceHelper.resolveRelations(entity);\r\n        this.setUrlsResource(entity);\r\n        let observable = ResourceHelper.getHttp().patch(uri, payload, { headers: ResourceHelper.headers, observe: 'response' });\r\n        return observable.pipe(map((response: HttpResponse<string>) => {\r\n            if (response.status >= 200 && response.status <= 207)\r\n                return ResourceHelper.instantiateResource(entity, response.body);\r\n            else if (response.status == 500) {\r\n                let body: any = response.body;\r\n                return observableThrowError(body.error);\r\n            }\r\n        }), catchError(error => observableThrowError(error)));\r\n    }\r\n\r\n    /** delete resource from a given entity data*/\r\n    public delete<T extends Resource>(entity: T): Observable<Object> {\r\n        const uri = ResourceHelper.getProxy(entity._links.self.href);\r\n        return ResourceHelper.getHttp().delete(uri, { headers: ResourceHelper.headers }).pipe(catchError(error => observableThrowError(error)));\r\n    }\r\n\r\n    /** whether a resource array has next page of results*/\r\n    public hasNext<T extends Resource>(resourceArray: ResourceArray<T>): boolean {\r\n        return resourceArray.next_uri != undefined;\r\n    }\r\n\r\n    /** whether a resource array has previous page of results*/\r\n    public hasPrev<T extends Resource>(resourceArray: ResourceArray<T>): boolean {\r\n        return resourceArray.prev_uri != undefined;\r\n    }\r\n\r\n    /** whether a resource array has first page of results*/\r\n    public hasFirst<T extends Resource>(resourceArray: ResourceArray<T>): boolean {\r\n        return resourceArray.first_uri != undefined;\r\n    }\r\n\r\n    /** whether a resource array has last page of results*/\r\n    public hasLast<T extends Resource>(resourceArray: ResourceArray<T>): boolean {\r\n        return resourceArray.last_uri != undefined;\r\n    }\r\n\r\n    /** get resource array next page of results*/\r\n    public next<T extends Resource>(resourceArray: ResourceArray<T>, type: { new(): T }): Observable<ResourceArray<T>> {\r\n        return resourceArray.next(type);\r\n    }\r\n\r\n    /** get resource array previous page of results*/\r\n    public prev<T extends Resource>(resourceArray: ResourceArray<T>, type: { new(): T }): Observable<ResourceArray<T>> {\r\n        return resourceArray.prev(type);\r\n    }\r\n\r\n    /** get resource array first page of results*/\r\n    public first<T extends Resource>(resourceArray: ResourceArray<T>, type: { new(): T }): Observable<ResourceArray<T>> {\r\n        return resourceArray.first(type);\r\n    }\r\n\r\n    /** get resource array last page of results*/\r\n    public last<T extends Resource>(resourceArray: ResourceArray<T>, type: { new(): T }): Observable<ResourceArray<T>> {\r\n        return resourceArray.last(type);\r\n    }\r\n\r\n    /** get resource array page of results given a page number*/\r\n    public page<T extends Resource>(resourceArray: ResourceArray<T>, type: { new(): T }, id: number): Observable<ResourceArray<T>> {\r\n        return resourceArray.page(type, id);\r\n    }\r\n\r\n    /** sort resource array with a given sorting params */\r\n    public sortElements<T extends Resource>(resourceArray: ResourceArray<T>, type: { new(): T }, ...sort: Sort[]): Observable<ResourceArray<T>> {\r\n        return resourceArray.sortElements(type, ...sort);\r\n    }\r\n\r\n    /** get resource array size*/\r\n    public size<T extends Resource>(resourceArray: ResourceArray<T>, type: { new(): T }, size: number): Observable<ResourceArray<T>> {\r\n        return resourceArray.size(type, size);\r\n    }\r\n\r\n    /** get resource URL from a given path*/\r\n    public getResourceUrl(resource?: string): string {\r\n        let url = ResourceService.getURL();\r\n        if (!url.endsWith('/')) {\r\n            url = url.concat('/');\r\n        }\r\n        if (resource) {\r\n            return url.concat(resource);\r\n        }\r\n        return url;\r\n    }\r\n\r\n    /** set proxy and root urls of given resource array */\r\n    private setUrls<T extends Resource>(result: ResourceArray<T>) {\r\n        result.proxyUrl = this.externalService.getProxyUri();\r\n        result.rootUrl = this.externalService.getRootUri();\r\n    }\r\n\r\n    /** set proxy and root urls of given resource */\r\n    private setUrlsResource<T extends Resource>(result: T) {\r\n        result.proxyUrl = this.externalService.getProxyUri();\r\n        result.rootUrl = this.externalService.getRootUri();\r\n    }\r\n}\r\n","import {of as observableOf, throwError as observableThrowError} from 'rxjs';\r\nimport {map, mergeMap} from 'rxjs/operators';\r\nimport {Resource} from './resource';\r\nimport {ResourceArray} from './resource-array';\r\nimport {Sort} from './sort';\r\nimport {ResourceService} from './resource.service';\r\nimport {SubTypeBuilder} from './subtype-builder';\r\nimport {isNullOrUndefined} from 'util';\r\nimport {Observable} from 'rxjs';\r\nimport {Injector} from \"@angular/core\";\r\n\r\n/** HAL param data model */\r\nexport type HalParam = { key: string, value: string | number | boolean };\r\n/** HAL option data model */\r\nexport type HalOptions = { notPaged?: boolean, size?: number, sort?: Sort[], params?: HalParam[] };\r\n\r\n/** REST API access interface */\r\nexport class RestService<T extends Resource> {\r\n    /** resource type */\r\n    private type: any;\r\n    /** resource path */\r\n    private resource: string;\r\n    /** resource array */\r\n    public resourceArray: ResourceArray<T>;\r\n    /** resource service */\r\n    public resourceService: ResourceService;\r\n    /** _embedded field name */\r\n    private _embedded: string = '_embedded';\r\n\r\n    /** constructor */\r\n    constructor(type: { new(): T },\r\n                resource: string,\r\n                private injector: Injector,\r\n                _embedded?: string) {\r\n        this.type = type;\r\n        this.resource = resource;\r\n        this.resourceService = injector.get(ResourceService);\r\n        if (!isNullOrUndefined(_embedded))\r\n            this._embedded = _embedded;\r\n    }\r\n\r\n    /** error handler */\r\n    protected handleError(error: any):Observable<never> {\r\n        return RestService.handleError(error);\r\n    }\r\n\r\n    /** error handler */\r\n    protected static handleError(error: any):Observable<never> {\r\n        return observableThrowError(error);\r\n    }\r\n\r\n    /** get all resources with optional options an subType params */\r\n    public getAll(options?: HalOptions, subType?: SubTypeBuilder, embeddedName?:String): Observable<T[]> {\r\n        return this.resourceService.getAll(this.type, this.resource, this._embedded, options, subType,embeddedName).pipe(\r\n            mergeMap((resourceArray: ResourceArray<T>) => {\r\n                if (options && options.notPaged && !isNullOrUndefined(resourceArray.first_uri)) {\r\n                    options.notPaged = false;\r\n                    options.size = resourceArray.totalElements;\r\n                    return this.getAll(options);\r\n                } else {\r\n                    this.resourceArray = resourceArray;\r\n                    return observableOf(resourceArray.result);\r\n                }\r\n            }));\r\n    }\r\n\r\n    /** get resource from a given id */\r\n    public get(id: any): Observable<T> {\r\n        return this.resourceService.get(this.type, this.resource, id);\r\n    }\r\n\r\n    /** get resource from self link */\r\n    public getBySelfLink(selfLink: string): Observable<T> {\r\n        return this.resourceService.getBySelfLink(this.type, selfLink);\r\n    }\r\n\r\n    /** search resources from a given query string and optional options params */\r\n    public search(query: string, options?: HalOptions): Observable<T[]> {\r\n        return this.resourceService.search(this.type, query, this.resource, this._embedded, options).pipe(\r\n            mergeMap((resourceArray: ResourceArray<T>) => {\r\n                if (options && options.notPaged && !isNullOrUndefined(resourceArray.first_uri)) {\r\n                    options.notPaged = false;\r\n                    options.size = resourceArray.totalElements;\r\n                    return this.search(query, options);\r\n                } else {\r\n                    this.resourceArray = resourceArray;\r\n                    return observableOf(resourceArray.result);\r\n                }\r\n            }));\r\n    }\r\n\r\n    /** search resource from a given query string and optional options params */\r\n    public searchSingle(query: string, options?: HalOptions): Observable<T> {\r\n        return this.resourceService.searchSingle(this.type, query, this.resource, options);\r\n    }\r\n\r\n    /** search resources from a given custom query string and optional options params */\r\n    public customQuery(query: string, options?: HalOptions): Observable<T[]> {\r\n        return this.resourceService.customQuery(this.type, query, this.resource, this._embedded, options).pipe(\r\n            mergeMap((resourceArray: ResourceArray<T>) => {\r\n                if (options && options.notPaged && !isNullOrUndefined(resourceArray.first_uri)) {\r\n                    options.notPaged = false;\r\n                    options.size = resourceArray.totalElements;\r\n                    return this.customQuery(query, options);\r\n                } else {\r\n                    this.resourceArray = resourceArray;\r\n                    return observableOf(resourceArray.result);\r\n                }\r\n            }));\r\n    }\r\n\r\n\r\n    /** get resource array given a relation link */\r\n    public getByRelationArray(relation: string, builder?: SubTypeBuilder): Observable<T[]> {\r\n        return this.resourceService.getByRelationArray(this.type, relation, this._embedded, builder).pipe(\r\n            map((resourceArray: ResourceArray<T>) => {\r\n                this.resourceArray = resourceArray;\r\n                return resourceArray.result;\r\n            }));\r\n    }\r\n\r\n    /** get resource given a relation link */\r\n    public getByRelation(relation: string): Observable<T> {\r\n        return this.resourceService.getByRelation(this.type, relation);\r\n    }\r\n\r\n    /** count resources given a path */\r\n    public count(): Observable<number> {\r\n        return this.resourceService.count(this.resource);\r\n    }\r\n\r\n    /** create resource from self link and entity data*/\r\n    public create(entity: T) {\r\n        return this.resourceService.create(this.resource, entity);\r\n    }\r\n\r\n    /** update resource from a given entity data*/\r\n    public update(entity: T) {\r\n        return this.resourceService.update(entity);\r\n    }\r\n\r\n    /** patch resource from a given entity data*/\r\n    public patch(entity: T) {\r\n        return this.resourceService.patch(entity);\r\n    }\r\n\r\n    /** delete resource from a given entity data*/\r\n    public delete(entity: T): Observable<Object> {\r\n        return this.resourceService.delete(entity);\r\n    }\r\n\r\n    /** get total number of elements of resource array */\r\n    public totalElement(): number {\r\n        if (this.resourceArray && this.resourceArray.totalElements)\r\n            return this.resourceArray.totalElements;\r\n        return 0;\r\n    }\r\n\r\n    /** whether a resource array has first page of results*/\r\n    public hasFirst(): boolean {\r\n        if (this.resourceArray)\r\n            return this.resourceService.hasFirst(this.resourceArray);\r\n        return false;\r\n    }\r\n\r\n    /** whether a resource array has next page of results*/\r\n    public hasNext(): boolean {\r\n        if (this.resourceArray)\r\n            return this.resourceService.hasNext(this.resourceArray);\r\n        return false;\r\n    }\r\n\r\n    /** whether a resource array has previous page of results*/\r\n    public hasPrev(): boolean {\r\n        if (this.resourceArray)\r\n            return this.resourceService.hasPrev(this.resourceArray);\r\n        return false;\r\n    }\r\n\r\n    /** whether a resource array has last page of results*/\r\n    public hasLast(): boolean {\r\n        if (this.resourceArray)\r\n            return this.resourceService.hasLast(this.resourceArray);\r\n        return false;\r\n    }\r\n\r\n    /** get resource array next page of results*/\r\n    public next(): Observable<T[]> {\r\n        if (this.resourceArray)\r\n            return this.resourceService.next(this.resourceArray, this.type).pipe(\r\n                map((resourceArray: ResourceArray<T>) => {\r\n                    this.resourceArray = resourceArray;\r\n                    return resourceArray.result;\r\n                }));\r\n        else\r\n            observableThrowError('no resourceArray found');\r\n    }\r\n\r\n    /** get resource array previous page of results*/\r\n    public prev(): Observable<T[]> {\r\n        if (this.resourceArray)\r\n            return this.resourceService.prev(this.resourceArray, this.type).pipe(\r\n                map((resourceArray: ResourceArray<T>) => {\r\n                    this.resourceArray = resourceArray;\r\n                    return resourceArray.result;\r\n                }));\r\n        else\r\n            observableThrowError('no resourceArray found');\r\n    }\r\n\r\n    /** get resource array first page of results*/\r\n    public first(): Observable<T[]> {\r\n        if (this.resourceArray)\r\n            return this.resourceService.first(this.resourceArray, this.type)\r\n                .pipe(\r\n                    map((resourceArray: ResourceArray<T>) => {\r\n                        this.resourceArray = resourceArray;\r\n                        return resourceArray.result;\r\n                    })\r\n                );\r\n        else\r\n            observableThrowError('no resourceArray found');\r\n    }\r\n\r\n    /** get resource array last page of results*/\r\n    public last(): Observable<T[]> {\r\n        if (this.resourceArray)\r\n            return this.resourceService.last(this.resourceArray, this.type)\r\n                .pipe(\r\n                    map((resourceArray: ResourceArray<T>) => {\r\n                        this.resourceArray = resourceArray;\r\n                        return resourceArray.result;\r\n                    })\r\n                );\r\n        else\r\n            observableThrowError('no resourceArray found');\r\n    }\r\n\r\n    /** get resource array page of results given a page number*/\r\n    public page(pageNumber: number): Observable<T[]> {\r\n        if (this.resourceArray)\r\n            return this.resourceService.page(this.resourceArray, this.type, pageNumber).pipe(\r\n                map((resourceArray: ResourceArray<T>) => {\r\n                    this.resourceArray = resourceArray;\r\n                    return resourceArray.result;\r\n                }));\r\n        else\r\n            observableThrowError('no resourceArray found');\r\n    }\r\n}\r\n","\r\nimport {throwError as observableThrowError, of as observableOf} from 'rxjs';\r\n\r\nimport {map} from 'rxjs/operators';\r\n\r\n\r\nimport {HttpParams} from '@angular/common/http';\r\nimport {ResourceHelper} from './resource-helper';\r\nimport {ResourceArray} from './resource-array';\r\nimport {isNullOrUndefined} from 'util';\r\n\r\nimport {HalOptions} from './rest.service';\r\nimport {SubTypeBuilder} from './subtype-builder';\r\nimport {Injectable} from '@angular/core';\r\nimport {Observable} from 'rxjs';\r\n\r\n/** Abstract resource class*/\r\n@Injectable()\r\nexport abstract class Resource {\r\n\r\n    /** proxy URL */\r\n    public proxyUrl: string;\r\n    /** root URL */\r\n    public rootUrl: string;\r\n\r\n    /** links */\r\n    public _links: any;\r\n    /** subtypes */\r\n    public _subtypes: Map<string, any>;\r\n\r\n    \r\n    /** get subtypes */    \r\n    public get subtypes(): Map<string, any> {\r\n        return this._subtypes;\r\n    }\r\n\r\n    /** set subtypes */\r\n    public set subtypes(_subtypes: Map<string, any>) {\r\n        this._subtypes = _subtypes;\r\n    }\r\n\r\n    /** constructor*/\r\n    constructor() {\r\n    }\r\n\r\n    /** Get collection of related resources */\r\n    public getRelationArray<T extends Resource>(type: { new(): T }, relation: string, _embedded?: string, options?: HalOptions, builder?: SubTypeBuilder): Observable<T[]> {\r\n\r\n        const params = ResourceHelper.optionParams(new HttpParams(), options);\r\n        const result: ResourceArray<T> = ResourceHelper.createEmptyResult<T>(isNullOrUndefined(_embedded) ? \"_embedded\" : _embedded);\r\n        if (!isNullOrUndefined(this._links) && !isNullOrUndefined(this._links[relation])) {\r\n            let observable = ResourceHelper.getHttp().get(ResourceHelper.getProxy(this._links[relation].href), {\r\n                headers: ResourceHelper.headers,\r\n                params: params\r\n            });\r\n            return observable.pipe(map(response => ResourceHelper.instantiateResourceCollection<T>(type, response, result, builder)),\r\n                map((array: ResourceArray<T>) => array.result),);\r\n        } else {\r\n            return observableOf([]);\r\n        }\r\n    }\r\n\r\n    /** Get related resource */\r\n    public getRelation<T extends Resource>(type: { new(): T }, relation: string, builder?: SubTypeBuilder): Observable<T> {\r\n        let result: T = new type();\r\n        if (!isNullOrUndefined(this._links) && !isNullOrUndefined(this._links[relation])) {\r\n            let observable = ResourceHelper.getHttp().get(ResourceHelper.getProxy(this._links[relation].href), {headers: ResourceHelper.headers});\r\n            return observable.pipe(map((data: any) => {\r\n                if (builder) {\r\n                    for (const embeddedClassName of Object.keys(data['_links'])) {\r\n                        if (embeddedClassName == 'self') {\r\n                            let href: string = data._links[embeddedClassName].href;\r\n                            let idx: number = href.lastIndexOf('/');\r\n                            let realClassName = href.replace(ResourceHelper.getRootUri(), \"\").substring(0, idx);\r\n                            result = ResourceHelper.searchSubtypes(builder, realClassName, result);\r\n                            break;\r\n                        }\r\n                    }\r\n                }\r\n                return ResourceHelper.instantiateResource(result, data);\r\n            }));\r\n        } else {\r\n            return observableOf(null);\r\n        }\r\n    }\r\n\r\n    /** Adds the given resource to the bound collection by the relation */\r\n    public addRelation<T extends Resource>(relation: string, resource: T): Observable<any> {\r\n        if (!isNullOrUndefined(this._links) && !isNullOrUndefined(this._links[relation])) {\r\n            let header = ResourceHelper.headers.append('Content-Type', 'text/uri-list');\r\n            return ResourceHelper.getHttp().post(ResourceHelper.getProxy(this._links[relation].href), resource._links.self.href, {headers: header});\r\n        } else {\r\n            return observableThrowError('no relation found');\r\n        }\r\n    }\r\n\r\n    /** Bind the given resource to this resource by the given relation*/\r\n    public updateRelation<T extends Resource>(relation: string, resource: T): Observable<any> {\r\n        if (!isNullOrUndefined(this._links) && !isNullOrUndefined(this._links[relation])) {\r\n            let header = ResourceHelper.headers.append('Content-Type', 'text/uri-list');\r\n            return ResourceHelper.getHttp().patch(ResourceHelper.getProxy(this._links[relation].href), resource._links.self.href, {headers: header});\r\n        } else {\r\n            return observableThrowError('no relation found');\r\n        }\r\n    }\r\n\r\n    /** Bind the given resource to this resource by the given relation*/\r\n    public substituteRelation<T extends Resource>(relation: string, resource: T): Observable<any> {\r\n        if (!isNullOrUndefined(this._links) && !isNullOrUndefined(this._links[relation])) {\r\n            let header = ResourceHelper.headers.append('Content-Type', 'text/uri-list');\r\n            return ResourceHelper.getHttp().put(ResourceHelper.getProxy(this._links[relation].href), resource._links.self.href, {headers: header});\r\n        } else {\r\n            return observableThrowError('no relation found');\r\n        }\r\n    }\r\n    \r\n    \r\n    /** Bind the given resource to this resource by the given relation*/\r\n    public substituteAllRelation<T extends Resource>(relation: string, resources: Resource[]): Observable<any> {\r\n        if (!isNullOrUndefined(this._links) && !isNullOrUndefined(this._links[relation])) {\r\n            let header = ResourceHelper.headers.append('Content-Type', 'text/uri-list');\r\n            return ResourceHelper.getHttp().put(ResourceHelper.getProxy(this._links[relation].href), resources.map((resource) => resource._links.self.href), {headers: header});\r\n        } else {\r\n            return observableThrowError('no relation found');\r\n        }\r\n    }\r\n\r\n\r\n\r\n    /** Unbind the resource with the given relation from this resource*/\r\n    public deleteRelation<T extends Resource>(relation: string, resource: T): Observable<any> {\r\n        if (!isNullOrUndefined(this._links) && !isNullOrUndefined(resource._links)) {\r\n            let link: string = resource._links['self'].href;\r\n            let idx: number = link.lastIndexOf('/') + 1;\r\n\r\n            if (idx == -1)\r\n                return observableThrowError('no relation found');\r\n\r\n            let relationId: string = link.substring(idx);\r\n            return ResourceHelper.getHttp().delete(ResourceHelper.getProxy(this._links[relation].href + '/' + relationId), {headers: ResourceHelper.headers});\r\n        } else {\r\n            return observableThrowError('no relation found');\r\n        }\r\n    }\r\n    \r\n    /** Unbind the resource with the given relation from this resource*/\r\n    public deleteAllRelation<T extends Resource>(relation: string): Observable<any> {\r\n        return ResourceHelper.getHttp().delete(ResourceHelper.getProxy(this._links[relation].href ), {headers: ResourceHelper.headers});\r\n        \r\n    }\r\n\r\n}","import {ModuleWithProviders, NgModule} from '@angular/core';\r\nimport {HttpClient, HttpClientModule} from '@angular/common/http';\r\nimport {HalParam, RestService} from './rest.service';\r\nimport {ExternalService} from './external.service';\r\nimport {ResourceService} from './resource.service';\r\nimport {ExternalConfigurationHandlerInterface} from './external-configuration.handler';\r\n\r\nimport 'rxjs';\r\n\r\nimport {SubTypeBuilder} from './subtype-builder';\r\n\r\nexport {ExternalService} from './external.service';\r\nexport {RestService} from './rest.service';\r\nexport {Resource} from './resource';\r\nexport {ResourceArray} from './resource-array';\r\nexport {ResourceService} from './resource.service';\r\nexport {Sort} from './sort';\r\nexport {ResourceHelper} from './resource-helper';\r\nexport {ExternalConfiguration} from './ExternalConfiguration';\r\nexport {ExternalConfigurationHandlerInterface} from './external-configuration.handler';\r\nexport {HalOptions, HalParam} from './rest.service';\r\nexport {SubTypeBuilder} from './subtype-builder';\r\n\r\n\r\n/** Angular HAL module */\r\n@NgModule({\r\n    imports: [HttpClientModule],\r\n    declarations: [],\r\n    exports: [HttpClientModule],\r\n    providers: [\r\n        ExternalService,\r\n        HttpClient,\r\n        {\r\n            provide: ResourceService,\r\n            useClass: ResourceService,\r\n            deps: [ExternalService]\r\n        }]\r\n})\r\nexport class AngularHalModule {\r\n    static forRoot(): ModuleWithProviders {\r\n        return {\r\n            ngModule: AngularHalModule,\r\n            providers: [\r\n                ExternalService,\r\n                HttpClient,\r\n                {\r\n                    provide: ResourceService,\r\n                    useClass: ResourceService,\r\n                    deps: [ExternalService]\r\n                }\r\n            ]\r\n        };\r\n    }\r\n}"]}