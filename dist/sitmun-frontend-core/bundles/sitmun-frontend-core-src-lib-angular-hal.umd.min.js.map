{"version":3,"sources":["ng://@sitmun/frontend-core/src/lib/angular-hal/lib/resource-array.ts","ng://@sitmun/frontend-core/src/lib/angular-hal/lib/resource-helper.ts","ng://@sitmun/frontend-core/src/lib/angular-hal/lib/external.service.ts","ng://@sitmun/frontend-core/src/lib/angular-hal/lib/resource.service.ts","ng://@sitmun/frontend-core/src/lib/angular-hal/lib/rest.service.ts","ng://@sitmun/frontend-core/src/lib/angular-hal/lib/resource.ts","ng://@sitmun/frontend-core/src/lib/angular-hal/lib/angular-hal.module.ts"],"sourcesContent":["\r\nimport {throwError as observableThrowError} from 'rxjs';\r\n\r\nimport {catchError, map} from 'rxjs/operators';\r\nimport {Sort} from './sort';\r\nimport {ArrayInterface} from './array-interface';\r\nimport {ResourceHelper} from './resource-helper';\r\nimport {Resource} from './resource';\r\nimport * as url from 'url';\r\nimport {Observable} from 'rxjs';\r\n\r\n/** REST array of resource implementation */\r\nexport class ResourceArray<T extends Resource> implements ArrayInterface<T> {\r\n    /** sorting info */\r\n    public sortInfo: Sort[];\r\n    /** proxy url */\r\n    public proxyUrl: string;\r\n    /** root url */\r\n    public rootUrl: string;\r\n\r\n    /** self url */\r\n    public self_uri: string;\r\n    /** next resource url */\r\n    public next_uri: string;\r\n    /** previous resource url */\r\n    public prev_uri: string;\r\n    /** first resource url */\r\n    public first_uri: string;\r\n    /** last resource url */\r\n    public last_uri: string;\r\n\r\n    /** embedded array list */\r\n    public _embedded;\r\n\r\n    /** total number of elements in this array */\r\n    public totalElements = 0;\r\n    /** total number of pages in the response */\r\n    public totalPages = 1;\r\n    \r\n    /** page number in the response */\r\n    public pageNumber = 1;\r\n    \r\n    /** page size */\r\n    public pageSize: number;\r\n\r\n    /** array components */\r\n    public result: T[] = [];\r\n\r\n    /** push a new resource to the array */\r\n    push = (el: T) => {\r\n        this.result.push(el);\r\n    };\r\n\r\n    /** length of the array */\r\n    length = (): number => {\r\n        return this.result.length;\r\n    };\r\n\r\n    /** load array data from REST request */\r\n    private init = (type: { new(): T }, response: any, sortInfo: Sort[]): ResourceArray<T> => {\r\n        const result: ResourceArray<T> = ResourceHelper.createEmptyResult<T>(this._embedded);\r\n        result.sortInfo = sortInfo;\r\n        ResourceHelper.instantiateResourceCollection(type, response, result);\r\n        return result;\r\n    };\r\n\r\n    /** Load next page */\r\n    next = (type: { new(): T }): Observable<ResourceArray<T>> => {\r\n        if (this.next_uri) {\r\n            return ResourceHelper.getHttp().get(ResourceHelper.getProxy(this.next_uri), {headers: ResourceHelper.headers}).pipe(\r\n                map(response => this.init(type, response, this.sortInfo)),\r\n                catchError(error => observableThrowError(error)),);\r\n        }\r\n        return observableThrowError('no next defined');\r\n    };\r\n\r\n    /** Load previous page */\r\n    prev = (type: { new(): T }): Observable<ResourceArray<T>> => {\r\n        if (this.prev_uri) {\r\n            return ResourceHelper.getHttp().get(ResourceHelper.getProxy(this.prev_uri), {headers: ResourceHelper.headers}).pipe(\r\n                map(response => this.init(type, response, this.sortInfo)),\r\n                catchError(error => observableThrowError(error)),);\r\n        }\r\n        return observableThrowError('no prev defined');\r\n    };\r\n\r\n    /** Load first page */\r\n    first = (type: { new(): T }): Observable<ResourceArray<T>> => {\r\n        if (this.first_uri) {\r\n            return ResourceHelper.getHttp().get(ResourceHelper.getProxy(this.first_uri), {headers: ResourceHelper.headers}).pipe(\r\n                map(response => this.init(type, response, this.sortInfo)),\r\n                catchError(error => observableThrowError(error)),);\r\n        }\r\n        return observableThrowError('no first defined');\r\n    };\r\n\r\n    /** Load last page */\r\n    last = (type: { new(): T }): Observable<ResourceArray<T>> => {\r\n        if (this.last_uri) {\r\n            return ResourceHelper.getHttp().get(ResourceHelper.getProxy(this.last_uri), {headers: ResourceHelper.headers}).pipe(\r\n                map(response => this.init(type, response, this.sortInfo)),\r\n                catchError(error => observableThrowError(error)),);\r\n        }\r\n        return observableThrowError('no last defined');\r\n    };\r\n\r\n    /** Load page with given pageNumber*/\r\n    page = (type: { new(): T }, pageNumber: number): Observable<ResourceArray<T>> => {\r\n        this.self_uri = this.self_uri.replace('{?page,size,sort}', '');\r\n        this.self_uri = this.self_uri.replace('{&sort}', '');\r\n        let urlParsed = url.parse(ResourceHelper.getProxy(this.self_uri));\r\n        let query: string = ResourceArray.replaceOrAdd(urlParsed.query, 'size', this.pageSize.toString());\r\n        query = ResourceArray.replaceOrAdd(query, 'page', pageNumber.toString());\r\n\r\n\r\n        let uri = urlParsed.query ?\r\n            ResourceHelper.getProxy(this.self_uri).replace(urlParsed.query, query) : ResourceHelper.getProxy(this.self_uri).concat(query);\r\n        uri = this.addSortInfo(uri);\r\n        return ResourceHelper.getHttp().get(uri, {headers: ResourceHelper.headers}).pipe(\r\n            map(response => this.init(type, response, this.sortInfo)),\r\n            catchError(error => observableThrowError(error)),);\r\n    };\r\n\r\n    /** Sort collection based on given sort attribute */\r\n    sortElements = (type: { new(): T }, ...sort: Sort[]): Observable<ResourceArray<T>> => {\r\n        this.self_uri = this.self_uri.replace('{?page,size,sort}', '');\r\n        this.self_uri = this.self_uri.replace('{&sort}', '');\r\n        let uri = ResourceHelper.getProxy(this.self_uri).concat('?', 'size=', this.pageSize.toString(), '&page=', this.pageNumber.toString());\r\n        uri = this.addSortInfo(uri);\r\n        return ResourceHelper.getHttp().get(uri, {headers: ResourceHelper.headers}).pipe(\r\n            map(response => this.init(type, response, sort)),\r\n            catchError(error => observableThrowError(error)),);\r\n    };\r\n\r\n    /** Load page with given size */\r\n    size = (type: { new(): T }, size: number): Observable<ResourceArray<T>> => {\r\n        let uri = ResourceHelper.getProxy(this.self_uri).concat('?', 'size=', size.toString());\r\n        uri = this.addSortInfo(uri);\r\n        return ResourceHelper.getHttp().get(uri, {headers: ResourceHelper.headers}).pipe(\r\n            map(response => this.init(type, response, this.sortInfo)),\r\n            catchError(error => observableThrowError(error)),);\r\n    };\r\n\r\n    /** Add sort info to given URI */\r\n    private addSortInfo(uri: string) {\r\n        if (this.sortInfo) {\r\n            for (const item of this.sortInfo) {\r\n                uri = uri.concat('&sort=', item.path, ',', item.order);\r\n            }\r\n        }\r\n        return uri;\r\n    }\r\n\r\n    /** Add replace or add param value to query string */\r\n    private static replaceOrAdd(query: string, field: string, value: string): string {\r\n        if (query) {\r\n            let idx: number = query.indexOf(field);\r\n            let idxNextAmp: number = query.indexOf('&', idx) == -1 ? query.indexOf('/', idx) : query.indexOf('&', idx);\r\n\r\n            if (idx != -1) {\r\n                let seachValue = query.substring(idx, idxNextAmp);\r\n                query = query.replace(seachValue, field + '=' + value);\r\n            } else {\r\n                query = query.concat(\"&\" + field + '=' + value);\r\n            }\r\n        } else {\r\n            query = \"?\" + field + '=' + value;\r\n        }\r\n        return query;\r\n    }\r\n}\r\n","import {HttpClient, HttpHeaders, HttpParams} from '@angular/common/http';\r\nimport {Resource} from './resource';\r\nimport {ResourceArray} from './resource-array';\r\nimport {HalOptions} from './rest.service';\r\nimport {SubTypeBuilder} from './subtype-builder';\r\nimport {isNullOrUndefined, isPrimitive} from 'util';\r\nimport * as url from 'url';\r\n\r\n/** REST API access helper */\r\nexport class ResourceHelper {\r\n\r\n    /** HttpHeaders */\r\n    public static headers: HttpHeaders = new HttpHeaders();\r\n    /** Proxy URL */\r\n    private static proxy_uri: string = null;\r\n    /** Root URL */\r\n    private static root_uri: string = null;\r\n    /** HttpClient */\r\n    private static http: HttpClient = null;\r\n\r\n    /** get request headers */\r\n    /*public static get headers(): HttpHeaders {\r\n        if (isNullOrUndefined(this._headers))\r\n          ResourceHelper._headers = new HttpHeaders();\r\n        return ResourceHelper._headers;\r\n    }*/\r\n\r\n    /** set request headers */\r\n    /*public static set headers(headers: HttpHeaders) {\r\n      ResourceHelper._headers = headers;\r\n    }*/\r\n\r\n    /** get request option params */\r\n    static optionParams(params: HttpParams, options?: HalOptions): HttpParams {\r\n        if (options) {\r\n\r\n            if (options.params) {\r\n                for (const param of options.params) {\r\n                    params = params.append(param.key, param.value.toString());\r\n                }\r\n            }\r\n\r\n            if (options.size) {\r\n                params = params.append('size', options.size.toString());\r\n            }\r\n\r\n            if (options.sort) {\r\n                for (const s of options.sort) {\r\n                    let sortString = '';\r\n                    sortString = s.path ? sortString.concat(s.path) : sortString;\r\n                    sortString = s.order ? sortString.concat(',').concat(s.order) : sortString;\r\n                    params = params.append('sort', sortString);\r\n                }\r\n            }\r\n\r\n        }\r\n        return params;\r\n    }\r\n\r\n    /** resolve resource relations */\r\n    static resolveRelations(resource: Resource): Object {\r\n        const result: any = {};\r\n        for (const key in resource) {\r\n            if (!isNullOrUndefined(resource[key])) {\r\n                if (ResourceHelper.className(resource[key])\r\n                    .find((className: string) => className == 'Resource')) {\r\n                    if (resource[key]['_links'])\r\n                        result[key] = resource[key]['_links']['self']['href'];\r\n                } else if (Array.isArray(resource[key])) {\r\n                    let array: any[] = resource[key];\r\n                    if (array) {\r\n                        result[key] = new Array();\r\n                        array.forEach((element) => {\r\n                            if (isPrimitive(element)) {\r\n                                result[key].push(element);\r\n                            }\r\n                            else {\r\n                                result[key].push(this.resolveRelations(element));\r\n                            }\r\n                        });\r\n                    }\r\n                } else {\r\n                    result[key] = resource[key];\r\n                }\r\n            }\r\n        }\r\n        return result as Object;\r\n    }\r\n\r\n    /** create an empty resource from embedded data*/\r\n    static createEmptyResult<T extends Resource>(_embedded: string): ResourceArray<T> {\r\n        let resourceArray: ResourceArray<T> = new ResourceArray<T>();\r\n        resourceArray._embedded = _embedded;\r\n        return resourceArray;\r\n    }\r\n\r\n    /** get resource class name*/\r\n    static getClassName(obj: any): string {\r\n        var funcNameRegex = /function (.+?)\\(/;\r\n        var results = (funcNameRegex).exec(obj.constructor.toString());\r\n        return (results && results.length > 1) ? results[1] : '';\r\n    }\r\n\r\n    \r\n    /** get resource class name from a prototype object*/\r\n    static className(objProto: any): string[] {\r\n        let classNames = [];\r\n        let obj = Object.getPrototypeOf(objProto);\r\n        let className: string;\r\n\r\n        while ((className = ResourceHelper.getClassName(obj)) !== 'Object') {\r\n            classNames.push(className);\r\n            obj = Object.getPrototypeOf(obj);\r\n        }\r\n\r\n        return classNames;\r\n    }\r\n\r\n    /** instantiate a ResourceCollection from response embedded data*/\r\n    static instantiateResourceCollection<T extends Resource>(type: { new(): T }, payload: any,\r\n                                                             result: ResourceArray<T>, builder?: SubTypeBuilder,embeddedName?:String): ResourceArray<T> {\r\n        for (const embeddedClassName of Object.keys(payload[result._embedded])) {\r\n            if(!embeddedName || (embeddedName && embeddedClassName==embeddedName)){\r\n                let embedded: any = payload[result._embedded];\r\n                const items = embedded[embeddedClassName];\r\n                for (let item of items) {\r\n                    let instance: T = new type();\r\n                    instance = this.searchSubtypes(builder, embeddedClassName, instance);\r\n\r\n                    this.instantiateResource(instance, item);\r\n                    result.push(instance);\r\n                }\r\n            }\r\n        }\r\n\r\n        result.totalElements = payload.page ? payload.page.totalElements : result.length;\r\n        result.totalPages = payload.page ? payload.page.totalPages : 1;\r\n        result.pageNumber = payload.page ? payload.page.number : 1;\r\n        result.pageSize = payload.page ? payload.page.size : 20;\r\n\r\n        result.self_uri = payload._links && payload._links.self ? payload._links.self.href : undefined;\r\n        result.next_uri = payload._links && payload._links.next ? payload._links.next.href : undefined;\r\n        result.prev_uri = payload._links && payload._links.prev ? payload._links.prev.href : undefined;\r\n        result.first_uri = payload._links && payload._links.first ? payload._links.first.href : undefined;\r\n        result.last_uri = payload._links && payload._links.last ? payload._links.last.href : undefined;\r\n        return result;\r\n    }\r\n\r\n    /** search subtypes*/\r\n    static searchSubtypes<T extends Resource>(builder: SubTypeBuilder, embeddedClassName: string, instance: T) {\r\n        if (builder && builder.subtypes) {\r\n            let keys = builder.subtypes.keys();\r\n            Array.from(keys).forEach((subtypeKey: string) => {\r\n                if (embeddedClassName.toLowerCase().startsWith(subtypeKey.toLowerCase())) {\r\n                    let subtype: { new(): any } = builder.subtypes.get(subtypeKey);\r\n                    instance = new subtype();\r\n                }\r\n            });\r\n        }\r\n        return instance;\r\n    }\r\n\r\n    /** instantiate a Resource from response */\r\n    static instantiateResource<T extends Resource>(entity: T, payload: Object): T {\r\n        for (const p in payload) {\r\n            //TODO array init\r\n            /* if(entity[p].constructor === Array && isNullOrUndefined(payload[p]))\r\n                 entity[p] = [];\r\n             else*/\r\n            entity[p] = payload[p];\r\n        }\r\n        return entity;\r\n    }\r\n\r\n    /** set proxy URL */\r\n    static setProxyUri(proxy_uri: string) {\r\n        ResourceHelper.proxy_uri = proxy_uri;\r\n    }\r\n\r\n    /** set Root URI */\r\n    static setRootUri(root_uri: string) {\r\n        ResourceHelper.root_uri = root_uri;\r\n    }\r\n\r\n    /** get proxy URL */\r\n    public static getURL(): string {\r\n        return ResourceHelper.proxy_uri && ResourceHelper.proxy_uri != '' ?\r\n            ResourceHelper.addSlash(ResourceHelper.proxy_uri) :\r\n            ResourceHelper.addSlash(ResourceHelper.root_uri);\r\n    }\r\n\r\n    /** add slash to URI */\r\n    private static addSlash(uri: string): string {\r\n        let uriParsed = url.parse(uri);\r\n        if (isNullOrUndefined(uriParsed.search) && uri && uri[uri.length - 1] != '/')\r\n            return uri + '/';\r\n        return uri;\r\n    }\r\n\r\n    /** get proxy from URL */\r\n    public static getProxy(url: string): string {\r\n        if (!ResourceHelper.proxy_uri || ResourceHelper.proxy_uri == '')\r\n            return url;\r\n        return ResourceHelper.addSlash(url.replace(ResourceHelper.root_uri, ResourceHelper.proxy_uri));\r\n    }\r\n\r\n    /** set HttpClient*/\r\n    public static setHttp(http: HttpClient) {\r\n        ResourceHelper.http = http;\r\n    }\r\n\r\n    /** get HttpClient*/\r\n    public static getHttp(): HttpClient {\r\n        return ResourceHelper.http;\r\n    }\r\n\r\n    /** get root URI*/\r\n    static getRootUri() {\r\n        return ResourceHelper.root_uri;\r\n    }\r\n}\r\n","import {HttpClient} from '@angular/common/http';\r\nimport {Inject, Injectable} from '@angular/core';\r\nimport {ResourceHelper} from './resource-helper';\r\nimport {ExternalConfigurationHandlerInterface} from './external-configuration.handler';\r\nimport {ExternalConfiguration} from './ExternalConfiguration';\r\n\r\n\r\n/** ExternalService */\r\n@Injectable()\r\nexport class ExternalService {\r\n\r\n    /** constructor */\r\n    constructor(@Inject('ExternalConfigurationService') private externalConfigurationService: ExternalConfigurationHandlerInterface) {\r\n        ResourceHelper.setProxyUri(externalConfigurationService.getProxyUri());\r\n        ResourceHelper.setRootUri(externalConfigurationService.getRootUri());\r\n        ResourceHelper.setHttp(externalConfigurationService.getHttp());\r\n    }\r\n\r\n    /** update ExternalConfigurationHandler */\r\n    public updateExternalConfigurationHandlerInterface(externalConfigurationService: ExternalConfigurationHandlerInterface) {\r\n\tthis.externalConfigurationService = externalConfigurationService;\r\n\r\n        ResourceHelper.setProxyUri(externalConfigurationService.getProxyUri());\r\n        ResourceHelper.setRootUri(externalConfigurationService.getRootUri());\r\n        ResourceHelper.setHttp(externalConfigurationService.getHttp());\r\n    }\r\n\r\n    /** get ExternalConfiguration */\r\n    public getExternalConfiguration(): ExternalConfiguration {\r\n        return this.externalConfigurationService.getExternalConfiguration();\r\n    }\r\n\r\n    /** get proxy URL */\r\n    public getProxyUri(): string {\r\n        return this.externalConfigurationService.getProxyUri();\r\n    }\r\n\r\n    /** get Root URI */\r\n    public getRootUri(): string {\r\n        return this.externalConfigurationService.getRootUri();\r\n    }\r\n\r\n    /** get URL */\r\n    public getURL(): string {\r\n        return ResourceHelper.getURL();\r\n    }\r\n\r\n    /** get HttpClient */\r\n    public getHttp(): HttpClient {\r\n        return ResourceHelper.getHttp();\r\n    }\r\n}\r\n","\r\nimport { throwError as observableThrowError } from 'rxjs';\r\n\r\nimport { catchError, map } from 'rxjs/operators';\r\nimport { Resource } from './resource';\r\nimport { ResourceHelper } from './resource-helper';\r\nimport { Injectable } from '@angular/core';\r\nimport { HttpParams, HttpResponse } from '@angular/common/http';\r\nimport { Sort } from './sort';\r\nimport { ResourceArray } from './resource-array';\r\nimport { ExternalService } from './external.service';\r\nimport { HalOptions } from './rest.service';\r\nimport { SubTypeBuilder } from './subtype-builder';\r\nimport { Observable } from 'rxjs';\r\n\r\n/** ResourceService */\r\n@Injectable()\r\nexport class ResourceService {\r\n\r\n\r\n    /** constructor */\r\n    constructor(private externalService: ExternalService) { }\r\n\r\n\r\n    /** get URL */\r\n    private static getURL(): string {\r\n        return ResourceHelper.getURL();\r\n    }\r\n\r\n    /** get all resources from a base URI of a given type */\r\n    public getAll<T extends Resource>(type: { new(): T }, resource: string, _embedded: string, options?: HalOptions, subType?: SubTypeBuilder, embeddedName?:String): Observable<ResourceArray<T>> {\r\n        const uri = this.getResourceUrl(resource).concat('?projection=view');\r\n        const params = ResourceHelper.optionParams(new HttpParams(), options);\r\n        const result: ResourceArray<T> = ResourceHelper.createEmptyResult<T>(_embedded);\r\n\r\n        this.setUrls(result);\r\n        result.sortInfo = options ? options.sort : undefined;\r\n        let observable = ResourceHelper.getHttp().get(uri, { headers: ResourceHelper.headers, params: params });\r\n        return observable.pipe(map(response => ResourceHelper.instantiateResourceCollection(type, response, result, subType,embeddedName)),\r\n            catchError(error => observableThrowError(error)));\r\n    }\r\n\r\n    /** get resource from a base URI and a given id */\r\n    public get<T extends Resource>(type: { new(): T }, resource: string, id: any): Observable<T> {\r\n        const uri = this.getResourceUrl(resource).concat('/', id, '?projection=view');\r\n        const result: T = new type();\r\n\r\n        this.setUrlsResource(result);\r\n        let observable = ResourceHelper.getHttp().get(uri, { headers: ResourceHelper.headers });\r\n        return observable.pipe(map(data => ResourceHelper.instantiateResource(result, data)),\r\n            catchError(error => observableThrowError(error)));\r\n    }\r\n\r\n    /** get resource from its selflink */\r\n    public getBySelfLink<T extends Resource>(type: { new(): T }, resourceLink: string): Observable<T> {\r\n        const result: T = new type();\r\n\r\n        this.setUrlsResource(result);\r\n        let observable = ResourceHelper.getHttp().get(ResourceHelper.getProxy(resourceLink), { headers: ResourceHelper.headers });\r\n        return observable.pipe(map(data => ResourceHelper.instantiateResource(result, data)),\r\n            catchError(error => observableThrowError(error)));\r\n    }\r\n\r\n    /** search resources from a given base path, query and options */\r\n    public search<T extends Resource>(type: { new(): T }, query: string, resource: string, _embedded: string, options?: HalOptions): Observable<ResourceArray<T>> {\r\n        const uri = this.getResourceUrl(resource).concat('/search/', query);\r\n        const params = ResourceHelper.optionParams(new HttpParams(), options);\r\n        const result: ResourceArray<T> = ResourceHelper.createEmptyResult<T>(_embedded);\r\n\r\n        this.setUrls(result);\r\n        let observable = ResourceHelper.getHttp().get(uri, { headers: ResourceHelper.headers, params: params });\r\n        return observable.pipe(map(response => ResourceHelper.instantiateResourceCollection(type, response, result)),\r\n            catchError(error => observableThrowError(error)));\r\n    }\r\n\r\n    /** search a single resource from a given base path, query and options */\r\n    public searchSingle<T extends Resource>(type: { new(): T }, query: string, resource: string, options?: HalOptions): Observable<T> {\r\n        const uri = this.getResourceUrl(resource).concat('/search/', query);\r\n        const params = ResourceHelper.optionParams(new HttpParams(), options);\r\n        const result: T = new type();\r\n\r\n        this.setUrlsResource(result);\r\n        let observable = ResourceHelper.getHttp().get(uri, { headers: ResourceHelper.headers, params: params });\r\n        return observable.pipe(map(response => ResourceHelper.instantiateResource(result, response)),\r\n            catchError(error => observableThrowError(error)));\r\n    }\r\n\r\n    /** search resources from a given base path, custom query and options */\r\n    public customQuery<T extends Resource>(type: { new(): T }, query: string, resource: string, _embedded: string, options?: HalOptions): Observable<ResourceArray<T>> {\r\n        const uri = this.getResourceUrl(resource + query);\r\n        const params = ResourceHelper.optionParams(new HttpParams(), options);\r\n        const result: ResourceArray<T> = ResourceHelper.createEmptyResult<T>(_embedded);\r\n\r\n        this.setUrls(result);\r\n        let observable = ResourceHelper.getHttp().get(uri, { headers: ResourceHelper.headers, params: params });\r\n        return observable.pipe(map(response => ResourceHelper.instantiateResourceCollection(type, response, result)),\r\n            catchError(error => observableThrowError(error)));\r\n    }\r\n\r\n    /** get resource given a relation link */\r\n    public getByRelation<T extends Resource>(type: { new(): T }, resourceLink: string): Observable<T> {\r\n        let result: T = new type();\r\n\r\n        this.setUrlsResource(result);\r\n        let observable = ResourceHelper.getHttp().get(resourceLink, { headers: ResourceHelper.headers });\r\n        return observable.pipe(map(data => ResourceHelper.instantiateResource(result, data)),\r\n            catchError(error => observableThrowError(error)));\r\n    }\r\n\r\n    /** get resource array given a relation link */\r\n    public getByRelationArray<T extends Resource>(type: { new(): T }, resourceLink: string, _embedded: string, builder?: SubTypeBuilder): Observable<ResourceArray<T>> {\r\n        const result: ResourceArray<T> = ResourceHelper.createEmptyResult<T>(_embedded);\r\n\r\n        this.setUrls(result);\r\n        let observable = ResourceHelper.getHttp().get(resourceLink, { headers: ResourceHelper.headers });\r\n        return observable.pipe(map(response => ResourceHelper.instantiateResourceCollection(type, response, result, builder)),\r\n            catchError(error => observableThrowError(error)));\r\n    }\r\n\r\n    /** count resources given a path */\r\n    public count(resource: string): Observable<number> {\r\n        const uri = this.getResourceUrl(resource).concat('/search/countAll');\r\n\r\n        return ResourceHelper.getHttp().get(uri, { headers: ResourceHelper.headers, observe: 'body' }).pipe(\r\n            map((response: Response) => Number(response.body)),\r\n            catchError(error => observableThrowError(error)));\r\n    }\r\n\r\n    /** create resource from self link and entity data*/\r\n    public create<T extends Resource>(selfResource: string, entity: T) {\r\n        const uri = ResourceHelper.getURL() + selfResource;\r\n        const payload = ResourceHelper.resolveRelations(entity);\r\n\r\n        this.setUrlsResource(entity);\r\n        let observable = ResourceHelper.getHttp().post(uri, payload, { headers: ResourceHelper.headers, observe: 'response' });\r\n        return observable.pipe(map((response: HttpResponse<string>) => {\r\n            if (response.status >= 200 && response.status <= 207)\r\n                return ResourceHelper.instantiateResource(entity, response.body);\r\n            else if (response.status == 500) {\r\n                let body: any = response.body;\r\n                return observableThrowError(body.error);\r\n            }\r\n        }), catchError(error => observableThrowError(error)));\r\n    }\r\n\r\n    /** update resource from a given entity data*/\r\n    public update<T extends Resource>(entity: T) {\r\n        const uri = ResourceHelper.getProxy(entity._links.self.href);\r\n        const payload = ResourceHelper.resolveRelations(entity);\r\n        this.setUrlsResource(entity);\r\n        let observable = ResourceHelper.getHttp().put(uri, payload, { headers: ResourceHelper.headers, observe: 'response' });\r\n        return observable.pipe(map((response: HttpResponse<string>) => {\r\n            if (response.status >= 200 && response.status <= 207)\r\n                return ResourceHelper.instantiateResource(entity, response.body);\r\n            else if (response.status == 500) {\r\n                let body: any = response.body;\r\n                return observableThrowError(body.error);\r\n            }\r\n        }), catchError(error => observableThrowError(error)));\r\n    }\r\n\r\n    /** update resource from a given entity data*/\r\n    public updateCollection<T extends Resource>(resourceArray: ResourceArray<T>, resourceLink: string) {\r\n        const uri = ResourceHelper.getProxy(resourceLink);\r\n        //const payload = ResourceHelper.resolveRelations(entity);\r\n        //this.setUrlsResource(entity);\r\n        var headersReq = ResourceHelper.headers;\r\n        headersReq.set(\"Content-Type\", \"text/uri-list\");\r\n        let observable = ResourceHelper.getHttp().put(uri, resourceArray, { headers: headersReq, observe: 'response' });\r\n        return observable.pipe(map((response: HttpResponse<string>) => {\r\n            if (response.status >= 200 && response.status <= 207)\r\n                return \"\";\r\n            else if (response.status == 500) {\r\n                let body: any = response.body;\r\n                return observableThrowError(body.error);\r\n            }\r\n        }), catchError(error => observableThrowError(error)));\r\n    }\r\n\r\n    /** patch resource from a given entity data*/\r\n    public patch<T extends Resource>(entity: T) {\r\n        const uri = ResourceHelper.getProxy(entity._links.self.href);\r\n        const payload = ResourceHelper.resolveRelations(entity);\r\n        this.setUrlsResource(entity);\r\n        let observable = ResourceHelper.getHttp().patch(uri, payload, { headers: ResourceHelper.headers, observe: 'response' });\r\n        return observable.pipe(map((response: HttpResponse<string>) => {\r\n            if (response.status >= 200 && response.status <= 207)\r\n                return ResourceHelper.instantiateResource(entity, response.body);\r\n            else if (response.status == 500) {\r\n                let body: any = response.body;\r\n                return observableThrowError(body.error);\r\n            }\r\n        }), catchError(error => observableThrowError(error)));\r\n    }\r\n\r\n    /** delete resource from a given entity data*/\r\n    public delete<T extends Resource>(entity: T): Observable<Object> {\r\n        const uri = ResourceHelper.getProxy(entity._links.self.href);\r\n        return ResourceHelper.getHttp().delete(uri, { headers: ResourceHelper.headers }).pipe(catchError(error => observableThrowError(error)));\r\n    }\r\n\r\n    /** whether a resource array has next page of results*/\r\n    public hasNext<T extends Resource>(resourceArray: ResourceArray<T>): boolean {\r\n        return resourceArray.next_uri != undefined;\r\n    }\r\n\r\n    /** whether a resource array has previous page of results*/\r\n    public hasPrev<T extends Resource>(resourceArray: ResourceArray<T>): boolean {\r\n        return resourceArray.prev_uri != undefined;\r\n    }\r\n\r\n    /** whether a resource array has first page of results*/\r\n    public hasFirst<T extends Resource>(resourceArray: ResourceArray<T>): boolean {\r\n        return resourceArray.first_uri != undefined;\r\n    }\r\n\r\n    /** whether a resource array has last page of results*/\r\n    public hasLast<T extends Resource>(resourceArray: ResourceArray<T>): boolean {\r\n        return resourceArray.last_uri != undefined;\r\n    }\r\n\r\n    /** get resource array next page of results*/\r\n    public next<T extends Resource>(resourceArray: ResourceArray<T>, type: { new(): T }): Observable<ResourceArray<T>> {\r\n        return resourceArray.next(type);\r\n    }\r\n\r\n    /** get resource array previous page of results*/\r\n    public prev<T extends Resource>(resourceArray: ResourceArray<T>, type: { new(): T }): Observable<ResourceArray<T>> {\r\n        return resourceArray.prev(type);\r\n    }\r\n\r\n    /** get resource array first page of results*/\r\n    public first<T extends Resource>(resourceArray: ResourceArray<T>, type: { new(): T }): Observable<ResourceArray<T>> {\r\n        return resourceArray.first(type);\r\n    }\r\n\r\n    /** get resource array last page of results*/\r\n    public last<T extends Resource>(resourceArray: ResourceArray<T>, type: { new(): T }): Observable<ResourceArray<T>> {\r\n        return resourceArray.last(type);\r\n    }\r\n\r\n    /** get resource array page of results given a page number*/\r\n    public page<T extends Resource>(resourceArray: ResourceArray<T>, type: { new(): T }, id: number): Observable<ResourceArray<T>> {\r\n        return resourceArray.page(type, id);\r\n    }\r\n\r\n    /** sort resource array with a given sorting params */\r\n    public sortElements<T extends Resource>(resourceArray: ResourceArray<T>, type: { new(): T }, ...sort: Sort[]): Observable<ResourceArray<T>> {\r\n        return resourceArray.sortElements(type, ...sort);\r\n    }\r\n\r\n    /** get resource array size*/\r\n    public size<T extends Resource>(resourceArray: ResourceArray<T>, type: { new(): T }, size: number): Observable<ResourceArray<T>> {\r\n        return resourceArray.size(type, size);\r\n    }\r\n\r\n    /** get resource URL from a given path*/\r\n    public getResourceUrl(resource?: string): string {\r\n        let url = ResourceService.getURL();\r\n        if (!url.endsWith('/')) {\r\n            url = url.concat('/');\r\n        }\r\n        if (resource) {\r\n            return url.concat(resource);\r\n        }\r\n        return url;\r\n    }\r\n\r\n    /** set proxy and root urls of given resource array */\r\n    private setUrls<T extends Resource>(result: ResourceArray<T>) {\r\n        result.proxyUrl = this.externalService.getProxyUri();\r\n        result.rootUrl = this.externalService.getRootUri();\r\n    }\r\n\r\n    /** set proxy and root urls of given resource */\r\n    private setUrlsResource<T extends Resource>(result: T) {\r\n        result.proxyUrl = this.externalService.getProxyUri();\r\n        result.rootUrl = this.externalService.getRootUri();\r\n    }\r\n}\r\n","import {of as observableOf, throwError as observableThrowError} from 'rxjs';\r\nimport {map, mergeMap} from 'rxjs/operators';\r\nimport {Resource} from './resource';\r\nimport {ResourceArray} from './resource-array';\r\nimport {Sort} from './sort';\r\nimport {ResourceService} from './resource.service';\r\nimport {SubTypeBuilder} from './subtype-builder';\r\nimport {isNullOrUndefined} from 'util';\r\nimport {Observable} from 'rxjs';\r\nimport {Injector} from \"@angular/core\";\r\n\r\n/** HAL param data model */\r\nexport type HalParam = { key: string, value: string | number | boolean };\r\n/** HAL option data model */\r\nexport type HalOptions = { notPaged?: boolean, size?: number, sort?: Sort[], params?: HalParam[] };\r\n\r\n/** REST API access interface */\r\nexport class RestService<T extends Resource> {\r\n    /** resource type */\r\n    private type: any;\r\n    /** resource path */\r\n    private resource: string;\r\n    /** resource array */\r\n    public resourceArray: ResourceArray<T>;\r\n    /** resource service */\r\n    public resourceService: ResourceService;\r\n    /** _embedded field name */\r\n    private _embedded: string = '_embedded';\r\n\r\n    /** constructor */\r\n    constructor(type: { new(): T },\r\n                resource: string,\r\n                private injector: Injector,\r\n                _embedded?: string) {\r\n        this.type = type;\r\n        this.resource = resource;\r\n        this.resourceService = injector.get(ResourceService);\r\n        if (!isNullOrUndefined(_embedded))\r\n            this._embedded = _embedded;\r\n    }\r\n\r\n    /** error handler */\r\n    protected handleError(error: any):Observable<never> {\r\n        return RestService.handleError(error);\r\n    }\r\n\r\n    /** error handler */\r\n    protected static handleError(error: any):Observable<never> {\r\n        return observableThrowError(error);\r\n    }\r\n\r\n    /** get all resources with optional options an subType params */\r\n    public getAll(options?: HalOptions, subType?: SubTypeBuilder, embeddedName?:String): Observable<T[]> {\r\n        return this.resourceService.getAll(this.type, this.resource, this._embedded, options, subType,embeddedName).pipe(\r\n            mergeMap((resourceArray: ResourceArray<T>) => {\r\n                if (options && options.notPaged && !isNullOrUndefined(resourceArray.first_uri)) {\r\n                    options.notPaged = false;\r\n                    options.size = resourceArray.totalElements;\r\n                    return this.getAll(options);\r\n                } else {\r\n                    this.resourceArray = resourceArray;\r\n                    return observableOf(resourceArray.result);\r\n                }\r\n            }));\r\n    }\r\n\r\n    /** get resource from a given id */\r\n    public get(id: any): Observable<T> {\r\n        return this.resourceService.get(this.type, this.resource, id);\r\n    }\r\n\r\n    /** get resource from self link */\r\n    public getBySelfLink(selfLink: string): Observable<T> {\r\n        return this.resourceService.getBySelfLink(this.type, selfLink);\r\n    }\r\n\r\n    /** search resources from a given query string and optional options params */\r\n    public search(query: string, options?: HalOptions): Observable<T[]> {\r\n        return this.resourceService.search(this.type, query, this.resource, this._embedded, options).pipe(\r\n            mergeMap((resourceArray: ResourceArray<T>) => {\r\n                if (options && options.notPaged && !isNullOrUndefined(resourceArray.first_uri)) {\r\n                    options.notPaged = false;\r\n                    options.size = resourceArray.totalElements;\r\n                    return this.search(query, options);\r\n                } else {\r\n                    this.resourceArray = resourceArray;\r\n                    return observableOf(resourceArray.result);\r\n                }\r\n            }));\r\n    }\r\n\r\n    /** search resource from a given query string and optional options params */\r\n    public searchSingle(query: string, options?: HalOptions): Observable<T> {\r\n        return this.resourceService.searchSingle(this.type, query, this.resource, options);\r\n    }\r\n\r\n    /** search resources from a given custom query string and optional options params */\r\n    public customQuery(query: string, options?: HalOptions): Observable<T[]> {\r\n        return this.resourceService.customQuery(this.type, query, this.resource, this._embedded, options).pipe(\r\n            mergeMap((resourceArray: ResourceArray<T>) => {\r\n                if (options && options.notPaged && !isNullOrUndefined(resourceArray.first_uri)) {\r\n                    options.notPaged = false;\r\n                    options.size = resourceArray.totalElements;\r\n                    return this.customQuery(query, options);\r\n                } else {\r\n                    this.resourceArray = resourceArray;\r\n                    return observableOf(resourceArray.result);\r\n                }\r\n            }));\r\n    }\r\n\r\n\r\n    /** get resource array given a relation link */\r\n    public getByRelationArray(relation: string, builder?: SubTypeBuilder): Observable<T[]> {\r\n        return this.resourceService.getByRelationArray(this.type, relation, this._embedded, builder).pipe(\r\n            map((resourceArray: ResourceArray<T>) => {\r\n                this.resourceArray = resourceArray;\r\n                return resourceArray.result;\r\n            }));\r\n    }\r\n\r\n    /** get resource given a relation link */\r\n    public getByRelation(relation: string): Observable<T> {\r\n        return this.resourceService.getByRelation(this.type, relation);\r\n    }\r\n\r\n    /** count resources given a path */\r\n    public count(): Observable<number> {\r\n        return this.resourceService.count(this.resource);\r\n    }\r\n\r\n    /** create resource from self link and entity data*/\r\n    public create(entity: T) {\r\n        return this.resourceService.create(this.resource, entity);\r\n    }\r\n\r\n    /** update resource from a given entity data*/\r\n    public update(entity: T) {\r\n        return this.resourceService.update(entity);\r\n    }\r\n\r\n    /** patch resource from a given entity data*/\r\n    public patch(entity: T) {\r\n        return this.resourceService.patch(entity);\r\n    }\r\n\r\n    /** delete resource from a given entity data*/\r\n    public delete(entity: T): Observable<Object> {\r\n        return this.resourceService.delete(entity);\r\n    }\r\n\r\n    /** get total number of elements of resource array */\r\n    public totalElement(): number {\r\n        if (this.resourceArray && this.resourceArray.totalElements)\r\n            return this.resourceArray.totalElements;\r\n        return 0;\r\n    }\r\n\r\n    /** whether a resource array has first page of results*/\r\n    public hasFirst(): boolean {\r\n        if (this.resourceArray)\r\n            return this.resourceService.hasFirst(this.resourceArray);\r\n        return false;\r\n    }\r\n\r\n    /** whether a resource array has next page of results*/\r\n    public hasNext(): boolean {\r\n        if (this.resourceArray)\r\n            return this.resourceService.hasNext(this.resourceArray);\r\n        return false;\r\n    }\r\n\r\n    /** whether a resource array has previous page of results*/\r\n    public hasPrev(): boolean {\r\n        if (this.resourceArray)\r\n            return this.resourceService.hasPrev(this.resourceArray);\r\n        return false;\r\n    }\r\n\r\n    /** whether a resource array has last page of results*/\r\n    public hasLast(): boolean {\r\n        if (this.resourceArray)\r\n            return this.resourceService.hasLast(this.resourceArray);\r\n        return false;\r\n    }\r\n\r\n    /** get resource array next page of results*/\r\n    public next(): Observable<T[]> {\r\n        if (this.resourceArray)\r\n            return this.resourceService.next(this.resourceArray, this.type).pipe(\r\n                map((resourceArray: ResourceArray<T>) => {\r\n                    this.resourceArray = resourceArray;\r\n                    return resourceArray.result;\r\n                }));\r\n        else\r\n            observableThrowError('no resourceArray found');\r\n    }\r\n\r\n    /** get resource array previous page of results*/\r\n    public prev(): Observable<T[]> {\r\n        if (this.resourceArray)\r\n            return this.resourceService.prev(this.resourceArray, this.type).pipe(\r\n                map((resourceArray: ResourceArray<T>) => {\r\n                    this.resourceArray = resourceArray;\r\n                    return resourceArray.result;\r\n                }));\r\n        else\r\n            observableThrowError('no resourceArray found');\r\n    }\r\n\r\n    /** get resource array first page of results*/\r\n    public first(): Observable<T[]> {\r\n        if (this.resourceArray)\r\n            return this.resourceService.first(this.resourceArray, this.type)\r\n                .pipe(\r\n                    map((resourceArray: ResourceArray<T>) => {\r\n                        this.resourceArray = resourceArray;\r\n                        return resourceArray.result;\r\n                    })\r\n                );\r\n        else\r\n            observableThrowError('no resourceArray found');\r\n    }\r\n\r\n    /** get resource array last page of results*/\r\n    public last(): Observable<T[]> {\r\n        if (this.resourceArray)\r\n            return this.resourceService.last(this.resourceArray, this.type)\r\n                .pipe(\r\n                    map((resourceArray: ResourceArray<T>) => {\r\n                        this.resourceArray = resourceArray;\r\n                        return resourceArray.result;\r\n                    })\r\n                );\r\n        else\r\n            observableThrowError('no resourceArray found');\r\n    }\r\n\r\n    /** get resource array page of results given a page number*/\r\n    public page(pageNumber: number): Observable<T[]> {\r\n        if (this.resourceArray)\r\n            return this.resourceService.page(this.resourceArray, this.type, pageNumber).pipe(\r\n                map((resourceArray: ResourceArray<T>) => {\r\n                    this.resourceArray = resourceArray;\r\n                    return resourceArray.result;\r\n                }));\r\n        else\r\n            observableThrowError('no resourceArray found');\r\n    }\r\n}\r\n","\r\nimport {throwError as observableThrowError, of as observableOf} from 'rxjs';\r\n\r\nimport {map} from 'rxjs/operators';\r\n\r\n\r\nimport {HttpParams} from '@angular/common/http';\r\nimport {ResourceHelper} from './resource-helper';\r\nimport {ResourceArray} from './resource-array';\r\nimport {isNullOrUndefined} from 'util';\r\n\r\nimport {HalOptions} from './rest.service';\r\nimport {SubTypeBuilder} from './subtype-builder';\r\nimport {Injectable} from '@angular/core';\r\nimport {Observable} from 'rxjs';\r\n\r\n/** Abstract resource class*/\r\n@Injectable()\r\nexport abstract class Resource {\r\n\r\n    /** proxy URL */\r\n    public proxyUrl: string;\r\n    /** root URL */\r\n    public rootUrl: string;\r\n\r\n    /** links */\r\n    public _links: any;\r\n    /** subtypes */\r\n    public _subtypes: Map<string, any>;\r\n\r\n    \r\n    /** get subtypes */    \r\n    public get subtypes(): Map<string, any> {\r\n        return this._subtypes;\r\n    }\r\n\r\n    /** set subtypes */\r\n    public set subtypes(_subtypes: Map<string, any>) {\r\n        this._subtypes = _subtypes;\r\n    }\r\n\r\n    /** constructor*/\r\n    constructor() {\r\n    }\r\n\r\n    /** Get collection of related resources */\r\n    public getRelationArray<T extends Resource>(type: { new(): T }, relation: string, _embedded?: string, options?: HalOptions, builder?: SubTypeBuilder): Observable<T[]> {\r\n\r\n        const params = ResourceHelper.optionParams(new HttpParams(), options);\r\n        const result: ResourceArray<T> = ResourceHelper.createEmptyResult<T>(isNullOrUndefined(_embedded) ? \"_embedded\" : _embedded);\r\n        if (!isNullOrUndefined(this._links) && !isNullOrUndefined(this._links[relation])) {\r\n            let observable = ResourceHelper.getHttp().get(ResourceHelper.getProxy(this._links[relation].href), {\r\n                headers: ResourceHelper.headers,\r\n                params: params\r\n            });\r\n            return observable.pipe(map(response => ResourceHelper.instantiateResourceCollection<T>(type, response, result, builder)),\r\n                map((array: ResourceArray<T>) => array.result),);\r\n        } else {\r\n            return observableOf([]);\r\n        }\r\n    }\r\n\r\n    /** Get related resource */\r\n    public getRelation<T extends Resource>(type: { new(): T }, relation: string, builder?: SubTypeBuilder): Observable<T> {\r\n        let result: T = new type();\r\n        if (!isNullOrUndefined(this._links) && !isNullOrUndefined(this._links[relation])) {\r\n            let observable = ResourceHelper.getHttp().get(ResourceHelper.getProxy(this._links[relation].href), {headers: ResourceHelper.headers});\r\n            return observable.pipe(map((data: any) => {\r\n                if (builder) {\r\n                    for (const embeddedClassName of Object.keys(data['_links'])) {\r\n                        if (embeddedClassName == 'self') {\r\n                            let href: string = data._links[embeddedClassName].href;\r\n                            let idx: number = href.lastIndexOf('/');\r\n                            let realClassName = href.replace(ResourceHelper.getRootUri(), \"\").substring(0, idx);\r\n                            result = ResourceHelper.searchSubtypes(builder, realClassName, result);\r\n                            break;\r\n                        }\r\n                    }\r\n                }\r\n                return ResourceHelper.instantiateResource(result, data);\r\n            }));\r\n        } else {\r\n            return observableOf(null);\r\n        }\r\n    }\r\n\r\n    /** Adds the given resource to the bound collection by the relation */\r\n    public addRelation<T extends Resource>(relation: string, resource: T): Observable<any> {\r\n        if (!isNullOrUndefined(this._links) && !isNullOrUndefined(this._links[relation])) {\r\n            let header = ResourceHelper.headers.append('Content-Type', 'text/uri-list');\r\n            return ResourceHelper.getHttp().post(ResourceHelper.getProxy(this._links[relation].href), resource._links.self.href, {headers: header});\r\n        } else {\r\n            return observableThrowError('no relation found');\r\n        }\r\n    }\r\n\r\n    /** Bind the given resource to this resource by the given relation*/\r\n    public updateRelation<T extends Resource>(relation: string, resource: T): Observable<any> {\r\n        if (!isNullOrUndefined(this._links) && !isNullOrUndefined(this._links[relation])) {\r\n            let header = ResourceHelper.headers.append('Content-Type', 'text/uri-list');\r\n            return ResourceHelper.getHttp().patch(ResourceHelper.getProxy(this._links[relation].href), resource._links.self.href, {headers: header});\r\n        } else {\r\n            return observableThrowError('no relation found');\r\n        }\r\n    }\r\n\r\n    /** Bind the given resource to this resource by the given relation*/\r\n    public substituteRelation<T extends Resource>(relation: string, resource: T): Observable<any> {\r\n        if (!isNullOrUndefined(this._links) && !isNullOrUndefined(this._links[relation])) {\r\n            let header = ResourceHelper.headers.append('Content-Type', 'text/uri-list');\r\n            return ResourceHelper.getHttp().put(ResourceHelper.getProxy(this._links[relation].href), resource._links.self.href, {headers: header});\r\n        } else {\r\n            return observableThrowError('no relation found');\r\n        }\r\n    }\r\n    \r\n    \r\n    /** Bind the given resource to this resource by the given relation*/\r\n    public substituteAllRelation<T extends Resource>(relation: string, resources: Resource[]): Observable<any> {\r\n        if (!isNullOrUndefined(this._links) && !isNullOrUndefined(this._links[relation])) {\r\n            let header = ResourceHelper.headers.append('Content-Type', 'text/uri-list');\r\n            return ResourceHelper.getHttp().put(ResourceHelper.getProxy(this._links[relation].href), resources.map((resource) => resource._links.self.href), {headers: header});\r\n        } else {\r\n            return observableThrowError('no relation found');\r\n        }\r\n    }\r\n\r\n\r\n\r\n    /** Unbind the resource with the given relation from this resource*/\r\n    public deleteRelation<T extends Resource>(relation: string, resource: T): Observable<any> {\r\n        if (!isNullOrUndefined(this._links) && !isNullOrUndefined(resource._links)) {\r\n            let link: string = resource._links['self'].href;\r\n            let idx: number = link.lastIndexOf('/') + 1;\r\n\r\n            if (idx == -1)\r\n                return observableThrowError('no relation found');\r\n\r\n            let relationId: string = link.substring(idx);\r\n            return ResourceHelper.getHttp().delete(ResourceHelper.getProxy(this._links[relation].href + '/' + relationId), {headers: ResourceHelper.headers});\r\n        } else {\r\n            return observableThrowError('no relation found');\r\n        }\r\n    }\r\n    \r\n    /** Unbind the resource with the given relation from this resource*/\r\n    public deleteAllRelation<T extends Resource>(relation: string): Observable<any> {\r\n        return ResourceHelper.getHttp().delete(ResourceHelper.getProxy(this._links[relation].href ), {headers: ResourceHelper.headers});\r\n        \r\n    }\r\n\r\n}","import {ModuleWithProviders, NgModule} from '@angular/core';\r\nimport {HttpClient, HttpClientModule} from '@angular/common/http';\r\nimport {HalParam, RestService} from './rest.service';\r\nimport {ExternalService} from './external.service';\r\nimport {ResourceService} from './resource.service';\r\nimport {ExternalConfigurationHandlerInterface} from './external-configuration.handler';\r\n\r\nimport 'rxjs';\r\n\r\nimport {SubTypeBuilder} from './subtype-builder';\r\n\r\nexport {ExternalService} from './external.service';\r\nexport {RestService} from './rest.service';\r\nexport {Resource} from './resource';\r\nexport {ResourceArray} from './resource-array';\r\nexport {ResourceService} from './resource.service';\r\nexport {Sort} from './sort';\r\nexport {ResourceHelper} from './resource-helper';\r\nexport {ExternalConfiguration} from './ExternalConfiguration';\r\nexport {ExternalConfigurationHandlerInterface} from './external-configuration.handler';\r\nexport {HalOptions, HalParam} from './rest.service';\r\nexport {SubTypeBuilder} from './subtype-builder';\r\n\r\n\r\n/** Angular HAL module */\r\n@NgModule({\r\n    imports: [HttpClientModule],\r\n    declarations: [],\r\n    exports: [HttpClientModule],\r\n    providers: [\r\n        ExternalService,\r\n        HttpClient,\r\n        {\r\n            provide: ResourceService,\r\n            useClass: ResourceService,\r\n            deps: [ExternalService]\r\n        }]\r\n})\r\nexport class AngularHalModule {\r\n    static forRoot(): ModuleWithProviders {\r\n        return {\r\n            ngModule: AngularHalModule,\r\n            providers: [\r\n                ExternalService,\r\n                HttpClient,\r\n                {\r\n                    provide: ResourceService,\r\n                    useClass: ResourceService,\r\n                    deps: [ExternalService]\r\n                }\r\n            ]\r\n        };\r\n    }\r\n}"],"names":["ResourceArray","prototype","addSortInfo","uri","this","sortInfo","_a","tslib_1.__values","_b","next","done","item","value","concat","path","order","replaceOrAdd","query","field","idx","seachValue","indexOf","idxNextAmp","substring","replace","el","_this","result","push","length","type","response","ResourceHelper","createEmptyResult","_embedded","instantiateResourceCollection","next_uri","getHttp","get","getProxy","headers","pipe","map","init","catchError","error","observableThrowError","prev_uri","first_uri","last_uri","pageNumber","self_uri","urlParsed","url.parse","pageSize","toString","sort","_i","arguments","size","optionParams","params","options","param","append","key","_d","_e","s","sortString","resolveRelations","resource","array","isNullOrUndefined","className","find","Array","isArray","forEach","element","isPrimitive","resourceArray","getClassName","obj","results","exec","constructor","objProto","classNames","Object","getPrototypeOf","payload","builder","embeddedName","keys","embeddedClassName","items","items_1","items_1_1","instance","searchSubtypes","instantiateResource","totalElements","page","totalPages","number","_links","self","href","undefined","prev","first","last","subtypes","from","subtypeKey","toLowerCase","startsWith","subtype","entity","p","setProxyUri","proxy_uri","setRootUri","root_uri","getURL","addSlash","uriParsed","search","url","setHttp","http","getRootUri","HttpHeaders","ExternalService","updateExternalConfigurationHandlerInterface","externalConfigurationService","getProxyUri","getExternalConfiguration","Injectable","Inject","args","ResourceService","getAll","subType","getResourceUrl","HttpParams","setUrls","id","setUrlsResource","data","getBySelfLink","resourceLink","searchSingle","customQuery","getByRelation","getByRelationArray","count","observe","Number","body","create","selfResource","post","status","update","put","updateCollection","headersReq","set","patch","delete","hasNext","hasPrev","hasFirst","hasLast","sortElements","apply","__spread","endsWith","proxyUrl","externalService","rootUrl","RestService","handleError","resourceService","mergeMap","notPaged","observableOf","selfLink","relation","totalElement","injector","Resource","_subtypes","getRelationArray","getRelation","lastIndexOf","realClassName","addRelation","header","updateRelation","substituteRelation","substituteAllRelation","resources","deleteRelation","link","relationId","deleteAllRelation","AngularHalModule","forRoot","ngModule","providers","HttpClient","provide","useClass","deps","NgModule","imports","HttpClientModule","declarations","exports"],"mappings":"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"}