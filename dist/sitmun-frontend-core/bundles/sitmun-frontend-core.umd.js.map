{"version":3,"file":"sitmun-frontend-core.umd.js.map","sources":[null,"ng://@sitmun/frontend-core/angular-hal/src/lib/resource-array.ts","ng://@sitmun/frontend-core/angular-hal/src/lib/resource-helper.ts","ng://@sitmun/frontend-core/angular-hal/src/lib/resource.ts","ng://@sitmun/frontend-core/user/user.model.ts","ng://@sitmun/frontend-core/angular-hal/src/lib/external.service.ts","ng://@sitmun/frontend-core/angular-hal/src/lib/resource.service.ts","ng://@sitmun/frontend-core/angular-hal/src/lib/rest.service.ts","ng://@sitmun/frontend-core/account/account.service.ts","ng://@sitmun/frontend-core/auth/auth.service.ts","ng://@sitmun/frontend-core/auth/auth.interceptor.ts","ng://@sitmun/frontend-core/auth/principal.service.ts","ng://@sitmun/frontend-core/auth/auth-expired.interceptor.ts","ng://@sitmun/frontend-core/auth/login.service.ts","ng://@sitmun/frontend-core/user/user.service.ts","ng://@sitmun/frontend-core/user/user-position.model.ts","ng://@sitmun/frontend-core/user/user-position.service.ts","ng://@sitmun/frontend-core/user/user-configuration.model.ts","ng://@sitmun/frontend-core/user/user-configuration.service.ts","ng://@sitmun/frontend-core/territory/territory.model.ts","ng://@sitmun/frontend-core/territory/territory.service.ts","ng://@sitmun/frontend-core/territory/territory-type.model.ts","ng://@sitmun/frontend-core/territory/territory-type.service.ts","ng://@sitmun/frontend-core/territory/territory-group-type.model.ts","ng://@sitmun/frontend-core/territory/territory-group-type.service.ts","ng://@sitmun/frontend-core/role/role.model.ts","ng://@sitmun/frontend-core/role/role.service.ts","ng://@sitmun/frontend-core/connection/connection.model.ts","ng://@sitmun/frontend-core/connection/connection.service.ts","ng://@sitmun/frontend-core/task/task.model.ts","ng://@sitmun/frontend-core/task/task.service.ts","ng://@sitmun/frontend-core/task/task-type.model.ts","ng://@sitmun/frontend-core/task/task-type.service.ts","ng://@sitmun/frontend-core/task/task-group.model.ts","ng://@sitmun/frontend-core/task/task-group.service.ts","ng://@sitmun/frontend-core/task/task-parameter.model.ts","ng://@sitmun/frontend-core/task/task-parameter.service.ts","ng://@sitmun/frontend-core/task/task-availability.model.ts","ng://@sitmun/frontend-core/task/task-availability.service.ts","ng://@sitmun/frontend-core/task/task-ui.model.ts","ng://@sitmun/frontend-core/task/task-ui.service.ts","ng://@sitmun/frontend-core/service/service.model.ts","ng://@sitmun/frontend-core/service/service.service.ts","ng://@sitmun/frontend-core/service/service-parameter.model.ts","ng://@sitmun/frontend-core/service/service-parameter.service.ts","ng://@sitmun/frontend-core/cartography/cartography.model.ts","ng://@sitmun/frontend-core/cartography/cartography.service.ts","ng://@sitmun/frontend-core/cartography/cartography-group.model.ts","ng://@sitmun/frontend-core/cartography/cartography-group.service.ts","ng://@sitmun/frontend-core/cartography/cartography-availability.model.ts","ng://@sitmun/frontend-core/cartography/cartography-availability.service.ts","ng://@sitmun/frontend-core/cartography/background.model.ts","ng://@sitmun/frontend-core/cartography/background.service.ts","ng://@sitmun/frontend-core/tree/tree.model.ts","ng://@sitmun/frontend-core/tree/tree.service.ts","ng://@sitmun/frontend-core/tree/tree-node.model.ts","ng://@sitmun/frontend-core/tree/tree-node.service.ts","ng://@sitmun/frontend-core/application/application.model.ts","ng://@sitmun/frontend-core/application/application.service.ts","ng://@sitmun/frontend-core/application/application-background.model.ts","ng://@sitmun/frontend-core/application/application-background.service.ts","ng://@sitmun/frontend-core/application/application-parameter.model.ts","ng://@sitmun/frontend-core/application/application-parameter.service.ts","ng://@sitmun/frontend-core/codelist/codelist.model.ts","ng://@sitmun/frontend-core/codelist/codelist.service.ts","ng://@sitmun/frontend-core/map/map-configuration-manager.service.ts","ng://@sitmun/frontend-core/auth/has-any-authority.directive.ts","ng://@sitmun/frontend-core/auth/has-any-authority-on-territory.directive.ts","ng://@sitmun/frontend-core/sitmun-frontend-core.module.ts","ng://@sitmun/frontend-core/angular-hal/src/lib/angular-hal.module.ts"],"sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = Object.setPrototypeOf ||\r\n    ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n    function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = Object.assign || function __assign(t) {\r\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n        s = arguments[i];\r\n        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n    }\r\n    return t;\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator.throw(value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = y[op[0] & 2 ? \"return\" : op[0] ? \"throw\" : \"next\"]) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [0, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);  }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { if (o[n]) i[n] = function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; }; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator];\r\n    return m ? m.call(o) : typeof __values === \"function\" ? __values(o) : o[Symbol.iterator]();\r\n}","\r\nimport {throwError as observableThrowError} from 'rxjs';\r\n\r\nimport {catchError, map} from 'rxjs/operators';\r\nimport {Sort} from './sort';\r\nimport {ArrayInterface} from './array-interface';\r\nimport {ResourceHelper} from './resource-helper';\r\nimport {Resource} from './resource';\r\nimport * as url from 'url';\r\nimport {Observable} from 'rxjs/internal/Observable';\r\n\r\n/** REST array of resource implementation */\r\nexport class ResourceArray<T extends Resource> implements ArrayInterface<T> {\r\n    /** sorting info */\r\n    public sortInfo: Sort[];\r\n    /** proxy url */\r\n    public proxyUrl: string;\r\n    /** root url */\r\n    public rootUrl: string;\r\n\r\n    /** self url */\r\n    public self_uri: string;\r\n    /** next resource url */\r\n    public next_uri: string;\r\n    /** previous resource url */\r\n    public prev_uri: string;\r\n    /** first resource url */\r\n    public first_uri: string;\r\n    /** last resource url */\r\n    public last_uri: string;\r\n\r\n    /** embedded array list */\r\n    public _embedded;\r\n\r\n    /** total number of elements in this array */\r\n    public totalElements = 0;\r\n    /** total number of pages in the response */\r\n    public totalPages = 1;\r\n    \r\n    /** page number in the response */\r\n    public pageNumber = 1;\r\n    \r\n    /** page size */\r\n    public pageSize: number;\r\n\r\n    /** array components */\r\n    public result: T[] = [];\r\n\r\n    /** push a new resource to the array */\r\n    push = (el: T) => {\r\n        this.result.push(el);\r\n    };\r\n\r\n    /** length of the array */\r\n    length = (): number => {\r\n        return this.result.length;\r\n    };\r\n\r\n    /** load array data from REST request */\r\n    private init = (type: { new(): T }, response: any, sortInfo: Sort[]): ResourceArray<T> => {\r\n        const result: ResourceArray<T> = ResourceHelper.createEmptyResult<T>(this._embedded);\r\n        result.sortInfo = sortInfo;\r\n        ResourceHelper.instantiateResourceCollection(type, response, result);\r\n        return result;\r\n    };\r\n\r\n    /** Load next page */\r\n    next = (type: { new(): T }): Observable<ResourceArray<T>> => {\r\n        if (this.next_uri) {\r\n            return ResourceHelper.getHttp().get(ResourceHelper.getProxy(this.next_uri), {headers: ResourceHelper.headers}).pipe(\r\n                map(response => this.init(type, response, this.sortInfo)),\r\n                catchError(error => observableThrowError(error)),);\r\n        }\r\n        return observableThrowError('no next defined');\r\n    };\r\n\r\n    /** Load previous page */\r\n    prev = (type: { new(): T }): Observable<ResourceArray<T>> => {\r\n        if (this.prev_uri) {\r\n            return ResourceHelper.getHttp().get(ResourceHelper.getProxy(this.prev_uri), {headers: ResourceHelper.headers}).pipe(\r\n                map(response => this.init(type, response, this.sortInfo)),\r\n                catchError(error => observableThrowError(error)),);\r\n        }\r\n        return observableThrowError('no prev defined');\r\n    };\r\n\r\n    /** Load first page */\r\n    first = (type: { new(): T }): Observable<ResourceArray<T>> => {\r\n        if (this.first_uri) {\r\n            return ResourceHelper.getHttp().get(ResourceHelper.getProxy(this.first_uri), {headers: ResourceHelper.headers}).pipe(\r\n                map(response => this.init(type, response, this.sortInfo)),\r\n                catchError(error => observableThrowError(error)),);\r\n        }\r\n        return observableThrowError('no first defined');\r\n    };\r\n\r\n    /** Load last page */\r\n    last = (type: { new(): T }): Observable<ResourceArray<T>> => {\r\n        if (this.last_uri) {\r\n            return ResourceHelper.getHttp().get(ResourceHelper.getProxy(this.last_uri), {headers: ResourceHelper.headers}).pipe(\r\n                map(response => this.init(type, response, this.sortInfo)),\r\n                catchError(error => observableThrowError(error)),);\r\n        }\r\n        return observableThrowError('no last defined');\r\n    };\r\n\r\n    /** Load page with given pageNumber*/\r\n    page = (type: { new(): T }, pageNumber: number): Observable<ResourceArray<T>> => {\r\n        this.self_uri = this.self_uri.replace('{?page,size,sort}', '');\r\n        this.self_uri = this.self_uri.replace('{&sort}', '');\r\n        let urlParsed = url.parse(ResourceHelper.getProxy(this.self_uri));\r\n        let query: string = ResourceArray.replaceOrAdd(urlParsed.query, 'size', this.pageSize.toString());\r\n        query = ResourceArray.replaceOrAdd(query, 'page', pageNumber.toString());\r\n\r\n\r\n        let uri = urlParsed.query ?\r\n            ResourceHelper.getProxy(this.self_uri).replace(urlParsed.query, query) : ResourceHelper.getProxy(this.self_uri).concat(query);\r\n        uri = this.addSortInfo(uri);\r\n        return ResourceHelper.getHttp().get(uri, {headers: ResourceHelper.headers}).pipe(\r\n            map(response => this.init(type, response, this.sortInfo)),\r\n            catchError(error => observableThrowError(error)),);\r\n    };\r\n\r\n    /** Sort collection based on given sort attribute */\r\n    sortElements = (type: { new(): T }, ...sort: Sort[]): Observable<ResourceArray<T>> => {\r\n        this.self_uri = this.self_uri.replace('{?page,size,sort}', '');\r\n        this.self_uri = this.self_uri.replace('{&sort}', '');\r\n        let uri = ResourceHelper.getProxy(this.self_uri).concat('?', 'size=', this.pageSize.toString(), '&page=', this.pageNumber.toString());\r\n        uri = this.addSortInfo(uri);\r\n        return ResourceHelper.getHttp().get(uri, {headers: ResourceHelper.headers}).pipe(\r\n            map(response => this.init(type, response, sort)),\r\n            catchError(error => observableThrowError(error)),);\r\n    };\r\n\r\n    /** Load page with given size */\r\n    size = (type: { new(): T }, size: number): Observable<ResourceArray<T>> => {\r\n        let uri = ResourceHelper.getProxy(this.self_uri).concat('?', 'size=', size.toString());\r\n        uri = this.addSortInfo(uri);\r\n        return ResourceHelper.getHttp().get(uri, {headers: ResourceHelper.headers}).pipe(\r\n            map(response => this.init(type, response, this.sortInfo)),\r\n            catchError(error => observableThrowError(error)),);\r\n    };\r\n\r\n    /** Add sort info to given URI */\r\n    private addSortInfo(uri: string) {\r\n        if (this.sortInfo) {\r\n            for (const item of this.sortInfo) {\r\n                uri = uri.concat('&sort=', item.path, ',', item.order);\r\n            }\r\n        }\r\n        return uri;\r\n    }\r\n\r\n    /** Add replace or add param value to query string */\r\n    private static replaceOrAdd(query: string, field: string, value: string): string {\r\n        if (query) {\r\n            let idx: number = query.indexOf(field);\r\n            let idxNextAmp: number = query.indexOf('&', idx) == -1 ? query.indexOf('/', idx) : query.indexOf('&', idx);\r\n\r\n            if (idx != -1) {\r\n                let seachValue = query.substring(idx, idxNextAmp);\r\n                query = query.replace(seachValue, field + '=' + value);\r\n            } else {\r\n                query = query.concat(\"&\" + field + '=' + value);\r\n            }\r\n        } else {\r\n            query = \"?\" + field + '=' + value;\r\n        }\r\n        return query;\r\n    }\r\n}\r\n","import {HttpClient, HttpHeaders, HttpParams} from '@angular/common/http';\r\nimport {Resource} from './resource';\r\nimport {ResourceArray} from './resource-array';\r\nimport {HalOptions} from './rest.service';\r\nimport {SubTypeBuilder} from './subtype-builder';\r\nimport {isNullOrUndefined, isPrimitive} from 'util';\r\nimport * as url from 'url';\r\n\r\n/** REST API access helper */\r\nexport class ResourceHelper {\r\n\r\n    /** HttpHeaders */\r\n    public static headers: HttpHeaders = new HttpHeaders();\r\n    /** Proxy URL */\r\n    private static proxy_uri: string = null;\r\n    /** Root URL */\r\n    private static root_uri: string = null;\r\n    /** HttpClient */\r\n    private static http: HttpClient = null;\r\n\r\n    /** get request headers */\r\n    /*public static get headers(): HttpHeaders {\r\n        if (isNullOrUndefined(this._headers))\r\n          ResourceHelper._headers = new HttpHeaders();\r\n        return ResourceHelper._headers;\r\n    }*/\r\n\r\n    /** set request headers */\r\n    /*public static set headers(headers: HttpHeaders) {\r\n      ResourceHelper._headers = headers;\r\n    }*/\r\n\r\n    /** get request option params */\r\n    static optionParams(params: HttpParams, options?: HalOptions): HttpParams {\r\n        if (options) {\r\n\r\n            if (options.params) {\r\n                for (const param of options.params) {\r\n                    params = params.append(param.key, param.value.toString());\r\n                }\r\n            }\r\n\r\n            if (options.size) {\r\n                params = params.append('size', options.size.toString());\r\n            }\r\n\r\n            if (options.sort) {\r\n                for (const s of options.sort) {\r\n                    let sortString = '';\r\n                    sortString = s.path ? sortString.concat(s.path) : sortString;\r\n                    sortString = s.order ? sortString.concat(',').concat(s.order) : sortString;\r\n                    params = params.append('sort', sortString);\r\n                }\r\n            }\r\n\r\n        }\r\n        return params;\r\n    }\r\n\r\n    /** resolve resource relations */\r\n    static resolveRelations(resource: Resource): Object {\r\n        const result: any = {};\r\n        for (const key in resource) {\r\n            if (!isNullOrUndefined(resource[key])) {\r\n                if (ResourceHelper.className(resource[key])\r\n                    .find((className: string) => className == 'Resource')) {\r\n                    if (resource[key]['_links'])\r\n                        result[key] = resource[key]['_links']['self']['href'];\r\n                } else if (Array.isArray(resource[key])) {\r\n                    let array: any[] = resource[key];\r\n                    if (array) {\r\n                        result[key] = new Array();\r\n                        array.forEach((element) => {\r\n                            if (isPrimitive(element)) {\r\n                                result[key].push(element);\r\n                            }\r\n                            else {\r\n                                result[key].push(this.resolveRelations(element));\r\n                            }\r\n                        });\r\n                    }\r\n                } else {\r\n                    result[key] = resource[key];\r\n                }\r\n            }\r\n        }\r\n        return result as Object;\r\n    }\r\n\r\n    /** create an empty resource from embedded data*/\r\n    static createEmptyResult<T extends Resource>(_embedded: string): ResourceArray<T> {\r\n        let resourceArray: ResourceArray<T> = new ResourceArray<T>();\r\n        resourceArray._embedded = _embedded;\r\n        return resourceArray;\r\n    }\r\n\r\n    /** get resource class name*/\r\n    static getClassName(obj: any): string {\r\n        var funcNameRegex = /function (.+?)\\(/;\r\n        var results = (funcNameRegex).exec(obj.constructor.toString());\r\n        return (results && results.length > 1) ? results[1] : '';\r\n    }\r\n\r\n    \r\n    /** get resource class name from a prototype object*/\r\n    static className(objProto: any): string[] {\r\n        let classNames = [];\r\n        let obj = Object.getPrototypeOf(objProto);\r\n        let className: string;\r\n\r\n        while ((className = ResourceHelper.getClassName(obj)) !== 'Object') {\r\n            classNames.push(className);\r\n            obj = Object.getPrototypeOf(obj);\r\n        }\r\n\r\n        return classNames;\r\n    }\r\n\r\n    /** instantiate a ResourceCollection from response embedded data*/\r\n    static instantiateResourceCollection<T extends Resource>(type: { new(): T }, payload: any,\r\n                                                             result: ResourceArray<T>, builder?: SubTypeBuilder): ResourceArray<T> {\r\n        for (const embeddedClassName of Object.keys(payload[result._embedded])) {\r\n            let embedded: any = payload[result._embedded];\r\n            const items = embedded[embeddedClassName];\r\n            for (let item of items) {\r\n                let instance: T = new type();\r\n                instance = this.searchSubtypes(builder, embeddedClassName, instance);\r\n\r\n                this.instantiateResource(instance, item);\r\n                result.push(instance);\r\n            }\r\n        }\r\n\r\n        result.totalElements = payload.page ? payload.page.totalElements : result.length;\r\n        result.totalPages = payload.page ? payload.page.totalPages : 1;\r\n        result.pageNumber = payload.page ? payload.page.number : 1;\r\n        result.pageSize = payload.page ? payload.page.size : 20;\r\n\r\n        result.self_uri = payload._links && payload._links.self ? payload._links.self.href : undefined;\r\n        result.next_uri = payload._links && payload._links.next ? payload._links.next.href : undefined;\r\n        result.prev_uri = payload._links && payload._links.prev ? payload._links.prev.href : undefined;\r\n        result.first_uri = payload._links && payload._links.first ? payload._links.first.href : undefined;\r\n        result.last_uri = payload._links && payload._links.last ? payload._links.last.href : undefined;\r\n        return result;\r\n    }\r\n\r\n    /** search subtypes*/\r\n    static searchSubtypes<T extends Resource>(builder: SubTypeBuilder, embeddedClassName: string, instance: T) {\r\n        if (builder && builder.subtypes) {\r\n            let keys = builder.subtypes.keys();\r\n            Array.from(keys).forEach((subtypeKey: string) => {\r\n                if (embeddedClassName.toLowerCase().startsWith(subtypeKey.toLowerCase())) {\r\n                    let subtype: { new(): any } = builder.subtypes.get(subtypeKey);\r\n                    instance = new subtype();\r\n                }\r\n            });\r\n        }\r\n        return instance;\r\n    }\r\n\r\n    /** instantiate a Resource from response */\r\n    static instantiateResource<T extends Resource>(entity: T, payload: Object): T {\r\n        for (const p in payload) {\r\n            //TODO array init\r\n            /* if(entity[p].constructor === Array && isNullOrUndefined(payload[p]))\r\n                 entity[p] = [];\r\n             else*/\r\n            entity[p] = payload[p];\r\n        }\r\n        return entity;\r\n    }\r\n\r\n    /** set proxy URL */\r\n    static setProxyUri(proxy_uri: string) {\r\n        ResourceHelper.proxy_uri = proxy_uri;\r\n    }\r\n\r\n    /** set Root URI */\r\n    static setRootUri(root_uri: string) {\r\n        ResourceHelper.root_uri = root_uri;\r\n    }\r\n\r\n    /** get proxy URL */\r\n    public static getURL(): string {\r\n        return ResourceHelper.proxy_uri && ResourceHelper.proxy_uri != '' ?\r\n            ResourceHelper.addSlash(ResourceHelper.proxy_uri) :\r\n            ResourceHelper.addSlash(ResourceHelper.root_uri);\r\n    }\r\n\r\n    /** add slash to URI */\r\n    private static addSlash(uri: string): string {\r\n        let uriParsed = url.parse(uri);\r\n        if (isNullOrUndefined(uriParsed.search) && uri && uri[uri.length - 1] != '/')\r\n            return uri + '/';\r\n        return uri;\r\n    }\r\n\r\n    /** get proxy from URL */\r\n    public static getProxy(url: string): string {\r\n        if (!ResourceHelper.proxy_uri || ResourceHelper.proxy_uri == '')\r\n            return url;\r\n        return ResourceHelper.addSlash(url.replace(ResourceHelper.root_uri, ResourceHelper.proxy_uri));\r\n    }\r\n\r\n    /** set HttpClient*/\r\n    public static setHttp(http: HttpClient) {\r\n        ResourceHelper.http = http;\r\n    }\r\n\r\n    /** get HttpClient*/\r\n    public static getHttp(): HttpClient {\r\n        return ResourceHelper.http;\r\n    }\r\n\r\n    /** get root URI*/\r\n    static getRootUri() {\r\n        return ResourceHelper.root_uri;\r\n    }\r\n}\r\n","\r\nimport {throwError as observableThrowError, of as observableOf} from 'rxjs';\r\n\r\nimport {map} from 'rxjs/operators';\r\n\r\n\r\nimport {HttpParams} from '@angular/common/http';\r\nimport {ResourceHelper} from './resource-helper';\r\nimport {ResourceArray} from './resource-array';\r\nimport {isNullOrUndefined} from 'util';\r\n\r\nimport {HalOptions} from './rest.service';\r\nimport {SubTypeBuilder} from './subtype-builder';\r\nimport {Injectable} from '@angular/core';\r\nimport {Observable} from 'rxjs/internal/Observable';\r\n\r\n/** Abstract resource class*/\r\n@Injectable()\r\nexport abstract class Resource {\r\n\r\n    /** proxy URL */\r\n    public proxyUrl: string;\r\n    /** root URL */\r\n    public rootUrl: string;\r\n\r\n    /** links */\r\n    public _links: any;\r\n    /** subtypes */\r\n    public _subtypes: Map<string, any>;\r\n\r\n    \r\n    /** get subtypes */    \r\n    public get subtypes(): Map<string, any> {\r\n        return this._subtypes;\r\n    }\r\n\r\n    /** set subtypes */\r\n    public set subtypes(_subtypes: Map<string, any>) {\r\n        this._subtypes = _subtypes;\r\n    }\r\n\r\n    /** constructor*/\r\n    constructor() {\r\n    }\r\n\r\n    /** Get collection of related resources */\r\n    public getRelationArray<T extends Resource>(type: { new(): T }, relation: string, _embedded?: string, options?: HalOptions, builder?: SubTypeBuilder): Observable<T[]> {\r\n\r\n        const params = ResourceHelper.optionParams(new HttpParams(), options);\r\n        const result: ResourceArray<T> = ResourceHelper.createEmptyResult<T>(isNullOrUndefined(_embedded) ? \"_embedded\" : _embedded);\r\n        if (!isNullOrUndefined(this._links) && !isNullOrUndefined(this._links[relation])) {\r\n            let observable = ResourceHelper.getHttp().get(ResourceHelper.getProxy(this._links[relation].href), {\r\n                headers: ResourceHelper.headers,\r\n                params: params\r\n            });\r\n            return observable.pipe(map(response => ResourceHelper.instantiateResourceCollection<T>(type, response, result, builder)),\r\n                map((array: ResourceArray<T>) => array.result),);\r\n        } else {\r\n            return observableOf([]);\r\n        }\r\n    }\r\n\r\n    /** Get related resource */\r\n    public getRelation<T extends Resource>(type: { new(): T }, relation: string, builder?: SubTypeBuilder): Observable<T> {\r\n        let result: T = new type();\r\n        if (!isNullOrUndefined(this._links) && !isNullOrUndefined(this._links[relation])) {\r\n            let observable = ResourceHelper.getHttp().get(ResourceHelper.getProxy(this._links[relation].href), {headers: ResourceHelper.headers});\r\n            return observable.pipe(map((data: any) => {\r\n                if (builder) {\r\n                    for (const embeddedClassName of Object.keys(data['_links'])) {\r\n                        if (embeddedClassName == 'self') {\r\n                            let href: string = data._links[embeddedClassName].href;\r\n                            let idx: number = href.lastIndexOf('/');\r\n                            let realClassName = href.replace(ResourceHelper.getRootUri(), \"\").substring(0, idx);\r\n                            result = ResourceHelper.searchSubtypes(builder, realClassName, result);\r\n                            break;\r\n                        }\r\n                    }\r\n                }\r\n                return ResourceHelper.instantiateResource(result, data);\r\n            }));\r\n        } else {\r\n            return observableOf(null);\r\n        }\r\n    }\r\n\r\n    /** Adds the given resource to the bound collection by the relation */\r\n    public addRelation<T extends Resource>(relation: string, resource: T): Observable<any> {\r\n        if (!isNullOrUndefined(this._links) && !isNullOrUndefined(this._links[relation])) {\r\n            let header = ResourceHelper.headers.append('Content-Type', 'text/uri-list');\r\n            return ResourceHelper.getHttp().post(ResourceHelper.getProxy(this._links[relation].href), resource._links.self.href, {headers: header});\r\n        } else {\r\n            return observableThrowError('no relation found');\r\n        }\r\n    }\r\n\r\n    /** Bind the given resource to this resource by the given relation*/\r\n    public updateRelation<T extends Resource>(relation: string, resource: T): Observable<any> {\r\n        if (!isNullOrUndefined(this._links) && !isNullOrUndefined(this._links[relation])) {\r\n            let header = ResourceHelper.headers.append('Content-Type', 'text/uri-list');\r\n            return ResourceHelper.getHttp().patch(ResourceHelper.getProxy(this._links[relation].href), resource._links.self.href, {headers: header});\r\n        } else {\r\n            return observableThrowError('no relation found');\r\n        }\r\n    }\r\n\r\n    /** Bind the given resource to this resource by the given relation*/\r\n    public substituteRelation<T extends Resource>(relation: string, resource: T): Observable<any> {\r\n        if (!isNullOrUndefined(this._links) && !isNullOrUndefined(this._links[relation])) {\r\n            let header = ResourceHelper.headers.append('Content-Type', 'text/uri-list');\r\n            return ResourceHelper.getHttp().put(ResourceHelper.getProxy(this._links[relation].href), resource._links.self.href, {headers: header});\r\n        } else {\r\n            return observableThrowError('no relation found');\r\n        }\r\n    }\r\n    \r\n    \r\n    /** Bind the given resource to this resource by the given relation*/\r\n    public substituteAllRelation<T extends Resource>(relation: string, resources: Resource[]): Observable<any> {\r\n        if (!isNullOrUndefined(this._links) && !isNullOrUndefined(this._links[relation])) {\r\n            let header = ResourceHelper.headers.append('Content-Type', 'text/uri-list');\r\n            return ResourceHelper.getHttp().put(ResourceHelper.getProxy(this._links[relation].href), resources.map((resource) => resource._links.self.href), {headers: header});\r\n        } else {\r\n            return observableThrowError('no relation found');\r\n        }\r\n    }\r\n\r\n\r\n\r\n    /** Unbind the resource with the given relation from this resource*/\r\n    public deleteRelation<T extends Resource>(relation: string, resource: T): Observable<any> {\r\n        if (!isNullOrUndefined(this._links) && !isNullOrUndefined(resource._links)) {\r\n            let link: string = resource._links['self'].href;\r\n            let idx: number = link.lastIndexOf('/') + 1;\r\n\r\n            if (idx == -1)\r\n                return observableThrowError('no relation found');\r\n\r\n            let relationId: string = link.substring(idx);\r\n            return ResourceHelper.getHttp().delete(ResourceHelper.getProxy(this._links[relation].href + '/' + relationId), {headers: ResourceHelper.headers});\r\n        } else {\r\n            return observableThrowError('no relation found');\r\n        }\r\n    }\r\n    \r\n    /** Unbind the resource with the given relation from this resource*/\r\n    public deleteAllRelation<T extends Resource>(relation: string): Observable<any> {\r\n        return ResourceHelper.getHttp().delete(ResourceHelper.getProxy(this._links[relation].href ), {headers: ResourceHelper.headers});\r\n        \r\n    }\r\n\r\n}","import {Resource} from '../angular-hal/src/lib/resource';\r\nimport { UserConfiguration } from './user-configuration.model';\r\nimport { UserPosition } from './user-position.model';\r\n\r\n/**\r\n * User model\r\n */\r\nexport class User extends Resource {\r\n  /** id */\r\n  public id: number;  \r\n  /** username */\r\n  public username: string;\r\n  /** password */\r\n  public password: string;\r\n  /** first name */\r\n  public firstName: string;\r\n  /** last name */\r\n  public lastName: string;\r\n  /** whether user is blocked */\r\n  public blocked: boolean;\r\n  /** whether user is administrator */\r\n  public administrator: boolean;\r\n  /** user positions */\r\n  public positions: UserPosition[];\r\n  /** user permissions */\r\n  public permissions: UserConfiguration[];\r\n}\r\n","import {HttpClient} from '@angular/common/http';\r\nimport {Inject, Injectable} from '@angular/core';\r\nimport {ResourceHelper} from './resource-helper';\r\nimport {ExternalConfigurationHandlerInterface} from './external-configuration.handler';\r\nimport {ExternalConfiguration} from './ExternalConfiguration';\r\n\r\n\r\n/** ExternalService */\r\n@Injectable()\r\nexport class ExternalService {\r\n\r\n    /** constructor */\r\n    constructor(@Inject('ExternalConfigurationService') private externalConfigurationService: ExternalConfigurationHandlerInterface) {\r\n        ResourceHelper.setProxyUri(externalConfigurationService.getProxyUri());\r\n        ResourceHelper.setRootUri(externalConfigurationService.getRootUri());\r\n        ResourceHelper.setHttp(externalConfigurationService.getHttp());\r\n    }\r\n\r\n    /** update ExternalConfigurationHandler */\r\n    public updateExternalConfigurationHandlerInterface(externalConfigurationService: ExternalConfigurationHandlerInterface) {\r\n\tthis.externalConfigurationService = externalConfigurationService;\r\n\r\n        ResourceHelper.setProxyUri(externalConfigurationService.getProxyUri());\r\n        ResourceHelper.setRootUri(externalConfigurationService.getRootUri());\r\n        ResourceHelper.setHttp(externalConfigurationService.getHttp());\r\n    }\r\n\r\n    /** get ExternalConfiguration */\r\n    public getExternalConfiguration(): ExternalConfiguration {\r\n        return this.externalConfigurationService.getExternalConfiguration();\r\n    }\r\n\r\n    /** get proxy URL */\r\n    public getProxyUri(): string {\r\n        return this.externalConfigurationService.getProxyUri();\r\n    }\r\n\r\n    /** get Root URI */\r\n    public getRootUri(): string {\r\n        return this.externalConfigurationService.getRootUri();\r\n    }\r\n\r\n    /** get URL */\r\n    public getURL(): string {\r\n        return ResourceHelper.getURL();\r\n    }\r\n\r\n    /** get HttpClient */\r\n    public getHttp(): HttpClient {\r\n        return ResourceHelper.getHttp();\r\n    }\r\n}\r\n","\r\nimport {throwError as observableThrowError} from 'rxjs';\r\n\r\nimport {catchError, map} from 'rxjs/operators';\r\nimport {Resource} from './resource';\r\nimport {ResourceHelper} from './resource-helper';\r\nimport {Injectable} from '@angular/core';\r\nimport {HttpParams, HttpResponse} from '@angular/common/http';\r\nimport {Sort} from './sort';\r\nimport {ResourceArray} from './resource-array';\r\nimport {ExternalService} from './external.service';\r\nimport {HalOptions} from './rest.service';\r\nimport {SubTypeBuilder} from './subtype-builder';\r\nimport {Observable} from 'rxjs/internal/Observable';\r\n\r\n/** ResourceService */\r\n@Injectable()\r\nexport class ResourceService {\r\n\r\n\r\n    /** constructor */\r\n    constructor(private externalService: ExternalService) {}\r\n\r\n\r\n    /** get URL */\r\n    private static getURL(): string {\r\n        return ResourceHelper.getURL();\r\n    }\r\n\r\n    /** get all resources from a base URI of a given type */\r\n    public getAll<T extends Resource>(type: { new(): T }, resource: string, _embedded: string, options?: HalOptions, subType?: SubTypeBuilder): Observable<ResourceArray<T>> {\r\n        const uri = this.getResourceUrl(resource).concat('?projection=view');\r\n        const params = ResourceHelper.optionParams(new HttpParams(), options);\r\n        const result: ResourceArray<T> = ResourceHelper.createEmptyResult<T>(_embedded);\r\n\r\n        this.setUrls(result);\r\n        result.sortInfo = options ? options.sort : undefined;\r\n        let observable = ResourceHelper.getHttp().get(uri, {headers: ResourceHelper.headers, params: params});\r\n        return observable.pipe(map(response => ResourceHelper.instantiateResourceCollection(type, response, result, subType)),\r\n            catchError(error => observableThrowError(error)),);\r\n    }\r\n\r\n    /** get resource from a base URI and a given id */\r\n    public get<T extends Resource>(type: { new(): T }, resource: string, id: any): Observable<T> {\r\n        const uri = this.getResourceUrl(resource).concat('/', id, '?projection=view');\r\n        const result: T = new type();\r\n\r\n        this.setUrlsResource(result);\r\n        let observable = ResourceHelper.getHttp().get(uri, {headers: ResourceHelper.headers});\r\n        return observable.pipe(map(data => ResourceHelper.instantiateResource(result, data)),\r\n            catchError(error => observableThrowError(error)),);\r\n    }\r\n\r\n    /** get resource from its selflink */\r\n    public getBySelfLink<T extends Resource>(type: { new(): T }, resourceLink: string): Observable<T> {\r\n        const result: T = new type();\r\n\r\n        this.setUrlsResource(result);\r\n        let observable = ResourceHelper.getHttp().get(ResourceHelper.getProxy(resourceLink), {headers: ResourceHelper.headers});\r\n        return observable.pipe(map(data => ResourceHelper.instantiateResource(result, data)),\r\n            catchError(error => observableThrowError(error)),);\r\n    }\r\n\r\n    /** search resources from a given base path, query and options */\r\n    public search<T extends Resource>(type: { new(): T }, query: string, resource: string, _embedded: string, options?: HalOptions): Observable<ResourceArray<T>> {\r\n        const uri = this.getResourceUrl(resource).concat('/search/', query);\r\n        const params = ResourceHelper.optionParams(new HttpParams(), options);\r\n        const result: ResourceArray<T> = ResourceHelper.createEmptyResult<T>(_embedded);\r\n\r\n        this.setUrls(result);\r\n        let observable = ResourceHelper.getHttp().get(uri, {headers: ResourceHelper.headers, params: params});\r\n        return observable.pipe(map(response => ResourceHelper.instantiateResourceCollection(type, response, result)),\r\n            catchError(error => observableThrowError(error)),);\r\n    }\r\n\r\n    /** search a single resource from a given base path, query and options */\r\n    public searchSingle<T extends Resource>(type: { new(): T }, query: string, resource: string, options?: HalOptions): Observable<T> {\r\n        const uri = this.getResourceUrl(resource).concat('/search/', query);\r\n        const params = ResourceHelper.optionParams(new HttpParams(), options);\r\n        const result: T = new type();\r\n\r\n        this.setUrlsResource(result);\r\n        let observable = ResourceHelper.getHttp().get(uri, {headers: ResourceHelper.headers, params: params});\r\n        return observable.pipe(map(response => ResourceHelper.instantiateResource(result, response)),\r\n            catchError(error => observableThrowError(error)),);\r\n    }\r\n\r\n    /** search resources from a given base path, custom query and options */\r\n    public customQuery<T extends Resource>(type: { new(): T }, query: string, resource: string, _embedded: string, options?: HalOptions): Observable<ResourceArray<T>> {\r\n        const uri = this.getResourceUrl(resource + query);\r\n        const params = ResourceHelper.optionParams(new HttpParams(), options);\r\n        const result: ResourceArray<T> = ResourceHelper.createEmptyResult<T>(_embedded);\r\n\r\n        this.setUrls(result);\r\n        let observable = ResourceHelper.getHttp().get(uri, {headers: ResourceHelper.headers, params: params});\r\n        return observable.pipe(map(response => ResourceHelper.instantiateResourceCollection(type, response, result)),\r\n            catchError(error => observableThrowError(error)),);\r\n    }\r\n\r\n    /** get resource given a relation link */\r\n    public getByRelation<T extends Resource>(type: { new(): T }, resourceLink: string): Observable<T> {\r\n        let result: T = new type();\r\n\r\n        this.setUrlsResource(result);\r\n        let observable = ResourceHelper.getHttp().get(resourceLink, {headers: ResourceHelper.headers});\r\n        return observable.pipe(map(data => ResourceHelper.instantiateResource(result, data)),\r\n            catchError(error => observableThrowError(error)),);\r\n    }\r\n\r\n    /** get resource array given a relation link */\r\n    public getByRelationArray<T extends Resource>(type: { new(): T }, resourceLink: string, _embedded: string, builder?: SubTypeBuilder): Observable<ResourceArray<T>> {\r\n        const result: ResourceArray<T> = ResourceHelper.createEmptyResult<T>(_embedded);\r\n\r\n        this.setUrls(result);\r\n        let observable = ResourceHelper.getHttp().get(resourceLink, {headers: ResourceHelper.headers});\r\n        return observable.pipe(map(response => ResourceHelper.instantiateResourceCollection(type, response, result, builder)),\r\n            catchError(error => observableThrowError(error)),);\r\n    }\r\n\r\n    /** count resources given a path */\r\n    public count(resource: string): Observable<number> {\r\n        const uri = this.getResourceUrl(resource).concat('/search/countAll');\r\n\r\n        return ResourceHelper.getHttp().get(uri, {headers: ResourceHelper.headers, observe: 'body'}).pipe(\r\n            map((response: Response) => Number(response.body)),\r\n            catchError(error => observableThrowError(error)),);\r\n    }\r\n\r\n    /** create resource from self link and entity data*/\r\n    public create<T extends Resource>(selfResource: string, entity: T) {\r\n        const uri = ResourceHelper.getURL() + selfResource;\r\n        const payload = ResourceHelper.resolveRelations(entity);\r\n\r\n        this.setUrlsResource(entity);\r\n        let observable = ResourceHelper.getHttp().post(uri, payload, {headers: ResourceHelper.headers, observe: 'response'});\r\n        return observable.pipe(map((response: HttpResponse<string>) => {\r\n            if (response.status >= 200 && response.status <= 207)\r\n                return ResourceHelper.instantiateResource(entity, response.body);\r\n            else if (response.status == 500) {\r\n                let body: any = response.body;\r\n                return observableThrowError(body.error);\r\n            }\r\n        }),catchError(error => observableThrowError(error)),);\r\n    }\r\n\r\n    /** update resource from a given entity data*/\r\n    public update<T extends Resource>(entity: T) {\r\n        const uri = ResourceHelper.getProxy(entity._links.self.href);\r\n        const payload = ResourceHelper.resolveRelations(entity);\r\n        this.setUrlsResource(entity);\r\n        let observable = ResourceHelper.getHttp().put(uri, payload, {headers: ResourceHelper.headers, observe: 'response'});\r\n        return observable.pipe(map((response: HttpResponse<string>) => {\r\n            if (response.status >= 200 && response.status <= 207)\r\n                return ResourceHelper.instantiateResource(entity, response.body);\r\n            else if (response.status == 500) {\r\n                let body: any = response.body;\r\n                return observableThrowError(body.error);\r\n            }\r\n        }),catchError(error => observableThrowError(error)),);\r\n    }\r\n\r\n    /** patch resource from a given entity data*/\r\n    public patch<T extends Resource>(entity: T) {\r\n        const uri = ResourceHelper.getProxy(entity._links.self.href);\r\n        const payload = ResourceHelper.resolveRelations(entity);\r\n        this.setUrlsResource(entity);\r\n        let observable = ResourceHelper.getHttp().patch(uri, payload, {headers: ResourceHelper.headers, observe: 'response'});\r\n        return observable.pipe(map((response: HttpResponse<string>) => {\r\n            if (response.status >= 200 && response.status <= 207)\r\n                return ResourceHelper.instantiateResource(entity, response.body);\r\n            else if (response.status == 500) {\r\n                let body: any = response.body;\r\n                return observableThrowError(body.error);\r\n            }\r\n        }),catchError(error => observableThrowError(error)),);\r\n    }\r\n\r\n    /** delete resource from a given entity data*/\r\n    public delete<T extends Resource>(entity: T): Observable<Object> {\r\n        const uri = ResourceHelper.getProxy(entity._links.self.href);\r\n        return ResourceHelper.getHttp().delete(uri, {headers: ResourceHelper.headers}).pipe(catchError(error => observableThrowError(error)));\r\n    }\r\n\r\n    /** whether a resource array has next page of results*/\r\n    public hasNext<T extends Resource>(resourceArray: ResourceArray<T>): boolean {\r\n        return resourceArray.next_uri != undefined;\r\n    }\r\n\r\n    /** whether a resource array has previous page of results*/\r\n    public hasPrev<T extends Resource>(resourceArray: ResourceArray<T>): boolean {\r\n        return resourceArray.prev_uri != undefined;\r\n    }\r\n\r\n    /** whether a resource array has first page of results*/\r\n    public hasFirst<T extends Resource>(resourceArray: ResourceArray<T>): boolean {\r\n        return resourceArray.first_uri != undefined;\r\n    }\r\n\r\n    /** whether a resource array has last page of results*/\r\n    public hasLast<T extends Resource>(resourceArray: ResourceArray<T>): boolean {\r\n        return resourceArray.last_uri != undefined;\r\n    }\r\n\r\n    /** get resource array next page of results*/\r\n    public next<T extends Resource>(resourceArray: ResourceArray<T>, type: { new(): T }): Observable<ResourceArray<T>> {\r\n        return resourceArray.next(type);\r\n    }\r\n\r\n    /** get resource array previous page of results*/\r\n    public prev<T extends Resource>(resourceArray: ResourceArray<T>, type: { new(): T }): Observable<ResourceArray<T>> {\r\n        return resourceArray.prev(type);\r\n    }\r\n\r\n    /** get resource array first page of results*/\r\n    public first<T extends Resource>(resourceArray: ResourceArray<T>, type: { new(): T }): Observable<ResourceArray<T>> {\r\n        return resourceArray.first(type);\r\n    }\r\n\r\n    /** get resource array last page of results*/\r\n    public last<T extends Resource>(resourceArray: ResourceArray<T>, type: { new(): T }): Observable<ResourceArray<T>> {\r\n        return resourceArray.last(type);\r\n    }\r\n\r\n    /** get resource array page of results given a page number*/\r\n    public page<T extends Resource>(resourceArray: ResourceArray<T>, type: { new(): T }, id: number): Observable<ResourceArray<T>> {\r\n        return resourceArray.page(type, id);\r\n    }\r\n\r\n    /** sort resource array with a given sorting params */\r\n    public sortElements<T extends Resource>(resourceArray: ResourceArray<T>, type: { new(): T }, ...sort: Sort[]): Observable<ResourceArray<T>> {\r\n        return resourceArray.sortElements(type, ...sort);\r\n    }\r\n\r\n    /** get resource array size*/\r\n    public size<T extends Resource>(resourceArray: ResourceArray<T>, type: { new(): T }, size: number): Observable<ResourceArray<T>> {\r\n        return resourceArray.size(type, size);\r\n    }\r\n\r\n    /** get resource URL from a given path*/\r\n    public getResourceUrl(resource?: string): string {\r\n        let url = ResourceService.getURL();\r\n        if (!url.endsWith('/')) {\r\n            url = url.concat('/');\r\n        }\r\n        if (resource) {\r\n            return url.concat(resource);\r\n        }\r\n        return url;\r\n    }\r\n\r\n    /** set proxy and root urls of given resource array */\r\n    private setUrls<T extends Resource>(result: ResourceArray<T>) {\r\n        result.proxyUrl = this.externalService.getProxyUri();\r\n        result.rootUrl = this.externalService.getRootUri();\r\n    }\r\n\r\n    /** set proxy and root urls of given resource */\r\n    private setUrlsResource<T extends Resource>(result: T) {\r\n        result.proxyUrl = this.externalService.getProxyUri();\r\n        result.rootUrl = this.externalService.getRootUri();\r\n    }\r\n}\r\n","import {of as observableOf, throwError as observableThrowError} from 'rxjs';\r\nimport {map, mergeMap} from 'rxjs/operators';\r\nimport {Resource} from './resource';\r\nimport {ResourceArray} from './resource-array';\r\nimport {Sort} from './sort';\r\nimport {ResourceService} from './resource.service';\r\nimport {SubTypeBuilder} from './subtype-builder';\r\nimport {isNullOrUndefined} from 'util';\r\nimport {Observable} from 'rxjs/internal/Observable';\r\nimport {Injector} from \"@angular/core\";\r\n\r\n/** HAL param data model */\r\nexport type HalParam = { key: string, value: string | number | boolean };\r\n/** HAL option data model */\r\nexport type HalOptions = { notPaged?: boolean, size?: number, sort?: Sort[], params?: HalParam[] };\r\n\r\n/** REST API access interface */\r\nexport class RestService<T extends Resource> {\r\n    /** resource type */\r\n    private type: any;\r\n    /** resource path */\r\n    private resource: string;\r\n    /** resource array */\r\n    public resourceArray: ResourceArray<T>;\r\n    /** resource service */\r\n    public resourceService: ResourceService;\r\n    /** _embedded field name */\r\n    private _embedded: string = '_embedded';\r\n\r\n    /** constructor */\r\n    constructor(type: { new(): T },\r\n                resource: string,\r\n                private injector: Injector,\r\n                _embedded?: string) {\r\n        this.type = type;\r\n        this.resource = resource;\r\n        this.resourceService = injector.get(ResourceService);\r\n        if (!isNullOrUndefined(_embedded))\r\n            this._embedded = _embedded;\r\n    }\r\n\r\n    /** error handler */\r\n    protected handleError(error: any):Observable<never> {\r\n        return RestService.handleError(error);\r\n    }\r\n\r\n    /** error handler */\r\n    protected static handleError(error: any):Observable<never> {\r\n        return observableThrowError(error);\r\n    }\r\n\r\n    /** get all resources with optional options an subType params */\r\n    public getAll(options?: HalOptions, subType?: SubTypeBuilder): Observable<T[]> {\r\n        return this.resourceService.getAll(this.type, this.resource, this._embedded, options, subType).pipe(\r\n            mergeMap((resourceArray: ResourceArray<T>) => {\r\n                if (options && options.notPaged && !isNullOrUndefined(resourceArray.first_uri)) {\r\n                    options.notPaged = false;\r\n                    options.size = resourceArray.totalElements;\r\n                    return this.getAll(options);\r\n                } else {\r\n                    this.resourceArray = resourceArray;\r\n                    return observableOf(resourceArray.result);\r\n                }\r\n            }));\r\n    }\r\n\r\n    /** get resource from a given id */\r\n    public get(id: any): Observable<T> {\r\n        return this.resourceService.get(this.type, this.resource, id);\r\n    }\r\n\r\n    /** get resource from self link */\r\n    public getBySelfLink(selfLink: string): Observable<T> {\r\n        return this.resourceService.getBySelfLink(this.type, selfLink);\r\n    }\r\n\r\n    /** search resources from a given query string and optional options params */\r\n    public search(query: string, options?: HalOptions): Observable<T[]> {\r\n        return this.resourceService.search(this.type, query, this.resource, this._embedded, options).pipe(\r\n            mergeMap((resourceArray: ResourceArray<T>) => {\r\n                if (options && options.notPaged && !isNullOrUndefined(resourceArray.first_uri)) {\r\n                    options.notPaged = false;\r\n                    options.size = resourceArray.totalElements;\r\n                    return this.search(query, options);\r\n                } else {\r\n                    this.resourceArray = resourceArray;\r\n                    return observableOf(resourceArray.result);\r\n                }\r\n            }));\r\n    }\r\n\r\n    /** search resource from a given query string and optional options params */\r\n    public searchSingle(query: string, options?: HalOptions): Observable<T> {\r\n        return this.resourceService.searchSingle(this.type, query, this.resource, options);\r\n    }\r\n\r\n    /** search resources from a given custom query string and optional options params */\r\n    public customQuery(query: string, options?: HalOptions): Observable<T[]> {\r\n        return this.resourceService.customQuery(this.type, query, this.resource, this._embedded, options).pipe(\r\n            mergeMap((resourceArray: ResourceArray<T>) => {\r\n                if (options && options.notPaged && !isNullOrUndefined(resourceArray.first_uri)) {\r\n                    options.notPaged = false;\r\n                    options.size = resourceArray.totalElements;\r\n                    return this.customQuery(query, options);\r\n                } else {\r\n                    this.resourceArray = resourceArray;\r\n                    return observableOf(resourceArray.result);\r\n                }\r\n            }));\r\n    }\r\n\r\n\r\n    /** get resource array given a relation link */\r\n    public getByRelationArray(relation: string, builder?: SubTypeBuilder): Observable<T[]> {\r\n        return this.resourceService.getByRelationArray(this.type, relation, this._embedded, builder).pipe(\r\n            map((resourceArray: ResourceArray<T>) => {\r\n                this.resourceArray = resourceArray;\r\n                return resourceArray.result;\r\n            }));\r\n    }\r\n\r\n    /** get resource given a relation link */\r\n    public getByRelation(relation: string): Observable<T> {\r\n        return this.resourceService.getByRelation(this.type, relation);\r\n    }\r\n\r\n    /** count resources given a path */\r\n    public count(): Observable<number> {\r\n        return this.resourceService.count(this.resource);\r\n    }\r\n\r\n    /** create resource from self link and entity data*/\r\n    public create(entity: T) {\r\n        return this.resourceService.create(this.resource, entity);\r\n    }\r\n\r\n    /** update resource from a given entity data*/\r\n    public update(entity: T) {\r\n        return this.resourceService.update(entity);\r\n    }\r\n\r\n    /** patch resource from a given entity data*/\r\n    public patch(entity: T) {\r\n        return this.resourceService.patch(entity);\r\n    }\r\n\r\n    /** delete resource from a given entity data*/\r\n    public delete(entity: T): Observable<Object> {\r\n        return this.resourceService.delete(entity);\r\n    }\r\n\r\n    /** get total number of elements of resource array */\r\n    public totalElement(): number {\r\n        if (this.resourceArray && this.resourceArray.totalElements)\r\n            return this.resourceArray.totalElements;\r\n        return 0;\r\n    }\r\n\r\n    /** whether a resource array has first page of results*/\r\n    public hasFirst(): boolean {\r\n        if (this.resourceArray)\r\n            return this.resourceService.hasFirst(this.resourceArray);\r\n        return false;\r\n    }\r\n\r\n    /** whether a resource array has next page of results*/\r\n    public hasNext(): boolean {\r\n        if (this.resourceArray)\r\n            return this.resourceService.hasNext(this.resourceArray);\r\n        return false;\r\n    }\r\n\r\n    /** whether a resource array has previous page of results*/\r\n    public hasPrev(): boolean {\r\n        if (this.resourceArray)\r\n            return this.resourceService.hasPrev(this.resourceArray);\r\n        return false;\r\n    }\r\n\r\n    /** whether a resource array has last page of results*/\r\n    public hasLast(): boolean {\r\n        if (this.resourceArray)\r\n            return this.resourceService.hasLast(this.resourceArray);\r\n        return false;\r\n    }\r\n\r\n    /** get resource array next page of results*/\r\n    public next(): Observable<T[]> {\r\n        if (this.resourceArray)\r\n            return this.resourceService.next(this.resourceArray, this.type).pipe(\r\n                map((resourceArray: ResourceArray<T>) => {\r\n                    this.resourceArray = resourceArray;\r\n                    return resourceArray.result;\r\n                }));\r\n        else\r\n            observableThrowError('no resourceArray found');\r\n    }\r\n\r\n    /** get resource array previous page of results*/\r\n    public prev(): Observable<T[]> {\r\n        if (this.resourceArray)\r\n            return this.resourceService.prev(this.resourceArray, this.type).pipe(\r\n                map((resourceArray: ResourceArray<T>) => {\r\n                    this.resourceArray = resourceArray;\r\n                    return resourceArray.result;\r\n                }));\r\n        else\r\n            observableThrowError('no resourceArray found');\r\n    }\r\n\r\n    /** get resource array first page of results*/\r\n    public first(): Observable<T[]> {\r\n        if (this.resourceArray)\r\n            return this.resourceService.first(this.resourceArray, this.type)\r\n                .pipe(\r\n                    map((resourceArray: ResourceArray<T>) => {\r\n                        this.resourceArray = resourceArray;\r\n                        return resourceArray.result;\r\n                    })\r\n                );\r\n        else\r\n            observableThrowError('no resourceArray found');\r\n    }\r\n\r\n    /** get resource array last page of results*/\r\n    public last(): Observable<T[]> {\r\n        if (this.resourceArray)\r\n            return this.resourceService.last(this.resourceArray, this.type)\r\n                .pipe(\r\n                    map((resourceArray: ResourceArray<T>) => {\r\n                        this.resourceArray = resourceArray;\r\n                        return resourceArray.result;\r\n                    })\r\n                );\r\n        else\r\n            observableThrowError('no resourceArray found');\r\n    }\r\n\r\n    /** get resource array page of results given a page number*/\r\n    public page(pageNumber: number): Observable<T[]> {\r\n        if (this.resourceArray)\r\n            return this.resourceService.page(this.resourceArray, this.type, pageNumber).pipe(\r\n                map((resourceArray: ResourceArray<T>) => {\r\n                    this.resourceArray = resourceArray;\r\n                    return resourceArray.result;\r\n                }));\r\n        else\r\n            observableThrowError('no resourceArray found');\r\n    }\r\n}\r\n","import { User } from '../user/user.model';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Injectable, Injector } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport {RestService} from '../angular-hal/src/lib/rest.service';\r\n\r\n\r\n/** Account manager service */\r\n@Injectable()\r\nexport class AccountService extends RestService<User> {\r\n  \r\n\r\n  /** API resource path */\r\n  public ACCOUNT_API = 'account';\r\n\r\n  /** constructor */\r\n  constructor(injector: Injector,private http: HttpClient) {\r\n    super(User, \"account\", injector);\r\n  }\r\n\r\n  /** get logged in user account*/\r\n  get(): Observable<any> {\r\n    let result: Observable<Object>;\r\n    result = this.http.get(this.resourceService.getResourceUrl(this.ACCOUNT_API));\r\n    return result;\r\n  }\r\n  \r\n  /** save account*/\r\n  save(item: any): Observable<any> {\r\n    let result: Observable<Object>;\r\n    result = this.http.post(this.resourceService.getResourceUrl(this.ACCOUNT_API) , item);\r\n\r\n    return result;\r\n  }\r\n\r\n  /** change logged in user account*/  \r\n  changePassword(item: any): Observable<any> {\r\n    let result: Observable<Object>;\r\n    result = this.http.post(this.resourceService.getResourceUrl(this.ACCOUNT_API+\"/change-password\") , item);\r\n    return result;\r\n  }\r\n  \r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Observable} from 'rxjs-compat';\r\nimport {ResourceService} from '../angular-hal/src/lib/resource.service';\r\n//import * as moment from 'moment';\r\n\r\n/** Authentication service*/\r\n@Injectable()\r\nexport class AuthService {\r\n    \r\n  /** API resource path */\r\n  public AUTH_API = 'authenticate';\r\n\r\n    /** constructor*/\r\n    constructor(\r\n        private http: HttpClient,\r\n        private resourceService: ResourceService\r\n    ) {}\r\n    \r\n    /** get current user jwt token from session storage*/\r\n    getToken() {\r\n        return  sessionStorage.getItem('authenticationToken');\r\n    }\r\n\r\n    /** login operation */\r\n    login(credentials): Observable<any> {\r\n\r\n        const data = {\r\n            username: credentials.username,\r\n            password: credentials.password\r\n        };\r\n        return this.http.post(this.resourceService.getResourceUrl(this.AUTH_API), data, {observe : 'response'}).map(authenticateSuccess.bind(this));\r\n\r\n        function authenticateSuccess(resp) {\r\n            if (resp.ok) {\r\n                const jwt = resp.body.id_token;\r\n                this.storeAuthenticationToken(jwt);\r\n                //const expiresAt = moment().add( resp.headers.get('Token-Validity'),'milisecond');\r\n                //sessionStorage.setItem('expires_at', JSON.stringify(expiresAt.valueOf()));\r\n                return jwt;\r\n            }                    \r\n        }\r\n    }\r\n    \r\n    /** login operation with jwt token */\r\n    loginWithToken(jwt) {\r\n        if (jwt) {\r\n            this.storeAuthenticationToken(jwt);\r\n            return Promise.resolve(jwt);\r\n        } else {\r\n            return Promise.reject('auth-jwt-service Promise reject'); // Put appropriate error message here\r\n        }\r\n    }\r\n\r\n    /** store jwt token in session storage*/\r\n    storeAuthenticationToken(jwt) {\r\n       sessionStorage.setItem('authenticationToken', jwt);\r\n        \r\n    }\r\n    \r\n    /** check whether current user is logged in*/\r\n    public isLoggedIn() {\r\n        //return moment().isBefore(this.getExpiration());\r\n        return this.getToken();\r\n    }\r\n    \r\n    /** check whether current user is logged out*/\r\n    isLoggedOut() {\r\n        return !this.isLoggedIn();\r\n    }\r\n\r\n    /** logout operation */\r\n    logout(): Observable<any> {\r\n\r\n        return new Observable((observer) => {\r\n            //localStorage.removeItem('authenticationToken');\r\n            sessionStorage.removeItem('authenticationToken');\r\n            //sessionStorage.removeItem('expires_at');\r\n            observer.complete();\r\n        });\r\n    }\r\n\r\n\r\n    \r\n}\r\n","import { Observable } from 'rxjs';\r\nimport { HttpInterceptor, HttpRequest, HttpHandler, HttpEvent } from '@angular/common/http';\r\n\r\n/** Interceptor for authentication token in API requests */\r\nexport class AuthInterceptor implements HttpInterceptor {\r\n\r\n    /** constructor*/\r\n    constructor(\r\n    ) {\r\n    }\r\n    \r\n    /** request handler */\r\n    intercept(request: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\r\n        if (!request || !request.url || !(request.url.includes(\"api\")) ) {\r\n            return next.handle(request);\r\n        }\r\n        const token = sessionStorage.getItem('authenticationToken');\r\n        if (!!token) {\r\n            request = request.clone({\r\n                setHeaders: {\r\n                    Authorization: 'Bearer ' + token\r\n                }\r\n            });\r\n        }\r\n        return next.handle(request);\r\n    }\r\n\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs/Observable';\r\nimport { Subject } from 'rxjs/Subject';\r\nimport { AccountService } from '../account/account.service';\r\n\r\n/** Principal service*/\r\n@Injectable()\r\nexport class Principal {\r\n    private userIdentity: any;\r\n    private authenticated = false;\r\n    private authenticationState = new Subject<any>();\r\n\r\n    /** constructor */\r\n    constructor(\r\n        private account: AccountService\r\n    ) {}\r\n\r\n    /** authenticate with given identity*/\r\n    authenticate(identity) {\r\n        this.userIdentity = identity;\r\n        this.authenticated = identity !== null;\r\n        this.authenticationState.next(this.userIdentity);\r\n    }\r\n\r\n    /** check whether current user has any of the given authorities */\r\n    hasAnyAuthority(authorities: string[]): Promise<boolean> {\r\n        return Promise.resolve(this.hasAnyAuthorityDirect(authorities));\r\n    }\r\n\r\n    /** check whether current user has any of the given authorities on the given territory */\r\n    hasAnyAuthorityOnTerritory(authorities: string[],territory: string ): Promise<boolean> {\r\n        return Promise.resolve(this.hasAnyAuthorityDirectOnTerritory(authorities,territory));\r\n    }\r\n\r\n    /** check whether current user has any of the given authorities without resolving promises*/\r\n    hasAnyAuthorityDirect(authorities: string[]): boolean {\r\n        if (!this.authenticated || !this.userIdentity || !this.userIdentity.authorities) {\r\n            return false;\r\n        }\r\n\r\n        for (let i = 0; i < authorities.length; i++) {\r\n            if (this.userIdentity.authorities.includes(authorities[i])) {\r\n                return true;\r\n            }\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    /** check whether current user has any of the given authorities on the given territory without resolving promises */\r\n    hasAnyAuthorityDirectOnTerritory(authorities: string[],territory: string): boolean {\r\n        if (!this.authenticated || !this.userIdentity || !this.userIdentity.authorities) {\r\n            return false;\r\n        }\r\n\r\n        for (let i = 0; i < authorities.length; i++) {\r\n\r\n            if (this.userIdentity.authoritiesPerTerritory[territory] && this.userIdentity.authoritiesPerTerritory[territory].includes(authorities[i])) {\r\n                return true;\r\n            }\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    /** check whether current user has the given authority */\r\n    hasAuthority(authority: string): Promise<boolean> {\r\n        if (!this.authenticated) {\r\n           return Promise.resolve(false);\r\n        }\r\n\r\n        return this.identity().then((id) => {\r\n            return Promise.resolve(id.authorities && id.authorities.includes(authority));\r\n        }, () => {\r\n            return Promise.resolve(false);\r\n        });\r\n    }\r\n\r\n    /** check whether current user has the given authority on the given territory*/\r\n    hasAuthorityOnTerritory(authority: string,territory: string): Promise<boolean> {\r\n        if (!this.authenticated) {\r\n           return Promise.resolve(false);\r\n        }\r\n\r\n        return this.identity().then((id) => {\r\n            return Promise.resolve(id.authoritiesPerTerritory && id.authoritiesPerTerritory[territory] && id.authoritiesPerTerritory[territory].includes(authority));\r\n        }, () => {\r\n            return Promise.resolve(false);\r\n        });\r\n    }\r\n\r\n    /** check user identity*/\r\n    identity(force?: boolean): Promise<any> {\r\n        if (force === true) {\r\n            this.userIdentity = undefined;\r\n        }\r\n\r\n        // check and see if we have retrieved the userIdentity data from the server.\r\n        // if we have, reuse it by immediately resolving\r\n        if (this.userIdentity) {\r\n            return Promise.resolve(this.userIdentity);\r\n        }\r\n\r\n        // retrieve the userIdentity data from the server, update the identity object, and then resolve.\r\n        return this.account.get().toPromise().then((response) => {\r\n            const account = response;\r\n            if (account) {\r\n                this.userIdentity = account;\r\n                this.authenticated = true;\r\n            } else {\r\n                this.userIdentity = null;\r\n                this.authenticated = false;\r\n            }\r\n            this.authenticationState.next(this.userIdentity);\r\n            return this.userIdentity;\r\n        }).catch((err) => {\r\n            this.userIdentity = null;\r\n            this.authenticated = false;\r\n            this.authenticationState.next(this.userIdentity);\r\n            return null;\r\n        });\r\n    }\r\n\r\n    /** check whether current user is authenticated */\r\n    isAuthenticated(): boolean {\r\n        return this.authenticated;\r\n    }\r\n\r\n    /** check whether current user identity is resolved */\r\n    isIdentityResolved(): boolean {\r\n        return this.userIdentity !== undefined;\r\n    }\r\n\r\n    /** get current user authentication state */\r\n    getAuthenticationState(): Observable<any> {\r\n        return this.authenticationState.asObservable();\r\n    }\r\n\r\n\r\n}\r\n","import { Injector, Injectable } from '@angular/core';\r\nimport { HttpInterceptor, HttpRequest, HttpHandler, HttpEvent, HttpErrorResponse } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport { AuthService } from './auth.service';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport { Principal } from './principal.service';\r\n\r\n/** Interceptor for authentication expired response in API requests */\r\n@Injectable()\r\nexport class AuthExpiredInterceptor implements HttpInterceptor {\r\n\r\n    /** constructor */\r\n    constructor(\r\n        private router: Router,     \r\n        private authService: AuthService, \r\n        private principal: Principal\r\n    ) {}\r\n\r\n    /** request handler */\r\n    intercept(request: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\r\n        return next.handle(request).do((event: HttpEvent<any>) => {}, (err: any) => {\r\n            if (err instanceof HttpErrorResponse) {\r\n                if (err.status === 401) {                    \r\n                    this.authService.logout().subscribe();\r\n                    this.principal.authenticate(null);\r\n                    this.router.navigate(['/']);\r\n                }\r\n            }\r\n        });\r\n    }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { AuthService } from './auth.service';\r\nimport { Principal } from './principal.service';\r\n\r\n/** Login service*/\r\n@Injectable()\r\nexport class LoginService {\r\n    \r\n    /** constructor */\r\n    constructor(\r\n        private authServerProvider: AuthService, \r\n        private principal: Principal\r\n    ) {}\r\n\r\n    /**Login operation*/\r\n    login(credentials, callback?) {\r\n        const cb = callback || function() {};\r\n\r\n        return new Promise((resolve, reject) => {\r\n            this.authServerProvider.login(credentials).subscribe((data) => {\r\n                this.principal.identity(true).then((account) => {\r\n                    // After the login the language will be changed to\r\n                    // the language selected by the user during his registration\r\n                    resolve(data);\r\n                });\r\n                \r\n                \r\n                return cb();\r\n            }, (err) => {\r\n                this.logout();\r\n                reject(err);\r\n                return cb(err);\r\n            });\r\n        });\r\n    }\r\n    /**login with jwt token */\r\n    loginWithToken(jwt) {\r\n        return this.authServerProvider.loginWithToken(jwt);\r\n    }\r\n\r\n    /** logout operation */\r\n    logout() {\r\n       this.authServerProvider.logout().subscribe();\r\n       this.principal.authenticate(null);\r\n    }\r\n}\r\n","import {RestService} from '../angular-hal/src/lib/rest.service';\r\nimport { User } from './user.model';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Injectable, Injector } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\n\r\n/** User manager service */\r\n@Injectable()\r\nexport class UserService extends RestService<User> {\r\n  \r\n  /** API resource path */\r\n  public USER_API ='users';\r\n\r\n  /** constructor */\r\n  constructor(injector: Injector,private http: HttpClient) {\r\n    super(User, \"users\", injector);\r\n  }\r\n  \r\n  /** remove user*/\r\n  remove(item: User) {\r\n    return this.http.delete(item._links.self.href);\r\n   \r\n  }\r\n  \r\n  /** save user*/\r\n  save(item: any): Observable<any> {\r\n    let result: Observable<Object>;\r\n    if (item._links!=null) {\r\n      result = this.http.put(item._links.self.href, item);\r\n    } else {\r\n      result = this.http.post(this.USER_API , item);\r\n    }\r\n    return result;\r\n  }\r\n    \r\n  /** change password o given user id */\r\n  changePassword(id,item: any): Observable<any> {\r\n    let result: Observable<Object>;\r\n    result = this.http.post(this.resourceService.getResourceUrl(this.USER_API+\"/\"+id+\"/change-password\") , item);\r\n    return result;\r\n  }\r\n}\r\n","import {Resource} from '../angular-hal/src/lib/resource';\r\nimport { Territory } from '../territory/territory.model';\r\nimport { User } from './user.model';\r\n/**\r\n * User position model\r\n */\r\nexport class UserPosition extends Resource {\r\n  /** name */\r\n  public name: string;\r\n  /** email */\r\n  public email: string;\r\n  /** organization name*/\r\n  public organization: string;\r\n  /** system created date*/\r\n  public createdDate: any;\r\n  /** system dated date*/\r\n  public datedDate: any;\r\n  /** position territory*/\r\n  public territory: Territory;\r\n  /** user*/\r\n  public user: User;\r\n}\r\n","import {RestService} from '../angular-hal/src/lib/rest.service';\r\nimport { UserPosition } from './user-position.model';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Injectable, Injector } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\n\r\n/** User position manager service */\r\n@Injectable()\r\nexport class UserPositionService  extends RestService<UserPosition> {\r\n  \r\n\r\n  /** API resource path */\r\n  public USER_POSITION_API = 'user-positions';\r\n\r\n  /** constructor */\r\n  constructor(injector: Injector,private http: HttpClient) {\r\n    super(UserPosition, \"user-positions\", injector);\r\n  }\r\n  \r\n  /** remove user position*/\r\n  remove(item: UserPosition) {\r\n    return this.http.delete(item._links.self.href);\r\n   \r\n  }\r\n  \r\n  /** save user position*/\r\n  save(item: any): Observable<any> {\r\n    let result: Observable<Object>;\r\n    if (item._links!=null) {\r\n      result = this.http.put(item._links.self.href, item);\r\n      if (item.user !=null){\r\n          item.substituteRelation('user',item.user).subscribe(result => {\r\n      \r\n      }, error => console.error(error));\r\n      }\r\n      if (item.territory !=null){\r\n          item.substituteRelation('territory',item.territory).subscribe(result => {\r\n      \r\n      }, error => console.error(error));\r\n      }\r\n    } else {\r\n      item.territory = item.territory._links.self.href;\r\n      item.user = item.user._links.self.href;\r\n  \r\n      result = this.http.post(this.resourceService.getResourceUrl(this.USER_POSITION_API) , item);\r\n    }\r\n    return result;\r\n  }\r\n  \r\n}\r\n","import {Resource} from '../angular-hal/src/lib/resource';\r\nimport { Role } from '../role/role.model';\r\nimport { Territory } from '../territory/territory.model';\r\nimport { User } from './user.model';\r\n\r\n/**\r\n * User permission model\r\n */\r\nexport class UserConfiguration extends Resource {\r\n  /** role */  \r\n  public role: Role;\r\n  /** territory */ \r\n  public territory: Territory;\r\n  /** user */\r\n  public user: User;\r\n}\r\n","import {RestService} from '../angular-hal/src/lib/rest.service';\r\nimport { UserConfiguration } from './user-configuration.model';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Injectable, Injector } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\n\r\n/** User configuration manager service */\r\n@Injectable()\r\nexport class UserConfigurationService  extends RestService<UserConfiguration> {\r\n\r\n  /** API resource path */\r\n  public USER_CONFIGURATION_API = 'user-configurations';\r\n\r\n  /** constructor */\r\n  constructor(injector: Injector,private http: HttpClient) {\r\n    super(UserConfiguration, \"user-configurations\", injector);\r\n  }\r\n  \r\n  /** remove user configuration*/\r\n  remove(item: UserConfiguration) {\r\n    return this.http.delete(item._links.self.href);\r\n   \r\n  }\r\n  \r\n  /** save user configuration*/\r\n  save(item: any): Observable<any> {\r\n    let result: Observable<Object>;\r\n    if (item._links!=null) {\r\n      result = this.http.put(item._links.self.href, item);\r\n      if (item.user !=null){\r\n          item.substituteRelation('user',item.user).subscribe(result => {\r\n      \r\n      }, error => console.error(error));\r\n      }\r\n      if (item.territory !=null){\r\n          item.substituteRelation('territory',item.territory).subscribe(result => {\r\n      \r\n      }, error => console.error(error));\r\n      }\r\n      if (item.role !=null){\r\n          item.substituteRelation('role',item.role).subscribe(result => {\r\n      \r\n      }, error => console.error(error));\r\n      }\r\n    } else {\r\n      item.territory = item.territory._links.self.href;\r\n      item.role = item.role._links.self.href;\r\n      item.user = item.user._links.self.href;\r\n  \r\n      result = this.http.post(this.resourceService.getResourceUrl(this.USER_CONFIGURATION_API) , item);\r\n    }\r\n    return result;\r\n  }\r\n  \r\n}\r\n","import {Resource} from '../angular-hal/src/lib/resource';\r\nimport { TerritoryType } from './territory-type.model';\r\n\r\n/**\r\n * Territory model\r\n */\r\nexport class Territory extends Resource {\r\n  /** id */\r\n  public id: number;  \r\n  /** code */\r\n  public code: string;\r\n  /** name */\r\n  public name: string;\r\n  /** address*/\r\n  public territorialAuthorityAddress: string;\r\n  /** admin */\r\n  public territorialAuthorityName: string;\r\n  /** whether territory is blocked*/\r\n  public blocked: boolean;\r\n  /** comments*/\r\n  public comments: string;\r\n  /** system created date*/\r\n  public createdDate: any;\r\n  /** contact email */  \r\n  public territorialAuthorityEmail: string;\r\n  /** extension */\r\n  public extent: string;\r\n  /** logo image URL */\r\n  public territorialAuthorityLogo: string;\r\n  /** contact organization name */\r\n  // public organizationName: string;\r\n  /** scope*/\r\n  public scope: string;\r\n  /** type */  \r\n  public type: TerritoryType;\r\n  /** group type */\r\n  groupType: {\r\n    id: 0,\r\n    name: string\r\n  };\r\n  /** territory members*/\r\n  public members: Territory[];\r\n\r\n}\r\n","import { Territory } from './territory.model';\r\nimport { Injectable, Injector } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Observable } from 'rxjs/Observable';\r\nimport {RestService} from '../angular-hal/src/lib/rest.service';\r\n\r\n/** Territory manager service */\r\n@Injectable()\r\nexport class TerritoryService extends RestService<Territory> {\r\n  \r\n  /** API resource path */\r\n  public TERRITORY_API = 'territories';\r\n\r\n  /** constructor */\r\n  constructor(injector: Injector,private http: HttpClient) {\r\n    super(Territory, \"territories\", injector);\r\n  }\r\n  \r\n  /** remove territory*/\r\n  remove(item: Territory) {\r\n    return this.http.delete(item._links.self.href);\r\n   \r\n  }\r\n  \r\n  /** save territory*/\r\n  save(item: Territory): Observable<any> {\r\n    let result: Observable<Object>;\r\n    if (item.type!=null)\r\n      item.type = item.type._links.self.href;\r\n    if (item._links!=null) {\r\n      \r\n      result = this.http.put(item._links.self.href, item);\r\n    } else {\r\n      result = this.http.post(this.resourceService.getResourceUrl(this.TERRITORY_API) , item);\r\n    }\r\n    return result;\r\n  }\r\n  \r\n}\r\n","import {Resource} from '../angular-hal/src/lib/resource';\r\n\r\n/**\r\n * Territory type model\r\n */\r\nexport class TerritoryType extends Resource {\r\n   /** id */\r\n   public id: number;  \r\n  /** name */\r\n  public name: string;\r\n}\r\n","import { Territory } from './territory.model';\r\nimport { Injectable, Injector } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Observable } from 'rxjs/Observable';\r\nimport {RestService} from '../angular-hal/src/lib/rest.service';\r\nimport { TerritoryType } from './territory-type.model';\r\n\r\n/** TerritoryType manager service */\r\n@Injectable()\r\nexport class TerritoryTypeService extends RestService<TerritoryType> {\r\n  \r\n\r\n  /** API resource path */\r\n  public TERRITORYTYPE_API = 'territory-types';\r\n\r\n  /** constructor */\r\n  constructor(injector: Injector,private http: HttpClient) {\r\n    super(TerritoryType, \"territory-types\", injector);\r\n  }\r\n  \r\n  /** remove territory type*/\r\n  remove(item: TerritoryType) {\r\n    return this.http.delete(item._links.self.href);\r\n   \r\n  }\r\n  \r\n  /** save territory type*/\r\n  save(item: any): Observable<any> {\r\n    let result: Observable<Object>;\r\n    if (item._links!=null) {\r\n      result = this.http.put(item._links.self.href, item);\r\n    } else {\r\n      result = this.http.post(this.resourceService.getResourceUrl(this.TERRITORYTYPE_API) , item);\r\n    }\r\n    return result;\r\n  }\r\n  \r\n}\r\n","import {Resource} from '../angular-hal/src/lib/resource';\r\n\r\n/**\r\n * Territory type model\r\n */\r\nexport class TerritoryGroupType extends Resource {\r\n  /** id */\r\n  public id: number;  \r\n  /** name */\r\n  public name: string;\r\n}\r\n","import { TerritoryGroupType } from './territory-group-type.model';\r\nimport { Injectable, Injector } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Observable } from 'rxjs/Observable';\r\nimport {RestService} from '../angular-hal/src/lib/rest.service';\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class TerritoryGroupTypeService extends RestService<TerritoryGroupType> {\r\n  \r\n  /** API resource path */\r\n  public TERRITORYGROUPTYPE_API = 'territory-group-types';\r\n\r\n  /** constructor */\r\n  constructor(injector: Injector,private http: HttpClient) {\r\n    super(TerritoryGroupType, \"territory-group-types\", injector);\r\n  }\r\n  \r\n  /** remove territory*/\r\n  remove(item: TerritoryGroupType) {\r\n    return this.http.delete(item._links.self.href);\r\n   \r\n  }\r\n  \r\n  /** save territory*/\r\n  save(item: any): Observable<any> {\r\n    let result: Observable<Object>;\r\n    if (item._links!=null) {\r\n      result = this.http.put(item._links.self.href, item);\r\n    } else {\r\n      result = this.http.post(this.resourceService.getResourceUrl(this.TERRITORYGROUPTYPE_API) , item);\r\n    }\r\n    return result;\r\n  }\r\n  \r\n}","import {Resource} from '../angular-hal/src/lib/resource';\r\n\r\n/**\r\n * Role model\r\n */\r\nexport class Role extends Resource {\r\n  /** id */\r\n  public id: number;\r\n  /** name*/\r\n  public name: string;\r\n  /** comments*/\r\n  public description: string;\r\n\r\n}\r\n","import { Role } from './role.model';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Injectable, Injector } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport {RestService} from '../angular-hal/src/lib/rest.service';\r\n\r\n/** Role manager service */\r\n@Injectable()\r\nexport class RoleService extends RestService<Role> {\r\n  \r\n  /** API resource path */\r\n  public ROLE_API = 'roles';\r\n\r\n  /** constructor */\r\n  constructor(injector: Injector,private http: HttpClient) {\r\n    super(Role, \"roles\", injector);\r\n  }\r\n  \r\n  /** remove role*/\r\n  remove(item: Role) {\r\n    return this.http.delete(item._links.self.href);\r\n   \r\n  }\r\n  \r\n  /** save role*/\r\n  save(item: any): Observable<any> {\r\n    let result: Observable<Object>;\r\n    if (item._links!=null) {\r\n      result = this.http.put(item._links.self.href, item);\r\n    } else {\r\n      result = this.http.post(this.resourceService.getResourceUrl(this.ROLE_API) , item);\r\n    }\r\n    return result;\r\n  }\r\n  \r\n}\r\n","import {Resource} from '../angular-hal/src/lib/resource';\r\n/**\r\n * Connection model\r\n */\r\nexport class Connection extends Resource {\r\n  /** id */\r\n  public id: number;\r\n  /** name*/\r\n  public name: string;\r\n  /** type*/\r\n  public type: string;\r\n  /** user*/\r\n  public user: string;\r\n  /** password*/\r\n  public password: string;\r\n  /** connection string*/\r\n  public connectionString: string;\r\n\r\n}\r\n","import { Connection } from './connection.model';\r\nimport { Injectable, Injector } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Observable } from 'rxjs/Observable';\r\nimport {RestService} from '../angular-hal/src/lib/rest.service';\r\n\r\n/** Connection manager service */\r\n@Injectable()\r\nexport class ConnectionService extends RestService<Connection> {\r\n  \r\n\r\n  /** API resource path */\r\n  public CONNECTION_API = 'connections';\r\n\r\n  /** constructor */\r\n  constructor(injector: Injector,private http: HttpClient) {\r\n    super(Connection, \"connections\", injector);\r\n  }\r\n  \r\n  /** remove connection*/\r\n  remove(item: Connection) {\r\n    return this.http.delete(item._links.self.href);\r\n   \r\n  }\r\n  \r\n  /** save connection*/\r\n  save(item: Connection): Observable<any> {\r\n    let result: Observable<Object>;\r\n    if (item._links!=null) {\r\n      \r\n      result = this.http.put(item._links.self.href, item);\r\n    } else {\r\n      result = this.http.post(this.resourceService.getResourceUrl(this.CONNECTION_API) , item);\r\n    }\r\n    return result;\r\n  }\r\n  \r\n}\r\n","import {Resource} from '../angular-hal/src/lib/resource';\r\n\r\nimport { Connection } from '../connection/connection.model';\r\nimport { Role } from '../role/role.model';\r\nimport { TaskType } from './task-type.model';\r\nimport { TaskGroup } from './task-group.model';\r\nimport { TaskAvailability } from './task-availability.model';\r\nimport { TaskParameter } from './task-parameter.model';\r\n\r\n//FIXME ensure task creation in admin app upon initialization (as it is done with Roles and default Users)\r\n/** GEOADMIN_task id */\r\nexport const GEOADMIN_TREE_TASK_ID:string  = \"geoadmin\";\r\n\r\nimport { TaskUI } from './task-ui.model';\r\n/** Task model */\r\nexport class Task extends Resource {\r\n  /** id */\r\n  public id: number;\r\n  /** name */  \r\n  public name: string;\r\n  /** order*/\r\n  public order: Number;\r\n  /** system created date*/\r\n  public createdDate: any;\r\n  /** task group*/\r\n  public group: TaskGroup;\r\n  /** task type*/\r\n  public type: TaskType;\r\n  /** task UI*/\r\n  public ui: TaskUI;\r\n  /** parameters*/\r\n  public parameters: TaskParameter[];\r\n  /** connection*/\r\n  public connection: Connection;\r\n  /** roles*/\r\n  public roles: Role[];\r\n  /** availabilities*/\r\n  public availabilities: TaskAvailability[];\r\n}\r\n","import { Task } from './task.model';\r\nimport { Injectable, Injector } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Observable } from 'rxjs/Observable';\r\nimport {RestService} from '../angular-hal/src/lib/rest.service';\r\n\r\n/** Task manager service */\r\n@Injectable()\r\nexport class TaskService extends RestService<Task> {\r\n\r\n    /** API resource path */\r\n    public CONNECTION_API = 'tasks';\r\n\r\n    /** constructor */\r\n    constructor(injector: Injector, private http: HttpClient) {\r\n        super(Task, \"tasks\", injector);\r\n    }\r\n\r\n    /** remove task*/\r\n    remove(item: Task) {\r\n        return this.http.delete(item._links.self.href);\r\n    }\r\n    \r\n    /** save task*/\r\n    save(item: Task): Observable<any> {\r\n        let result: Observable<Object>;\r\n        const taskType = item.type;\r\n        const taskGroup = item.group;\r\n        let taskConnection = item.connection;\r\n        let taskUI = item.ui;\r\n        if (item._links != null) {\r\n            result = this.http.put(item._links.self.href, item);\r\n        } else {\r\n            result = this.http.post(this.resourceService.getResourceUrl(this.CONNECTION_API), item);\r\n        }\r\n        return result;\r\n    }\r\n\r\n}\r\n","import {Resource} from '../angular-hal/src/lib/resource';\r\n/**\r\n * Task type model\r\n */\r\nexport class TaskType extends Resource {\r\n  /** name*/  \r\n  public name: string;\r\n\r\n}\r\n","import { TaskType } from './task-type.model';\r\nimport { Injectable, Injector } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Observable } from 'rxjs/Observable';\r\nimport {RestService} from '../angular-hal/src/lib/rest.service';\r\n\r\n/** TaskType manager service */\r\n@Injectable()\r\nexport class TaskTypeService extends RestService<TaskType> {\r\n  \r\n\r\n  /** API resource path */\r\n  public CONNECTION_API = 'task-types';\r\n\r\n  /** constructor */\r\n  constructor(injector: Injector,private http: HttpClient) {\r\n    super(TaskType, \"task-types\", injector);\r\n  }\r\n  \r\n  /** remove task type*/\r\n  remove(item: TaskType) {\r\n    return this.http.delete(item._links.self.href);\r\n   \r\n  }\r\n  \r\n  /** save task type*/\r\n  save(item: TaskType): Observable<any> {\r\n    let result: Observable<Object>;\r\n    if (item._links!=null) {\r\n      \r\n      result = this.http.put(item._links.self.href, item);\r\n    } else {\r\n      result = this.http.post(this.resourceService.getResourceUrl(this.CONNECTION_API) , item);\r\n    }\r\n    return result;\r\n  }\r\n  \r\n}\r\n","import {Resource} from '../angular-hal/src/lib/resource';\r\n/**\r\n * Task group model\r\n */\r\nexport class TaskGroup extends Resource {\r\n  /** id */\r\n  public id: number;  \r\n  /** name*/  \r\n  public name: string;\r\n\r\n}\r\n","import { TaskGroup } from './task-group.model';\r\nimport { Injectable, Injector } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Observable } from 'rxjs/Observable';\r\nimport {RestService} from '../angular-hal/src/lib/rest.service';\r\n\r\n/** Task group manager service */\r\n@Injectable()\r\nexport class TaskGroupService extends RestService<TaskGroup> {\r\n  \r\n\r\n  /** API resource path */\r\n  public CONNECTION_API = 'task-groups';\r\n\r\n  /** constructor */\r\n  constructor(injector: Injector,private http: HttpClient) {\r\n    super(TaskGroup, \"task-groups\", injector);\r\n  }\r\n  \r\n  /** remove task group*/\r\n  remove(item: TaskGroup) {\r\n    return this.http.delete(item._links.self.href);\r\n   \r\n  }\r\n  \r\n  /** save task group*/\r\n  save(item: TaskGroup): Observable<any> {\r\n    let result: Observable<Object>;\r\n    if (item._links!=null) {\r\n      \r\n      result = this.http.put(item._links.self.href, item);\r\n    } else {\r\n      result = this.http.post(this.resourceService.getResourceUrl(this.CONNECTION_API) , item);\r\n    }\r\n    return result;\r\n  }\r\n  \r\n}\r\n","import {Resource} from '../angular-hal/src/lib/resource';\r\nimport {Task} from './task.model';  \r\n/**\r\n * Task parameter model\r\n */\r\nexport class TaskParameter extends Resource {\r\n  /** name*/  \r\n  public name: string;\r\n  \r\n  /** type*/\r\n  public type: string;\r\n    \r\n  /** value*/\r\n  public value: string;\r\n  \r\n  /** order*/  \r\n  public order: Number;\r\n  \r\n  /** task*/  \r\n  public task:Task;\r\n\r\n}\r\n","import { TaskParameter } from './task-parameter.model';\r\nimport { Injectable, Injector } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Observable } from 'rxjs/Observable';\r\nimport {RestService} from '../angular-hal/src/lib/rest.service';\r\n\r\n/** Task parameter manager service */\r\n@Injectable() \r\nexport class TaskParameterService extends RestService<TaskParameter> {\r\n  \r\n\r\n  /** API resource path */\r\n  public TASK_PARAMETER_API = 'task-parameters';\r\n\r\n  /** constructor */\r\n  constructor(injector: Injector,private http: HttpClient) {\r\n    super(TaskParameter, \"task-parameters\", injector);\r\n  }\r\n  \r\n  /** remove task parameter*/\r\n  remove(item: TaskParameter) {\r\n    return this.http.delete(item._links.self.href);\r\n   \r\n  }\r\n  \r\n  /** save task parameter*/\r\n  save(item: TaskParameter): Observable<any> {\r\n    let result: Observable<Object>;\r\n    if (item._links!=null) {\r\n      result = this.http.put(item._links.self.href, item);\r\n      if (item.task !=null){\r\n          item.substituteRelation('task',item.task).subscribe(result => {\r\n      \r\n      }, error => console.error(error));\r\n      }\r\n      \r\n    } else {\r\n      item.task = item.task._links.self.href;\r\n  \r\n      result = this.http.post(this.resourceService.getResourceUrl(this.TASK_PARAMETER_API) , item);\r\n    }\r\n    return result;\r\n  }\r\n  \r\n}\r\n","import {Resource} from '../angular-hal/src/lib/resource';\r\nimport { Territory } from '../territory/territory.model';\r\nimport { Task } from './task.model';\r\n/**\r\n * Task availability model\r\n */\r\nexport class TaskAvailability extends Resource {\r\n  /** territory*/\r\n  public territory: Territory;\r\n  /** task*/\r\n  public task: Task;\r\n}\r\n","import { TaskAvailability } from './task-availability.model';\r\nimport { Injectable, Injector } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Observable } from 'rxjs/Observable';\r\nimport {RestService} from '../angular-hal/src/lib/rest.service';\r\n\r\n/** Task availability manager service */\r\n@Injectable() \r\nexport class TaskAvailabilityService extends RestService<TaskAvailability> {\r\n  \r\n\r\n  /** API resource path */\r\n  public TASK_AVAILABILITY_API = 'task-availabilities';\r\n\r\n  /** constructor */\r\n  constructor(injector: Injector,private http: HttpClient) {\r\n    super(TaskAvailability, \"task-availabilities\", injector);\r\n  }\r\n  \r\n  /** remove task availability*/\r\n  remove(item: TaskAvailability) {\r\n    return this.http.delete(item._links.self.href);\r\n   \r\n  }\r\n  \r\n  /** save task availability*/\r\n  save(item: TaskAvailability): Observable<any> {\r\n    let result: Observable<Object>;\r\n    if (item._links!=null) {\r\n      result = this.http.put(item._links.self.href, item);\r\n      if (item.task !=null){\r\n          item.substituteRelation('task',item.task).subscribe(result => {\r\n      \r\n      }, error => console.error(error));\r\n      }\r\n      if (item.territory !=null){\r\n          item.substituteRelation('territory',item.territory).subscribe(result => {\r\n      \r\n      }, error => console.error(error));\r\n      }\r\n    } else {\r\n      item.territory = item.territory._links.self.href;\r\n      item.task = item.task._links.self.href;\r\n  \r\n      result = this.http.post(this.resourceService.getResourceUrl(this.TASK_AVAILABILITY_API) , item);\r\n    }\r\n    return result;\r\n  }\r\n  \r\n}\r\n","import {Resource} from '../angular-hal/src/lib/resource';\r\n/**\r\n * Task UI model\r\n */\r\nexport class TaskUI extends Resource {\r\n  /** name*/\r\n  public name: string;\r\n  \r\n  /** tooltip*/  \r\n  public tooltip: string;\r\n    \r\n  /** order*/ \r\n  public order: number;\r\n\r\n}\r\n","import { TaskUI } from './task-ui.model';\r\nimport { Injectable, Injector } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Observable } from 'rxjs/Observable';\r\nimport {RestService} from '../angular-hal/src/lib/rest.service';\r\n\r\n/** Task UI manager service */\r\n@Injectable()\r\nexport class TaskUIService extends RestService<TaskUI> {\r\n  \r\n\r\n  /** API resource path */\r\n  public CONNECTION_API = 'task-uis';\r\n\r\n  /** constructor */\r\n  constructor(injector: Injector,private http: HttpClient) {\r\n    super(TaskUI, \"task-uis\", injector);\r\n  }\r\n  \r\n  /** remove task UI*/\r\n  remove(item: TaskUI) {\r\n    return this.http.delete(item._links.self.href);\r\n   \r\n  }\r\n  \r\n  /** save task UI*/\r\n  save(item: TaskUI): Observable<any> {\r\n    let result: Observable<Object>;\r\n    if (item._links!=null) {      \r\n      result = this.http.put(item._links.self.href, item);\r\n    } else {\r\n      result = this.http.post(this.resourceService.getResourceUrl(this.CONNECTION_API) , item);\r\n    }\r\n    return result;\r\n  }\r\n  \r\n}\r\n","import {Resource} from '../angular-hal/src/lib/resource';\r\nimport {Connection} from '../connection/connection.model';\r\nimport {ServiceParameter} from './service-parameter.model';\r\n/**\r\n * Service model\r\n */\r\nexport class Service extends Resource {\r\n  /** id */\r\n  public id: number;\r\n  /** name*/\r\n  public name: string;\r\n    \r\n  /** type*/\r\n  public type: string;\r\n\r\n  /** url*/  \r\n  public serviceURL: string;\r\n\r\n  /** projections*/  \r\n  public supportedSRS: string;\r\n  \r\n  /** legend*/\r\n  public legend: string;\r\n\r\n  /** infoUrl*/  \r\n  public infoUrl: string;\r\n  \r\n  /** system created date*/\r\n  public createdDate: any;\r\n\r\n  /** connection*/\r\n  public connection: Connection;\r\n  \r\n  /** parameters*/  \r\n  public parameters: ServiceParameter[];\r\n}\r\n","import { Service } from './service.model';\r\nimport { Injectable, Injector } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Observable } from 'rxjs/Observable';\r\nimport {RestService} from '../angular-hal/src/lib/rest.service';\r\n\r\n/** Service manager service */\r\n@Injectable()\r\nexport class ServiceService extends RestService<Service> {\r\n\r\n  /** API resource path */\r\n  public SERVICE_API = 'services';\r\n\r\n  /** constructor */\r\n  constructor(injector: Injector,private http: HttpClient) {\r\n    super(Service, \"services\", injector);\r\n  }\r\n  \r\n  /** remove service*/\r\n  remove(item: Service) {\r\n    return this.http.delete(item._links.self.href);\r\n   \r\n  }\r\n  \r\n  /** save service*/\r\n  save(item: Service): Observable<any> {\r\n    let result: Observable<Object>;\r\n    let serviceConnection = item.connection;\r\n\r\n    if (item.connection!=null){\r\n        if (typeof item.connection._links!= 'undefined') { \r\n            item.connection = item.connection._links.self.href;\r\n        } else {\r\n            serviceConnection._links= {};\r\n            serviceConnection._links.self = {};\r\n            serviceConnection._links.self.href=\"\";\r\n        }        \r\n     }\r\n\r\n    if (item._links!=null) {\r\n      //update relations\r\n      delete item.connection;        \r\n      \r\n      if (serviceConnection._links.self.href==''){\r\n         item.deleteRelation('connection',serviceConnection).subscribe(result => {     \r\n\r\n          \r\n             }, error => console.error(error));\r\n          \r\n      } else {\r\n          item.substituteRelation('connection',serviceConnection).subscribe(result => {\r\n         \r\n\r\n      \r\n            }, error => console.error(error));           \r\n       } \r\n       \r\n         \r\n      result = this.http.put(item._links.self.href, item);\r\n\r\n           \r\n    } else {\r\n      result = this.http.post(this.resourceService.getResourceUrl(this.SERVICE_API) , item);\r\n    }\r\n    return result;\r\n  }\r\n  \r\n}\r\n","import {Resource} from '../angular-hal/src/lib/resource';\r\nimport {Service} from './service.model'; \r\n/**\r\n * Service parameter model\r\n */\r\nexport class ServiceParameter extends Resource {\r\n  /** name*/\r\n  public name: string;\r\n  \r\n  /** type*/\r\n  public type: string;\r\n    \r\n  /** value*/  \r\n  public value: string;\r\n  \r\n  /** service*/\r\n  public service: Service;\r\n\r\n}\r\n","import { ServiceParameter } from './service-parameter.model';\r\nimport { Injectable, Injector } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Observable } from 'rxjs/Observable';\r\nimport {RestService} from '../angular-hal/src/lib/rest.service';\r\n\r\n/** Service parameter manager service */\r\n@Injectable() \r\nexport class ServiceParameterService extends RestService<ServiceParameter> {\r\n\r\n  /** API resource path */\r\n  public SERVICE_PARAMETER_API = 'service-parameters';\r\n\r\n  /** constructor */\r\n  constructor(injector: Injector,private http: HttpClient) {\r\n    super(ServiceParameter, \"service-parameters\", injector);\r\n  }\r\n  \r\n  /** remove service parameter*/\r\n  remove(item: ServiceParameter) {\r\n    return this.http.delete(item._links.self.href);\r\n   \r\n  }\r\n  \r\n  /** save service parameter*/\r\n  save(item: ServiceParameter): Observable<any> {\r\n    let result: Observable<Object>;\r\n    if (item._links!=null) {\r\n      \r\n      \r\n      if (item.service !=null){\r\n          let service =  item.service;\r\n          delete item.service;\r\n          item.substituteRelation('service',service).subscribe(result => {            \r\n          \r\n      }, error => console.error(error));\r\n      }\r\n      result = this.http.put(item._links.self.href, item);\r\n      \r\n      \r\n    } else {\r\n      item.service = item.service._links.self.href;\r\n  \r\n      result = this.http.post(this.resourceService.getResourceUrl(this.SERVICE_PARAMETER_API) , item);\r\n    }\r\n    return result;\r\n  }\r\n  \r\n}\r\n","import {Resource} from '../angular-hal/src/lib/resource';\r\nimport {Service} from '../service/service.model';\r\nimport {Connection} from '../connection/connection.model';\r\nimport {CartographyAvailability} from './cartography-availability.model';\r\n/**\r\n * Cartography\r\n */\r\nexport class Cartography extends Resource {\r\n  /** id */\r\n  public id: number;  \r\n  /** name*/\r\n  public name: string;\r\n  \r\n  /** type*/\r\n  public type : string;\r\n\r\n  /** whether layer is visible*/\r\n  public visible: Boolean;\r\n\r\n  /** transparency*/ \r\n  public transparency: Number;\r\n\r\n  /** whether layer is queryable*/  \r\n  public queryable: Boolean;\r\n\r\n  /** whether layer is queryable*/ \r\n  public queryAct: Boolean;\r\n\r\n  /** query layer*/\r\n  public queryLay: string;\r\n\r\n  /** system created date*/\r\n  public createdDate: any;\r\n\r\n  /** order*/  \r\n  public order: Number; \r\n  \r\n  /** minimum scale*/\r\n  public minimumScale: Number;\r\n\r\n  /** maximum scale*/\r\n  public maximumScale: Number;\r\n\r\n  /** layers*/  \r\n  public layers: string;\r\n\r\n  /** service*/\r\n  public service : Service;\r\n  \r\n  /** connection*/\r\n  public connection: Connection;\r\n\r\n  /** availabilities*/\r\n  public availabilities : CartographyAvailability[];\r\n\r\n  /** whether layer is queryable*/ \r\n  public selectable: Boolean;\r\n\r\n  /** selection layer*/\r\n  public selectionLayer: string;\r\n\r\n  /** selection service*/  \r\n  public selectionService: Service;\r\n\r\n  /** legend tip*/  \r\n  public legendTip: string;\r\n  \r\n  /** legend url*/\r\n  public legendUrl: string;\r\n\r\n  /** whether layer is editable*/\r\n  public editable: Boolean;\r\n\r\n  /** metadata URL*/\r\n  public metadataUrl: string;\r\n\r\n  /** whether layer is themable*/\r\n  public themeable: Boolean;\r\n  \r\n  /** geometry type*/\r\n  public geometryType: string;\r\n  \r\n\r\n}\r\n","import { Cartography } from './cartography.model';\r\nimport { Injectable, Injector } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Observable } from 'rxjs/Observable';\r\nimport {RestService} from '../angular-hal/src/lib/rest.service';\r\n\r\n/** Cartography manager service */\r\n@Injectable()\r\nexport class CartographyService extends RestService<Cartography> {\r\n\r\n  /** API resource path */\r\n  public CARTOGRAPHY_API = 'cartographies';\r\n\r\n  /** constructor */\r\n  constructor(injector: Injector,private http: HttpClient) {\r\n    super(Cartography, \"cartographies\", injector);\r\n  }\r\n  \r\n  /** remove cartography*/\r\n  remove(item: Cartography) {\r\n    return this.http.delete(item._links.self.href);\r\n   \r\n  }\r\n  \r\n  /** save cartography*/\r\n  save(item: Cartography): Observable<any> {\r\n    let result: Observable<Object>;\r\n    let cartographyConnection = item.connection;\r\n\r\n    const cartographyService = item.service;\r\n    const cartographySelectionService = item.selectionService;\r\n    \r\n      \r\n    if (item.service!=null)\r\n      item.service = item.service._links.self.href;\r\n    if (item.selectionService!=null)\r\n      item.selectionService = item.selectionService._links.self.href;  \r\n    if (item.connection!=null){\r\n        if (typeof item.connection._links!= 'undefined') { \r\n            item.connection = item.connection._links.self.href;\r\n        } else {\r\n            cartographyConnection._links= {};\r\n            cartographyConnection._links.self = {};\r\n            cartographyConnection._links.self.href=\"\";\r\n        }        \r\n     }\r\n\r\n    if (item._links!=null) {\r\n        \r\n      //update relations\r\n      delete item.connection;\r\n      delete item.service;            \r\n      delete item.selectionService;\r\n      \r\n     if (cartographyConnection._links.self.href==''){\r\n         item.deleteRelation('connection',cartographyConnection).subscribe(result => {     \r\n         item.substituteRelation('service',cartographyService).subscribe(result => {\r\n          item.substituteRelation('selectionService',cartographySelectionService).subscribe(result => {\r\n      \r\n            }, error => console.error(error));           \r\n            }, error => console.error(error));\r\n          \r\n             }, error => console.error(error));\r\n          \r\n      } else {\r\n          item.substituteRelation('connection',cartographyConnection).subscribe(result => {\r\n          item.substituteRelation('service',cartographyService).subscribe(result => {\r\n           item.substituteRelation('selectionService',cartographySelectionService).subscribe(result => {\r\n      \r\n            }, error => console.error(error));           \r\n            }, error => console.error(error));\r\n         \r\n\r\n      \r\n            }, error => console.error(error));           \r\n       } \r\n         \r\n      result = this.http.put(item._links.self.href, item);\r\n\r\n           \r\n    } else {\r\n      result = this.http.post(this.resourceService.getResourceUrl(this.CARTOGRAPHY_API) , item);\r\n    }\r\n    return result;\r\n  }\r\n  \r\n}\r\n","import {Resource} from '../angular-hal/src/lib/resource';\r\nimport {Cartography} from './cartography.model';\r\nimport {Role} from '../role/role.model';\r\n/**\r\n * Cartography group\r\n */\r\nexport class CartographyGroup extends Resource {\r\n  /** id */\r\n  public id: number;  \r\n  /** name*/\r\n  public name: string;\r\n  /** type*/\r\n  public type: string;\r\n  /** members*/\r\n  public members: Cartography[];\r\n  /** roles*/\r\n  public roles: Role[];\r\n\r\n}\r\n","import { CartographyGroup } from './cartography-group.model';\r\nimport { Injectable, Injector } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Observable } from 'rxjs/Observable';\r\nimport {RestService} from '../angular-hal/src/lib/rest.service';\r\n\r\n/** CartographyGroup manager service */\r\n@Injectable()\r\nexport class CartographyGroupService extends RestService<CartographyGroup> {\r\n  \r\n\r\n  /** API resource path */\r\n  public CARTOGRAPHY_GROUP_API ='cartography-groups';\r\n\r\n  /** constructor */\r\n  constructor(injector: Injector,private http: HttpClient) {\r\n    super(CartographyGroup, \"cartography-groups\", injector);\r\n  }\r\n  \r\n  /** remove cartography group*/\r\n  remove(item: CartographyGroup) {\r\n    return this.http.delete(item._links.self.href);\r\n   \r\n  }\r\n  \r\n  /** save cartography group*/\r\n  save(item: CartographyGroup): Observable<any> {\r\n    let result: Observable<Object>;\r\n    if (item._links!=null) {\r\n      result = this.http.put(item._links.self.href, item);\r\n    } else {\r\n      result = this.http.post(this.resourceService.getResourceUrl(this.CARTOGRAPHY_GROUP_API) , item);\r\n    }\r\n    return result;\r\n  }\r\n  \r\n}\r\n","import {Resource} from '../angular-hal/src/lib/resource';\r\nimport { Territory } from '../territory/territory.model';\r\nimport { Cartography } from './cartography.model';\r\n/**\r\n * Cartography availability model\r\n */\r\nexport class CartographyAvailability extends Resource {\r\n  /** territory*/\r\n  public territory: Territory;\r\n  \r\n  /** system created date*/\r\n  public createdDate: any;\r\n  \r\n  /** cartography*/\r\n  public cartography: Cartography;\r\n}\r\n","import { CartographyAvailability } from './cartography-availability.model';\r\nimport { Injectable, Injector } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Observable } from 'rxjs/Observable';\r\nimport {RestService} from '../angular-hal/src/lib/rest.service';\r\n\r\n/** CartographyAvailability manager service */\r\n@Injectable() \r\nexport class CartographyAvailabilityService extends RestService<CartographyAvailability> {\r\n  \r\n\r\n  /** API resource path */\r\n  public CARTOGRAPHY_AVAILABILITY_API = 'cartography-availabilities';\r\n\r\n  /** constructor */\r\n  constructor(injector: Injector,private http: HttpClient) {\r\n    super(CartographyAvailability, \"cartography-availabilities\", injector);\r\n  }\r\n  \r\n  /** remove cartography availability*/\r\n  remove(item: CartographyAvailability) {\r\n    return this.http.delete(item._links.self.href);\r\n   \r\n  }\r\n  \r\n  /** save cartography availability*/\r\n  save(item: CartographyAvailability): Observable<any> {\r\n    let result: Observable<Object>;\r\n    if (item._links!=null) {\r\n      result = this.http.put(item._links.self.href, item);\r\n      if (item.cartography !=null){\r\n          item.substituteRelation('cartography',item.cartography).subscribe(result => {\r\n      \r\n      }, error => console.error(error));\r\n      }\r\n      if (item.territory !=null){\r\n          item.substituteRelation('territory',item.territory).subscribe(result => {\r\n      \r\n      }, error => console.error(error));\r\n      }\r\n    } else {\r\n      item.territory = item.territory._links.self.href;\r\n      item.cartography = item.cartography._links.self.href;\r\n  \r\n      result = this.http.post(this.resourceService.getResourceUrl(this.CARTOGRAPHY_AVAILABILITY_API) , item);\r\n    }\r\n    return result;\r\n  }\r\n  \r\n}\r\n","import {Resource} from '../angular-hal/src/lib/resource';\r\nimport {CartographyGroup} from './cartography-group.model';\r\n/**\r\n * Background model\r\n */\r\nexport class Background extends Resource {\r\n  /** id */\r\n  public id: number;  \r\n  \r\n  /** name*/\r\n  public name: string;\r\n\r\n  /** description*/\r\n  public description: string;\r\n  \r\n  /** whether background is active*/\r\n  public active: Boolean;\r\n  \r\n  /** system created date*/\r\n  public createdDate: any;\r\n\r\n  /** cartography group*/\r\n  public cartographyGroup: CartographyGroup;\r\n}\r\n","import { Background } from './background.model';\r\nimport { Injectable, Injector } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Observable } from 'rxjs/Observable';\r\nimport {RestService} from '../angular-hal/src/lib/rest.service';\r\n\r\n/** Background manager service */\r\n@Injectable()\r\nexport class BackgroundService extends RestService<Background> {\r\n\r\n  /** API resource path */\r\n  public BACKGROUND_API = 'backgrounds';\r\n\r\n  /** constructor */\r\n  constructor(injector: Injector,private http: HttpClient) {\r\n    super(Background, \"backgrounds\", injector);\r\n  }\r\n  \r\n  /** remove background*/\r\n  remove(item: Background) {\r\n    return this.http.delete(item._links.self.href);   \r\n  }\r\n  \r\n  /** save background*/\r\n  save(item: Background): Observable<any> {\r\n    let result: Observable<Object>;\r\n    let backgroundCartographyGroup = item.cartographyGroup;\r\n\r\n    if (item.cartographyGroup!=null){\r\n        if (typeof item.cartographyGroup._links!= 'undefined') { \r\n            item.cartographyGroup = item.cartographyGroup._links.self.href;\r\n        } else {\r\n            backgroundCartographyGroup._links= {};\r\n            backgroundCartographyGroup._links.self = {};\r\n            backgroundCartographyGroup._links.self.href=\"\";\r\n        }        \r\n     }\r\n\r\n    if (item._links!=null) {\r\n      //update relations\r\n      delete item.cartographyGroup;        \r\n      \r\n      if (backgroundCartographyGroup._links.self.href==''){\r\n         item.deleteRelation('cartographyGroup',backgroundCartographyGroup).subscribe(result => {     \r\n\r\n          \r\n             }, error => console.error(error));\r\n          \r\n      } else {\r\n          item.substituteRelation('cartographyGroup',backgroundCartographyGroup).subscribe(result => {\r\n         \r\n\r\n      \r\n            }, error => console.error(error));           \r\n       } \r\n       \r\n         \r\n      result = this.http.put(item._links.self.href, item);\r\n\r\n           \r\n    } else {\r\n      result = this.http.post(this.resourceService.getResourceUrl(this.BACKGROUND_API) , item);\r\n    }\r\n    return result;\r\n  }\r\n  \r\n}\r\n","import {Resource} from '../angular-hal/src/lib/resource';\r\nimport {TreeNode} from './tree-node.model';\r\nimport {Role} from '../role/role.model';    \r\n/**\r\n * Tree model\r\n */\r\nexport class Tree extends Resource {\r\n  /** id */\r\n  public id: number;\r\n  /** name */\r\n  public name: string;\r\n  /** nodes */\r\n  public nodes: TreeNode[];\r\n  /** available roles */\r\n  public availableRoles : Role[];\r\n\r\n}\r\n","import { Tree } from './tree.model';\r\nimport { Injectable, Injector } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Observable } from 'rxjs/Observable';\r\nimport {RestService} from '../angular-hal/src/lib/rest.service';\r\n\r\n/** Tree manager service */\r\n@Injectable()\r\nexport class TreeService extends RestService<Tree> {\r\n  \r\n  /** API resource path */\r\n  public TREE_API = 'trees';\r\n\r\n  /** constructor */\r\n  constructor(injector: Injector,private http: HttpClient) {\r\n    super(Tree, \"trees\", injector);\r\n  }\r\n  \r\n  /** remove tree*/\r\n  remove(item: Tree) {\r\n    return this.http.delete(item._links.self.href);\r\n   \r\n  }\r\n  \r\n  /** save tree*/\r\n  save(item: Tree): Observable<any> {\r\n    let result: Observable<Object>;\r\n    if (item._links!=null) {\r\n      \r\n      result = this.http.put(item._links.self.href, item);\r\n    } else {\r\n      result = this.http.post(this.resourceService.getResourceUrl(this.TREE_API) , item);\r\n    }\r\n    return result;\r\n  }\r\n  \r\n}\r\n","import {Resource} from '../angular-hal/src/lib/resource';\r\nimport {Cartography} from '../cartography/cartography.model';\r\nimport {Tree} from './tree.model';\r\n/**\r\n * Tree node model\r\n */\r\nexport class TreeNode extends Resource {\r\n  /** name */\r\n  public name: string;\r\n  /** tooltip*/\r\n  public tooltip: string;\r\n  /** order*/\r\n  public orden : number;\r\n  /** whether tree node is active*/\r\n  public active: boolean;\r\n  /** parent tree node */\r\n  public parent: TreeNode;\r\n  /** displayed cartography */  \r\n  public cartography: Cartography;\r\n  /** tree */  \r\n  public tree: Tree;\r\n\r\n}\r\n","import { TreeNode } from './tree-node.model';\r\nimport { Injectable, Injector } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Observable } from 'rxjs/Observable';\r\nimport {RestService} from '../angular-hal/src/lib/rest.service';\r\n\r\n/** Tree node manager service */\r\n@Injectable() \r\nexport class TreeNodeService extends RestService<TreeNode> {\r\n  \r\n  /** API resource path */\r\n  public TREE_NODE_API = 'tree-nodes';\r\n\r\n  /** constructor */\r\n  constructor(injector: Injector,private http: HttpClient) {\r\n    super(TreeNode, \"tree-nodes\", injector);\r\n  }\r\n  \r\n  /** remove tree node*/\r\n  remove(item: TreeNode) {\r\n    return this.http.delete(item._links.self.href);\r\n   \r\n  }\r\n  \r\n  /** save tree node*/\r\n  save(item: TreeNode): Observable<any> {\r\n    let result: Observable<Object>;\r\n    if (item._links!=null) {\r\n      const itemTree = item.tree;\r\n      const itemCartography = item.cartography;\r\n      const itemParent = item.parent;\r\n        \r\n      delete item.tree;\r\n      delete item.cartography;\r\n      delete item.parent;\r\n        \r\n      result = this.http.put(item._links.self.href, item);\r\n      if (itemTree !=null){\r\n          item.substituteRelation('tree',itemTree).subscribe(result => {\r\n      \r\n          }, error => console.error(error));\r\n      }\r\n      if (itemCartography !=null){\r\n          item.substituteRelation('cartography',itemCartography).subscribe(result => {\r\n      \r\n          }, error => console.error(error));\r\n      }\r\n      if (itemParent !=null){\r\n          item.substituteRelation('parent',itemParent).subscribe(result => {\r\n      \r\n          }, error => console.error(error));\r\n      }\r\n      \r\n    } else {\r\n      if (item.tree && item.tree._links && item.tree._links.self) {\r\n        item.tree = item.tree._links.self.href;\r\n      }\r\n      if (item.cartography && item.cartography._links && item.cartography._links.self) {\r\n        item.cartography = item.cartography._links.self.href;\r\n      }      \r\n      result = this.http.post(this.resourceService.getResourceUrl(this.TREE_NODE_API) , item);\r\n    }\r\n    return result;\r\n  }\r\n  \r\n}\r\n","import {Resource} from '../angular-hal/src/lib/resource';\r\nimport {Tree} from '../tree/tree.model';\r\nimport {Role} from '../role/role.model';\r\nimport {CartographyGroup} from '../cartography/cartography-group.model';\r\nimport {ApplicationParameter} from './application-parameter.model';\r\nimport {ApplicationBackground} from './application-background.model';\r\n\r\n//FIXME ensure application creation in admin app upon initialization (as it is done with Roles and default Users)\r\n/** Territorial appliction name */\r\nexport const TERRITORIAL_APP_NAME:string  = \"AplicaciÃ³n Territorial\";\r\n\r\n/**\r\n * Application model\r\n */\r\nexport class Application extends Resource {\r\n  /** id */\r\n  public id: number;  \r\n  \r\n  /** name*/\r\n  public name: string;\r\n\r\n  /** type*/\r\n  public type: string;\r\n  \r\n  /** title*/\r\n  public title: string;\r\n  \r\n  /** theme*/\r\n  public theme: string;\r\n  \r\n  /** system created date*/\r\n  public createdDate: any;\r\n  \r\n  /** available roles*/\r\n  public availableRoles : Role[];\r\n  \r\n  /** trees*/\r\n  public trees : Tree[];\r\n  \r\n  /** scales (comma-separated values)*/\r\n  public scales: string[];\r\n  \r\n  /** projections(comma-separated EPSG codes)*/\r\n  public srs: string;\r\n  \r\n  /** whether application tree will auto refresh*/  \r\n  public treeAutoRefresh: Boolean;\r\n\r\n  /** backgrounds*/\r\n  public backgrounds: ApplicationBackground[];\r\n\r\n  /** situation map*/\r\n  public situationMap: CartographyGroup;    \r\n  \r\n  /** parameters*/\r\n  public parameters: ApplicationParameter[];\r\n}\r\n","import { Application } from './application.model';\r\nimport { Injectable, Injector } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Observable } from 'rxjs/Observable';\r\nimport {RestService} from '../angular-hal/src/lib/rest.service';\r\n\r\n/** Application manager service */\r\n@Injectable()\r\nexport class ApplicationService extends RestService<Application> {\r\n  \r\n\r\n  /** API resource path */\r\n  public APPLICATION_API = 'applications';\r\n\r\n  /** constructor */\r\n  constructor(injector: Injector,private http: HttpClient) {\r\n    super(Application, \"applications\", injector);\r\n  }\r\n  \r\n  /** remove application*/\r\n  remove(item: Application) {\r\n    return this.http.delete(item._links.self.href);\r\n   \r\n  }\r\n  \r\n  /** save application*/\r\n  save(item: Application): Observable<any> {\r\n    let result: Observable<Object>;\r\n    let applicationSituationMap = item.situationMap;\r\n\r\n    if (item.situationMap!=null){\r\n        if (typeof item.situationMap._links!= 'undefined') { \r\n            item.situationMap = item.situationMap._links.self.href;\r\n        } else {\r\n            applicationSituationMap._links= {};\r\n            applicationSituationMap._links.self = {};\r\n            applicationSituationMap._links.self.href=\"\";\r\n        }        \r\n     }\r\n\r\n    if (item._links!=null) {\r\n      //update relations\r\n      delete item.situationMap;        \r\n      \r\n      if (applicationSituationMap._links.self.href==''){\r\n         item.deleteRelation('situationMap',applicationSituationMap).subscribe(result => {     \r\n             \r\n             }, error => console.error(error));\r\n          \r\n      } else {\r\n          item.substituteRelation('situationMap',applicationSituationMap).subscribe(result => {\r\n         \r\n      \r\n            }, error => console.error(error));           \r\n       } \r\n       \r\n         \r\n      result = this.http.put(item._links.self.href, item);\r\n\r\n           \r\n    } else {\r\n      result = this.http.post(this.resourceService.getResourceUrl(this.APPLICATION_API) , item);\r\n    }\r\n    return result;\r\n  }\r\n    \r\n    \r\n  \r\n}\r\n","import {Resource} from '../angular-hal/src/lib/resource';\r\nimport {Background} from '../cartography/background.model';\r\nimport {Application} from './application.model'; \r\n\r\n/**\r\n * Application background model\r\n */\r\nexport class ApplicationBackground extends Resource {\r\n  /** order*/\r\n  public order: Number;\r\n  \r\n  /** background*/\r\n  public background: Background;\r\n  \r\n  /** application*/\r\n  public application: Application;\r\n\r\n}\r\n","import { ApplicationBackground } from './application-background.model';\r\nimport { Injectable, Injector } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Observable } from 'rxjs/Observable';\r\nimport {RestService} from '../angular-hal/src/lib/rest.service';\r\n\r\n/** Application background manager service */\r\n@Injectable() \r\nexport class ApplicationBackgroundService extends RestService<ApplicationBackground> {\r\n  \r\n\r\n  /** API resource path */\r\n  public APPLICATION_BACKGROUND_API ='application-backgrounds';\r\n\r\n  /** constructor */\r\n  constructor(injector: Injector,private http: HttpClient) {\r\n    super(ApplicationBackground, \"application-backgrounds\", injector);\r\n  }\r\n  \r\n  /** remove application background*/\r\n  remove(item: ApplicationBackground) {\r\n    return this.http.delete(item._links.self.href);\r\n   \r\n  }\r\n  \r\n  /** save application background*/\r\n  save(item: ApplicationBackground): Observable<any> {\r\n    let result: Observable<Object>;\r\n    if (item._links!=null) {\r\n      result = this.http.put(item._links.self.href, item);\r\n      if (item.application !=null){\r\n          item.substituteRelation('application',item.application).subscribe(result => {\r\n      \r\n      }, error => console.error(error));\r\n      }\r\n      if (item.background !=null){\r\n          item.substituteRelation('background',item.background).subscribe(result => {\r\n      \r\n      }, error => console.error(error));\r\n      }\r\n      \r\n    } else {\r\n      item.application = item.application._links.self.href;\r\n      item.background = item.background._links.self.href;\r\n  \r\n      result = this.http.post(this.resourceService.getResourceUrl(this.APPLICATION_BACKGROUND_API) , item);\r\n    }\r\n    return result;\r\n  }\r\n  \r\n}\r\n","import {Resource} from '../angular-hal/src/lib/resource';\r\nimport {Application} from './application.model'; \r\n\r\n/**\r\n * Application parameter model \r\n */\r\nexport class ApplicationParameter extends Resource {\r\n  /** name*/\r\n  public name: string;\r\n  \r\n  /** type*/\r\n  public type: string;\r\n  \r\n  /** value*/    \r\n  public value: string;\r\n  \r\n  /** application*/\r\n  public application: Application;\r\n\r\n}\r\n","import { ApplicationParameter } from './application-parameter.model';\r\nimport { Injectable, Injector } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Observable } from 'rxjs/Observable';\r\nimport {RestService} from '../angular-hal/src/lib/rest.service';\r\n\r\n/** Application parameter manager service */\r\n@Injectable() \r\nexport class ApplicationParameterService extends RestService<ApplicationParameter> {\r\n  \r\n\r\n  /** API resource path */\r\n  public APPLICATION_PARAMETER_API = 'application-parameters';\r\n\r\n  /** constructor */\r\n  constructor(injector: Injector,private http: HttpClient) {\r\n    super(ApplicationParameter, \"application-parameters\", injector);\r\n  }\r\n  \r\n  /** remove application*/\r\n  remove(item: ApplicationParameter) {\r\n    return this.http.delete(item._links.self.href);\r\n   \r\n  }\r\n  \r\n  /** save application*/\r\n  save(item: ApplicationParameter): Observable<any> {\r\n    let result: Observable<Object>;\r\n    if (item._links!=null) {\r\n      result = this.http.put(item._links.self.href, item);\r\n      if (item.application !=null){\r\n          item.substituteRelation('application',item.application).subscribe(result => {\r\n      \r\n      }, error => console.error(error));\r\n      }\r\n      \r\n    } else {\r\n      item.application = item.application._links.self.href;\r\n  \r\n      result = this.http.post(this.resourceService.getResourceUrl(this.APPLICATION_PARAMETER_API) , item);\r\n    }\r\n    return result;\r\n  }\r\n  \r\n}\r\n","import {Resource} from '../angular-hal/src/lib/resource';\r\n/**\r\n * Connection model\r\n */\r\nexport class CodeList extends Resource {\r\n  /** id */\r\n  public id: number;\r\n  /** name*/\r\n  public codeListName: string;\r\n  /** type*/\r\n  public value: string;\r\n  /** user*/\r\n  public description: string;\r\n\r\n\r\n}\r\n","import { CodeList } from './codelist.model';\r\nimport { Injectable, Injector } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Observable } from 'rxjs/Observable';\r\nimport {RestService} from '../angular-hal/src/lib/rest.service';\r\n\r\n/** Connection manager service */\r\n@Injectable()\r\nexport class CodeListService extends RestService<CodeList> {\r\n  \r\n \r\n  /** API resource path */\r\n  public CODELIST_API = 'codelist-values';\r\n\r\n  /** constructor */\r\n  constructor(injector: Injector,private http: HttpClient) {\r\n    super(CodeList, \"codelist-values\", injector);\r\n  }\r\n  \r\n  /** remove connection*/\r\n  remove(item: CodeList) {\r\n    return this.http.delete(item._links.self.href);\r\n   \r\n  }\r\n  \r\n  /** save connection*/\r\n  save(item: CodeList): Observable<any> {\r\n    let result: Observable<Object>;\r\n    if (item._links!=null) {\r\n      \r\n      result = this.http.put(item._links.self.href, item);\r\n    } else {\r\n      result = this.http.post(this.resourceService.getResourceUrl(this.CODELIST_API ), item);\r\n    }\r\n    return result;\r\n  }\r\n  \r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { BehaviorSubject, Observable, of } from 'rxjs';\r\n\r\n/** Layer model: configure Layer data and displaying configuration */ \r\nexport class Layer {\r\n  // Display data\r\n  /** layer visibility*/  \r\n  visibility: boolean = false;\r\n  /** Transparency (Transparent) 0-1 (Opaque)*/\r\n  opacity: number = 1.0;\r\n\r\n  // Configuration data\r\n  /** title*/\r\n  title: string;\r\n  \r\n  /** Id to index*/\r\n  id: any;\r\n  \r\n  /** Service Name*/\r\n  serverName: string;\r\n\r\n  /** Service attributions*/\r\n  attributions: string = \"\";\r\n\r\n  /** Request format (image/jpg, ...)*/\r\n  format: string;\r\n  \r\n  /** Request service version*/\r\n  version:string;\r\n\r\n  /** Service url*/\r\n  url: string;\r\n\r\n  /** Is base layer?*/\r\n  isBaseLayer: boolean;\r\n\r\n  /** Request layer name*/\r\n  name: string;\r\n\r\n  /** Is tiled?*/\r\n  tiled: boolean;\r\n  \r\n  /** Description*/\r\n  desc: string = \"\";\r\n  \r\n  /**  Transparent request parameter?*/\r\n  url_transparent: string = \"true\";\r\n  \r\n  /** Request Background parameter color (Hexa)*/\r\n  url_bgcolor: string = \"0x000000\";\r\n  \r\n  /** Request Exception URL*/\r\n  url_exception: string;\r\n  \r\n  /** Extent for tiled services*/\r\n  extent: any = null;\r\n\r\n  /** Tile height (if not defined, the default map is taken)*/\r\n  tileHeight?:number;\r\n  \r\n  /** Tile width (if not defined, the default map is taken)*/\r\n  tileWidth?:number;\r\n  \r\n  /** Enabled for GetFeatureInfo requests (enabled to use the viewer features information tool)*/\r\n  queryable?:boolean = false;\r\n  \r\n  /** Minimum scale*/\r\n  minimumScale?:number;\r\n  \r\n  /** Maximum scale*/\r\n  maximumScale?:number;\r\n  \r\n  /** List of available CRS*/\r\n  projections?:string;\r\n  \r\n  /** Features information URL*/\r\n  infoUrl?:string;\r\n  \r\n  /** Metadata information URL*/\r\n  metadataUrl?:string;\r\n  \r\n  /** Legend URL*/\r\n  legendUrl?:string;\r\n  \r\n  /** Array of OptionalParameter object that defines other optional parameter-value pairs for the request (TIME ...)*/\r\n  optionalParameters?:Array<OptionalParameter>;\r\n}\r\n\r\n/** Optional parameter model: configure parameter-value pair to add to the request layer URL */\r\nexport class OptionalParameter {\r\n  /** key*/key:string;\r\n  /** value*/value:string;\r\n}\r\n\r\n/** Layer configuration model: modify the configuration of a layer when interacting with the map (make visible, move the layer ...) */\r\nexport class LayerConfiguration {\r\n  /** Identifier to index*/id: any;\r\n  /** Layer visibility*/visibility: boolean;\r\n  /** Layer transparency (Transparent) 0-1 (Opaque)*/opacity: number;\r\n  /** Layer position*/position: number;\r\n}\r\n\r\n/** Layer group model*/\r\nexport class LayerGroup {\r\n  /** initially activated (all visible layers)*/active?:boolean;\r\n  /** group name*/name?: String;\r\n  /** group id*/id: String;\r\n  /** array of child Layers*/layers: Array<Layer>;\r\n}\r\n\r\n/** Map options configuration model*/\r\nexport class MapOptionsConfiguration {\r\n  /** scales*/scales?: string;\r\n  /** projections*/projections?: string;\r\n  /** minimum scale*/minScale?:number;\r\n  /** maximum scale*/maxScale?:number;\r\n  /** extent*/extent?:any;\r\n  /** maximum extent*/maxExtent?:any;\r\n  /** tile width*/tileWidth?:number;\r\n  /** tile height*/tileHeight?:number;\r\n  /** parameters*/parameters?: Array<OptionalParameter>\r\n}\r\n\r\n/** Map component status model*/\r\nexport class MapComponentStatus {\r\n    /** loaded?*/loaded: boolean = false;\r\n}\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\n\r\n/** Map configuration manager service*/\r\nexport class MapConfigurationManagerService {\r\n  private layersSubject = new BehaviorSubject([]);\r\n  private layers: Array<Layer> = null;\r\n\r\n  private baseLayerGroupsSubject = new BehaviorSubject([]);\r\n  private baseLayerGroups: Array<LayerGroup> = null;\r\n\r\n  private layerConfigurationSubject = new BehaviorSubject([]);\r\n\r\n  private addLayersSubject = new BehaviorSubject([]);\r\n  private removeLayersSubject = new BehaviorSubject([]);\r\n\r\n  private situationMapConfigurationSubject = new BehaviorSubject([]);\r\n  private mapOptionsConfigurationSubject = new BehaviorSubject([]);\r\n\r\n  private mapComponentStatusSubject = new BehaviorSubject([]);\r\n\r\n  /** constructor*/\r\n  constructor() { \r\n   //\r\n  }\r\n  \r\n  /** layer count */\r\n  count = 0;\r\n\r\n  /** configure the overlay layers of the map, by passing as a parameter an array of objects of type Layer objects defining the layers to load.*/\r\n  loadLayersConfiguration(configuration) {\r\n    if (this.layers != null) {\r\n      this.clearLayers(false);\r\n    }\r\n    this.setLayers(configuration);\r\n  }\r\n  \r\n  /**configure the base layers of the map by passing as a parameter an array of objects of type LayerGroup each of them with the corresponding Layer objects defining the layers to load.*/\r\n  loadBaseLayersConfiguration(configuration) {\r\n    this.setBaseLayerGroups(configuration);\r\n  }\r\n\r\n  /** get base layer groups*/\r\n  getBaseLayerGroups(): Observable<LayerGroup[]> {\r\n    return this.baseLayerGroupsSubject.asObservable();\r\n  }\r\n\r\n  /** set base layer groups*/\r\n  setBaseLayerGroups(groups:Array<LayerGroup>) {\r\n    this.baseLayerGroups = groups;\r\n    this.refreshBaseLayerGroups();\r\n  }\r\n\r\n  private refreshBaseLayerGroups() {\r\n    // Send the new values so that all subscribers are updated\r\n    this.baseLayerGroupsSubject.next(this.baseLayerGroups);\r\n  }\r\n\r\n  /** get layers*/\r\n  getLayers(): Observable<Layer[]> {\r\n    return this.layersSubject.asObservable();\r\n  }\r\n\r\n  /** remove all layers from map*/\r\n  clearLayers(refresh:boolean) {\r\n    while(this.layers.length) {\r\n      this.layers.pop();\r\n    }\r\n    if (refresh) {\r\n      this.refreshLayers();\r\n    }\r\n  }\r\n\r\n  /** set layers*/\r\n  setLayers(layers:Array<Layer>) {\r\n    this.layers = layers;\r\n    this.refreshLayers();\r\n  }\r\n\r\n  /** add given layer to map*/\r\n  addLayer(layer:Layer) {\r\n    this.layers.push(layer);\r\n    this.refreshAddLayers(layer);\r\n  }\r\n\r\n  /** add given layer to map at given index*/\r\n  addLayerAt(layer:Layer, index:number) {\r\n    if (index == 0) {\r\n      this.layers = [layer].concat(this.layers);\r\n    } else if (index >= this.layers.length) {\r\n      this.layers.push(layer);\r\n    } else {\r\n      this.layers = this.layers.slice(0, index)\r\n                    .concat([layer])\r\n                    .concat(this.layers.slice(index, this.layers.length));\r\n    }\r\n    this.refreshAddLayers(layer);\r\n    this.refreshLayerConfiguration(layer.id, null, null, index);\r\n  }\r\n\r\n  /** remove given layer from map*/\r\n  removeLayer(layer:Layer) {\r\n    var index = this.layers.indexOf(layer);\r\n    this.removeLayerIndex(index);\r\n  }\r\n\r\n  /** remove layer with given id from map */\r\n  removeLayerId(id) {\r\n    var index = -1;\r\n    for (var i = 0, iLen = this.layers.length; i < iLen; i++) {\r\n      if (this.layers[i].id == id) {\r\n        index = i;\r\n        break;\r\n      }\r\n    }\r\n    this.removeLayerIndex(index);\r\n  }\r\n\r\n  /** remove layer at given index from map */\r\n  removeLayerIndex(index:number) {\r\n    var layer = this.layers[index];\r\n    this.layers.splice(index, 1);\r\n    this.refreshRemoveLayers(layer);\r\n  }\r\n\r\n  /** refresh layers */\r\n  private refreshLayers() {\r\n    // Send the new values so that all subscribers are updated\r\n    this.layersSubject.next(this.layers);\r\n  }\r\n\r\n  /** Observable for layers added */\r\n  getLayersAdded(): Observable<Layer[]> {\r\n    return this.addLayersSubject.asObservable();\r\n  }\r\n\r\n  private refreshAddLayers(layer:Layer) {\r\n    // Send the new values so that all subscribers are updated\r\n    this.addLayersSubject.next([layer]);\r\n  }\r\n\r\n  getLayersRemoved(): Observable<Layer[]> {\r\n    return this.removeLayersSubject.asObservable();\r\n  }\r\n\r\n  private refreshRemoveLayers(layer:Layer) {\r\n    // Send the new values so that all subscribers are updated\r\n    this.removeLayersSubject.next([layer]);\r\n  }\r\n\r\n  getLayerConfigurationListener(): Observable<LayerConfiguration[]> {\r\n    return this.layerConfigurationSubject.asObservable();\r\n  }\r\n\r\n  private getLayerIndexById(id:string):number{\r\n    var index = -1;\r\n    for (var i = 0, iLen = this.layers.length; i < iLen; i++) {\r\n      if (this.layers[i].id == id) {\r\n        index = i;\r\n        break;\r\n      }\r\n    }\r\n    return index;\r\n  }\r\n  \r\n  /** move layer with given id to the given index*/\r\n  moveLayer(id, index) {\r\n    var layerIndex = this.getLayerIndexById(id);\r\n    if (layerIndex != -1) {\r\n      var layer = this.layers.splice(layerIndex, 1);\r\n      this.layers = \r\n        this.layers.slice(0, index)\r\n        .concat(layer)\r\n        .concat(this.layers.slice(index, this.layers.length));\r\n    }\r\n    this.refreshLayerConfiguration(id, null, null, index);\r\n  }\r\n\r\n  /** change visibility of layer with given id to the given value*/\r\n  changeLayerVisibility(id, visibility) {\r\n    this.refreshLayerConfiguration(id, null, visibility, null);\r\n  }\r\n\r\n  /** change opacity of layer with given id to the given value*/\r\n  changeLayerOpacity(id, opacity) {\r\n    this.refreshLayerConfiguration(id, opacity, null, null);\r\n  }\r\n\r\n  private refreshLayerConfiguration(id, opacity, visibility, position) {\r\n    // Send the new values so that all subscribers are updated\r\n    var layer = new LayerConfiguration();\r\n    layer.id = id;\r\n    layer.opacity = opacity;\r\n    layer.visibility = visibility;\r\n    layer.position = position;\r\n    this.layerConfigurationSubject.next([layer]);\r\n  }\r\n\r\n  getSituationMapConfigurationListener(): Observable<Layer[]> {\r\n    return this.situationMapConfigurationSubject.asObservable();\r\n  }\r\n\r\n  /** configure the situation map of the map component by passing as a parameter an array of objects of type LayerGroup, each of them with the corresponding Layer objects defining the layers to load as situation map.*/\r\n  loadSituationMapConfiguration(layers:Array<Layer>) {\r\n    // Send the new values so that all subscribers are updated\r\n    this.situationMapConfigurationSubject.next(layers);\r\n  }\r\n\r\n  getMapOptionsConfigurationListener(): Observable<MapOptionsConfiguration[]> {\r\n    return this.mapOptionsConfigurationSubject.asObservable();\r\n  }\r\n\r\n  /** load map options configuration */\r\n  loadMapOptionsConfiguration(configuration:MapOptionsConfiguration) {\r\n    // Send the new values so that all subscribers are updated\r\n    this.mapOptionsConfigurationSubject.next([configuration]);\r\n  }\r\n\r\n  getMapComponentStatusListener(): Observable<MapComponentStatus[]> {\r\n    return this.mapComponentStatusSubject.asObservable();\r\n  }\r\n  \r\n  /** set map component status */\r\n  setMapComponentStatus(status:MapComponentStatus) {\r\n    //Notify the map component status\r\n    this.mapComponentStatusSubject.next([status]);\r\n  }\r\n\r\n}\r\n","import { Directive, Input, TemplateRef, ViewContainerRef } from '@angular/core';\r\nimport { Principal } from './principal.service';\r\n\r\n/**\r\n * @whatItDoes Conditionally includes an HTML element if current user has any\r\n * of the authorities passed as the `expression`.\r\n *\r\n * @howToUse\r\n * ```\r\n *     <some-element *sitmunHasAnyAuthority=\"'ROLE_ADMIN'\">...</some-element>\r\n *\r\n *     <some-element *sitmunHasAnyAuthority=\"['ROLE_ADMIN', 'ROLE_USER']\">...</some-element>\r\n * ```\r\n */\r\n@Directive({\r\n    selector: '[sitmunHasAnyAuthority]'\r\n})\r\nexport class HasAnyAuthorityDirective {\r\n    \r\n    /** authorities to check */\r\n    public authorities: string[]; \r\n    \r\n    /** constructor */\r\n    constructor(private principal: Principal, private templateRef: TemplateRef<any>, private viewContainerRef: ViewContainerRef) {\r\n    }\r\n    \r\n    /** territory to check authorities*/\r\n    @Input() territory: string;\r\n    \r\n    /** Set whether current user has any of the given authorities */\r\n    @Input()\r\n    set sitmunHasAnyAuthority(value: string|string[]) {\r\n        this.authorities = typeof value === 'string' ? [ <string> value ] : <string[]> value;\r\n        this.updateView();\r\n        // Get notified each time authentication state changes.\r\n        this.principal.getAuthenticationState().subscribe((identity) => this.updateView());\r\n    }\r\n    \r\n    /** update view */\r\n    private updateView(): void {\r\n        if (this.territory){\r\n        this.principal.hasAnyAuthorityOnTerritory(this.authorities,this.territory).then((result) => {\r\n            this.viewContainerRef.clear();\r\n            if (result) {\r\n                this.viewContainerRef.createEmbeddedView(this.templateRef);\r\n            }\r\n        });\r\n\r\n        } else {\r\n        this.principal.hasAnyAuthority(this.authorities).then((result) => {\r\n            this.viewContainerRef.clear();\r\n            if (result) {\r\n                this.viewContainerRef.createEmbeddedView(this.templateRef);\r\n            }\r\n        });\r\n        }\r\n    }\r\n}\r\n","import { Directive, Input, TemplateRef, ViewContainerRef } from '@angular/core';\r\nimport { Principal } from './principal.service';\r\n\r\n/**\r\n * @whatItDoes Conditionally includes an HTML element if current user has any\r\n * of the authorities passed as the `expression`.\r\n *\r\n * @howToUse\r\n * ```\r\n *     <some-element *sitmunHasAnyAuthority=\"'ROLE_ADMIN'\">...</some-element>\r\n *\r\n *     <some-element *sitmunHasAnyAuthority=\"['ROLE_ADMIN', 'ROLE_USER']\">...</some-element>\r\n * ```\r\n */\r\n@Directive({\r\n    selector: '[sitmunHasAnyAuthorityOnTerritory]'\r\n})\r\nexport class HasAnyAuthorityOnTerritoryDirective {\r\n\r\n    /** authorities to check */\r\n    public authorities: string[]; \r\n\r\n    /** territory to check authorities*/\r\n    public territory: string; \r\n\r\n    /** constructor */\r\n    constructor(private principal: Principal, private templateRef: TemplateRef<any>, private viewContainerRef: ViewContainerRef) {\r\n    }\r\n    \r\n    /** Set whether current user has any of the given authorities on territory */\r\n    @Input()\r\n    set sitmunHasAnyAuthorityOnTerritory(opts: any) {\r\n\r\n        this.authorities = typeof opts.authorities === 'string' ? [ <string> opts.authorities ] : <string[]> opts.authorities;\r\n        this.territory = opts.territory;\r\n        this.updateView();\r\n        // Get notified each time authentication state changes.\r\n        this.principal.getAuthenticationState().subscribe((identity) => this.updateView());\r\n    }\r\n    \r\n    /** update view */\r\n    private updateView(): void {\r\n        if (this.territory){\r\n        this.principal.hasAnyAuthorityOnTerritory(this.authorities,this.territory).then((result) => {\r\n            this.viewContainerRef.clear();\r\n            if (result) {\r\n                this.viewContainerRef.createEmbeddedView(this.templateRef);\r\n            }\r\n        });\r\n\r\n        } else {\r\n        this.principal.hasAnyAuthority(this.authorities).then((result) => {\r\n            this.viewContainerRef.clear();\r\n            if (result) {\r\n                this.viewContainerRef.createEmbeddedView(this.templateRef);\r\n            }\r\n        });\r\n        }\r\n    }\r\n}\r\n","import { NgModule, ModuleWithProviders } from '@angular/core';\r\n\r\nimport { CommonModule } from '@angular/common';\r\nimport {HttpClientModule, HTTP_INTERCEPTORS, HttpClient} from '@angular/common/http';\r\nimport { RouterModule } from '@angular/router';\r\n//import { AngularHalModule } from '../../lib/angular-hal';\r\nimport {CodeListService} from './codelist/codelist.service';\r\nimport {TerritoryService} from './territory/territory.service';\r\nimport {TerritoryTypeService} from './territory/territory-type.service';\r\nimport {TerritoryGroupTypeService} from './territory/territory-group-type.service';\r\nimport {UserPositionService} from './user/user-position.service';\r\nimport {UserConfigurationService} from './user/user-configuration.service';\r\nimport {RoleService} from './role/role.service';\r\nimport {UserService} from './user/user.service';\r\nimport {ConnectionService} from './connection/connection.service';\r\nimport {TaskService} from './task/task.service';\r\nimport {TaskTypeService} from './task/task-type.service';\r\nimport {TaskGroupService} from './task/task-group.service';\r\nimport {TaskParameterService} from './task/task-parameter.service';\r\nimport {TaskAvailabilityService} from './task/task-availability.service';\r\nimport {TaskUIService} from './task/task-ui.service';\r\nimport {ServiceService} from './service/service.service';\r\nimport {ServiceParameterService} from './service/service-parameter.service';\r\nimport {CartographyService} from './cartography/cartography.service';\r\nimport {CartographyAvailabilityService} from './cartography/cartography-availability.service';\r\nimport {CartographyGroupService} from './cartography/cartography-group.service';\r\nimport {BackgroundService} from './cartography/background.service';\r\nimport {TreeService} from './tree/tree.service';\r\nimport {TreeNodeService} from './tree/tree-node.service';\r\nimport {ApplicationService} from './application/application.service';\r\nimport {ApplicationParameterService} from './application/application-parameter.service';\r\nimport {ApplicationBackgroundService} from './application/application-background.service';\r\nimport { MapConfigurationManagerService } from './map/map-configuration-manager.service';\r\nimport { AuthService } from './auth/auth.service';\r\nimport { Principal } from './auth/principal.service';\r\nimport { AuthInterceptor } from './auth/auth.interceptor';\r\nimport { AuthExpiredInterceptor } from './auth/auth-expired.interceptor';\r\nimport { HasAnyAuthorityDirective } from './auth/has-any-authority.directive';\r\nimport { HasAnyAuthorityOnTerritoryDirective } from './auth/has-any-authority-on-territory.directive';\r\nimport { LoginService } from './auth/login.service';\r\nimport { AccountService } from './account/account.service';\r\nimport { UserPosition} from './user/user-position.model';\r\nimport {TranslateHttpLoader} from '@ngx-translate/http-loader';\r\nimport {TranslateLoader, TranslateModule} from '@ngx-translate/core';\r\n\r\n/** load i18n assets*/\r\nexport function createTranslateLoader(http: HttpClient) {\r\n  return new TranslateHttpLoader(http, './assets/i18n/', '.json');\r\n}\r\n\r\n\r\n/** SITMUN frontend core module */\r\n@NgModule({\r\n  imports: [\r\n    /*RouterModule,\r\n    HttpClientModule,\r\n    CommonModule,\r\n    AngularHalModule,*/\r\n    TranslateModule.forRoot({\r\n      loader: {\r\n        provide: TranslateLoader,\r\n        useFactory: (createTranslateLoader),\r\n        deps: [HttpClient]\r\n      }\r\n    }),\r\n  ],\r\n  declarations: [\r\n    HasAnyAuthorityDirective,\r\n    HasAnyAuthorityOnTerritoryDirective,\r\n  ],\r\n  exports: [\r\n    HasAnyAuthorityDirective,\r\n    HasAnyAuthorityOnTerritoryDirective,\r\n    TranslateModule\r\n  ]\r\n})\r\nexport class SitmunFrontendCoreModule {\r\n  static forRoot(): ModuleWithProviders {\r\n    return {\r\n      ngModule: SitmunFrontendCoreModule,\r\n      providers: [\r\n        CodeListService,\r\n        TerritoryService,\r\n        TerritoryTypeService,\r\n        TerritoryGroupTypeService,\r\n        RoleService,\r\n        AccountService,\r\n        AuthService,\r\n        UserService,\r\n        ConnectionService,\r\n        TaskService,\r\n        TaskTypeService,\r\n        TaskUIService,\r\n        TaskGroupService,\r\n        TaskParameterService,\r\n        TaskAvailabilityService,\r\n        ServiceService,\r\n        ServiceParameterService,\r\n        CartographyService,\r\n        CartographyGroupService,\r\n        CartographyAvailabilityService,\r\n        BackgroundService,\r\n        TreeService,\r\n        TreeNodeService,\r\n        ApplicationService,\r\n        ApplicationParameterService,\r\n        ApplicationBackgroundService,\r\n        AuthInterceptor,\r\n        AuthExpiredInterceptor,\r\n        Principal,\r\n        UserPositionService,\r\n        UserConfigurationService,\r\n        LoginService,\r\n        MapConfigurationManagerService,\r\n        {\r\n          provide: HTTP_INTERCEPTORS,\r\n          useClass: AuthInterceptor,\r\n          multi: true\r\n        }\r\n        , {\r\n          provide: HTTP_INTERCEPTORS,\r\n          useClass: AuthExpiredInterceptor,\r\n          multi: true\r\n        }\r\n      ]\r\n    };\r\n  }\r\n}\r\n\r\n","import {ModuleWithProviders, NgModule} from '@angular/core';\r\nimport {HttpClient, HttpClientModule} from '@angular/common/http';\r\nimport {HalParam, RestService} from './rest.service';\r\nimport {ExternalService} from './external.service';\r\nimport {ResourceService} from './resource.service';\r\nimport {ExternalConfigurationHandlerInterface} from './external-configuration.handler';\r\n\r\nimport 'rxjs';\r\nimport 'rxjs/add/observable/concat';\r\nimport 'rxjs/add/observable/defer';\r\nimport 'rxjs/add/observable/empty';\r\nimport 'rxjs/add/observable/from';\r\nimport 'rxjs/add/observable/fromEvent';\r\nimport 'rxjs/add/observable/merge';\r\nimport 'rxjs/add/observable/of';\r\nimport 'rxjs/add/observable/timer';\r\nimport 'rxjs/add/operator/concatMap';\r\nimport 'rxjs/add/operator/do';\r\nimport 'rxjs/add/operator/expand';\r\nimport 'rxjs/add/operator/filter';\r\nimport 'rxjs/add/operator/first';\r\nimport 'rxjs/add/operator/let';\r\nimport 'rxjs/add/operator/map';\r\nimport 'rxjs/add/operator/mergeMap';\r\nimport 'rxjs/add/operator/publishReplay';\r\nimport 'rxjs/add/operator/reduce';\r\nimport 'rxjs/add/operator/share';\r\nimport 'rxjs/add/operator/switchMap';\r\nimport 'rxjs/add/operator/take';\r\nimport 'rxjs/add/operator/takeWhile';\r\nimport 'rxjs/add/observable/throw';\r\nimport 'rxjs/add/operator/catch';\r\nimport {SubTypeBuilder} from './subtype-builder';\r\n\r\nexport {ExternalService} from './external.service';\r\nexport {RestService} from './rest.service';\r\nexport {Resource} from './resource';\r\nexport {ResourceArray} from './resource-array';\r\nexport {Sort} from './sort';\r\nexport {ResourceHelper} from './resource-helper';\r\nexport {ExternalConfiguration} from './ExternalConfiguration';\r\nexport {ExternalConfigurationHandlerInterface} from './external-configuration.handler';\r\nexport {HalOptions, HalParam} from './rest.service';\r\nexport {SubTypeBuilder} from './subtype-builder';\r\n\r\n\r\n/** Angular HAL module */\r\n@NgModule({\r\n    imports: [HttpClientModule],\r\n    declarations: [],\r\n    exports: [HttpClientModule],\r\n    providers: [\r\n        ExternalService,\r\n        HttpClient,\r\n        {\r\n            provide: ResourceService,\r\n            useClass: ResourceService,\r\n            deps: [ExternalService]\r\n        }]\r\n})\r\nexport class AngularHalModule {\r\n    static forRoot(): ModuleWithProviders {\r\n        return {\r\n            ngModule: AngularHalModule,\r\n            providers: [\r\n                ExternalService,\r\n                HttpClient,\r\n                {\r\n                    provide: ResourceService,\r\n                    useClass: ResourceService,\r\n                    deps: [ExternalService]\r\n                }\r\n            ]\r\n        };\r\n    }\r\n}"],"names":["map","catchError","observableThrowError","url.parse","tslib_1.__values","isNullOrUndefined","isPrimitive","url","HttpHeaders","HttpParams","observableOf","Injectable","tslib_1.__extends","Inject","mergeMap","Injector","HttpClient","Observable","Subject","router","HttpErrorResponse","Router","BehaviorSubject","Directive","TemplateRef","ViewContainerRef","Input","TranslateHttpLoader","HTTP_INTERCEPTORS","NgModule","TranslateModule","TranslateLoader","HttpClientModule"],"mappings":"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"}
