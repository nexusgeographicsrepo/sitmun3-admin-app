{"version":3,"sources":["null","ng://@sitmun/frontend-core/angular-hal/src/lib/resource-array.ts","ng://@sitmun/frontend-core/angular-hal/src/lib/resource-helper.ts","ng://@sitmun/frontend-core/angular-hal/src/lib/resource.ts","ng://@sitmun/frontend-core/user/user.model.ts","ng://@sitmun/frontend-core/angular-hal/src/lib/external.service.ts","ng://@sitmun/frontend-core/angular-hal/src/lib/resource.service.ts","ng://@sitmun/frontend-core/angular-hal/src/lib/rest.service.ts","ng://@sitmun/frontend-core/account/account.service.ts","ng://@sitmun/frontend-core/auth/auth.service.ts","ng://@sitmun/frontend-core/auth/auth.interceptor.ts","ng://@sitmun/frontend-core/auth/principal.service.ts","ng://@sitmun/frontend-core/auth/auth-expired.interceptor.ts","ng://@sitmun/frontend-core/auth/login.service.ts","ng://@sitmun/frontend-core/dashboard/dashboard.service.ts","ng://@sitmun/frontend-core/user/user.service.ts","ng://@sitmun/frontend-core/user/user-position.model.ts","ng://@sitmun/frontend-core/user/user-position.service.ts","ng://@sitmun/frontend-core/user/user-configuration.model.ts","ng://@sitmun/frontend-core/user/user-configuration.service.ts","ng://@sitmun/frontend-core/territory/territory.model.ts","ng://@sitmun/frontend-core/territory/territory.service.ts","ng://@sitmun/frontend-core/territory/territory-type.model.ts","ng://@sitmun/frontend-core/territory/territory-type.service.ts","ng://@sitmun/frontend-core/territory/territory-group-type.model.ts","ng://@sitmun/frontend-core/territory/territory-group-type.service.ts","ng://@sitmun/frontend-core/role/role.model.ts","ng://@sitmun/frontend-core/role/role.service.ts","ng://@sitmun/frontend-core/connection/connection.model.ts","ng://@sitmun/frontend-core/connection/connection.service.ts","ng://@sitmun/frontend-core/task/task.model.ts","ng://@sitmun/frontend-core/task/task.service.ts","ng://@sitmun/frontend-core/task/task-type.model.ts","ng://@sitmun/frontend-core/task/task-type.service.ts","ng://@sitmun/frontend-core/task/task-group.model.ts","ng://@sitmun/frontend-core/task/task-group.service.ts","ng://@sitmun/frontend-core/task/task-parameter.model.ts","ng://@sitmun/frontend-core/task/task-parameter.service.ts","ng://@sitmun/frontend-core/task/task-availability.model.ts","ng://@sitmun/frontend-core/task/task-availability.service.ts","ng://@sitmun/frontend-core/task/task-ui.model.ts","ng://@sitmun/frontend-core/task/task-ui.service.ts","ng://@sitmun/frontend-core/translation/translation.model.ts","ng://@sitmun/frontend-core/translation/translation.service.ts","ng://@sitmun/frontend-core/translation/language.model.ts","ng://@sitmun/frontend-core/translation/language.service.ts","ng://@sitmun/frontend-core/service/service.model.ts","ng://@sitmun/frontend-core/service/service.service.ts","ng://@sitmun/frontend-core/service/service-parameter.model.ts","ng://@sitmun/frontend-core/service/service-parameter.service.ts","ng://@sitmun/frontend-core/cartography/cartography.model.ts","ng://@sitmun/frontend-core/cartography/cartography.service.ts","ng://@sitmun/frontend-core/cartography/cartography-group.model.ts","ng://@sitmun/frontend-core/cartography/cartography-group.service.ts","ng://@sitmun/frontend-core/cartography/cartography-availability.model.ts","ng://@sitmun/frontend-core/cartography/cartography-availability.service.ts","ng://@sitmun/frontend-core/cartography/cartography-filter.model.ts","ng://@sitmun/frontend-core/cartography/cartography-filter.service.ts","ng://@sitmun/frontend-core/cartography/cartography-parameter.model.ts","ng://@sitmun/frontend-core/cartography/cartography-parameter.service.ts","ng://@sitmun/frontend-core/cartography/background.model.ts","ng://@sitmun/frontend-core/cartography/background.service.ts","ng://@sitmun/frontend-core/tree/tree.model.ts","ng://@sitmun/frontend-core/tree/tree.service.ts","ng://@sitmun/frontend-core/tree/tree-node.model.ts","ng://@sitmun/frontend-core/tree/tree-node.service.ts","ng://@sitmun/frontend-core/application/application.model.ts","ng://@sitmun/frontend-core/application/application.service.ts","ng://@sitmun/frontend-core/application/application-background.model.ts","ng://@sitmun/frontend-core/application/application-background.service.ts","ng://@sitmun/frontend-core/application/application-parameter.model.ts","ng://@sitmun/frontend-core/application/application-parameter.service.ts","ng://@sitmun/frontend-core/codelist/codelist.model.ts","ng://@sitmun/frontend-core/codelist/codelist.service.ts","ng://@sitmun/frontend-core/map/map-configuration-manager.service.ts","ng://@sitmun/frontend-core/auth/has-any-authority.directive.ts","ng://@sitmun/frontend-core/auth/has-any-authority-on-territory.directive.ts","ng://@sitmun/frontend-core/sitmun-frontend-core.module.ts","ng://@sitmun/frontend-core/angular-hal/src/lib/angular-hal.module.ts"],"names":["extendStatics","Object","setPrototypeOf","__proto__","Array","d","b","p","hasOwnProperty","__extends","__","this","constructor","prototype","create","__values","o","m","Symbol","iterator","i","call","next","length","value","done","__read","n","r","e","ar","push","error","ResourceArray","el","_this","result","type","response","sortInfo","ResourceHelper","createEmptyResult","_embedded","instantiateResourceCollection","next_uri","getHttp","get","getProxy","headers","pipe","map","init","catchError","observableThrowError","prev_uri","first_uri","last_uri","pageNumber","self_uri","replace","urlParsed","url.parse","query","replaceOrAdd","pageSize","toString","uri","concat","addSortInfo","sort","_i","arguments","size","_a","tslib_1.__values","_b","item","path","order","field","idx","indexOf","idxNextAmp","seachValue","substring","optionParams","params","options","param","append","key","_d","_e","s","sortString","resolveRelations","resource","isNullOrUndefined","className","find","isArray","array","forEach","element","isPrimitive","resourceArray","getClassName","obj","results","exec","objProto","classNames","getPrototypeOf","payload","builder","embeddedName","keys","embeddedClassName","items","items_1","items_1_1","instance","searchSubtypes","instantiateResource","totalElements","page","totalPages","number","_links","self","href","undefined","prev","first","last","subtypes","from","subtypeKey","toLowerCase","startsWith","subtype","entity","setProxyUri","proxy_uri","setRootUri","root_uri","getURL","addSlash","uriParsed","search","url","setHttp","http","getRootUri","HttpHeaders","Resource","_subtypes","getRelationArray","relation","HttpParams","observableOf","getRelation","data","lastIndexOf","realClassName","addRelation","header","post","updateRelation","patch","substituteRelation","put","substituteAllRelation","resources","deleteRelation","link","relationId","delete","deleteAllRelation","Injectable","User","_super","tslib_1.__extends","ExternalService","externalConfigurationService","getProxyUri","updateExternalConfigurationHandlerInterface","getExternalConfiguration","Inject","args","ResourceService","externalService","getAll","subType","getResourceUrl","setUrls","id","setUrlsResource","getBySelfLink","resourceLink","searchSingle","customQuery","getByRelation","getByRelationArray","count","observe","Number","body","selfResource","status","update","updateCollection","headersReq","set","hasNext","hasPrev","hasFirst","hasLast","sortElements","apply","__spread","endsWith","proxyUrl","rootUrl","RestService","injector","resourceService","handleError","mergeMap","notPaged","selfLink","totalElement","AccountService","ACCOUNT_API","save","changePassword","Injector","HttpClient","AuthService","getToken","sessionStorage","getItem","login","credentials","username","password","AUTH_API","authenticateSuccess","resp","ok","jwt","id_token","storeAuthenticationToken","bind","loginWithToken","Promise","resolve","reject","setItem","isLoggedIn","isLoggedOut","logout","Observable","observer","removeItem","complete","AuthInterceptor","intercept","request","includes","handle","token","clone","setHeaders","Authorization","Principal","account","Subject","authenticate","identity","userIdentity","authenticated","authenticationState","hasAnyAuthority","authorities","hasAnyAuthorityDirect","hasAnyAuthorityOnTerritory","territory","hasAnyAuthorityDirectOnTerritory","authoritiesPerTerritory","hasAuthority","authority","then","hasAuthorityOnTerritory","force","toPromise","catch","err","isAuthenticated","isIdentityResolved","getAuthenticationState","asObservable","AuthExpiredInterceptor","router","authService","principal","do","event","HttpErrorResponse","subscribe","navigate","Router","LoginService","authServerProvider","callback","cb","DashboardService","DASHBOARD_API","DASHBOARD_EMBEDDED","providedIn","UserService","remove","USER_API","UserPosition","UserPositionService","user","console","USER_POSITION_API","UserConfiguration","UserConfigurationService","role","roleChildren","USER_CONFIGURATION_API","Territory","TerritoryService","territoryGroupType","groupType","TERRITORY_API","TerritoryType","TerritoryTypeService","TERRITORYTYPE_API","TerritoryGroupType","TerritoryGroupTypeService","TERRITORYGROUPTYPE_API","Role","RoleService","ROLE_API","Connection","ConnectionService","CONNECTION_API","testConnection","Task","TaskService","group","connection","ui","TaskType","TaskTypeService","TaskGroup","TaskGroupService","TaskParameter","TaskParameterService","task","TASK_PARAMETER_API","TaskAvailability","TaskAvailabilityService","TASK_AVAILABILITY_API","TaskUI","TaskUIService","Translation","TranslationService","language","TRANSLATION_API","Language","LanguageService","LANGUAGES_API","Service","ServiceService","serviceConnection","SERVICE_API","ServiceParameter","ServiceParameterService","service","SERVICE_PARAMETER_API","Cartography","CartographyService","cartographyConnection","cartographyService","cartographySelectionService","selectionService","CARTOGRAPHY_API","CartographyGroup","CartographyGroupService","CARTOGRAPHY_GROUP_API","CartographyAvailability","CartographyAvailabilityService","cartography","CARTOGRAPHY_AVAILABILITY_API","CartographyFilter","CartographyFilterService","territorialLevel","CARTOGRAPHY_FILTER_API","CartographyParameter","CartographyParameterService","CARTOGRAPHY_PARAMETER_API","Background","BackgroundService","backgroundCartographyGroup","cartographyGroup","BACKGROUND_API","Tree","TreeService","TREE_API","TreeNode","TreeNodeService","itemTree","tree","itemCartography","itemParent","parent","TREE_NODE_API","Application","ApplicationService","applicationSituationMap","situationMap","APPLICATION_API","ApplicationBackground","ApplicationBackgroundService","application","background","APPLICATION_BACKGROUND_API","ApplicationParameter","ApplicationParameterService","APPLICATION_PARAMETER_API","CodeList","CodeListService","CODELIST_API","Layer","OptionalParameter","LayerConfiguration","LayerGroup","MapOptionsConfiguration","MapComponentStatus","MapConfigurationManagerService","BehaviorSubject","loadLayersConfiguration","configuration","layers","clearLayers","setLayers","loadBaseLayersConfiguration","setBaseLayerGroups","getBaseLayerGroups","baseLayerGroupsSubject","groups","baseLayerGroups","refreshBaseLayerGroups","getLayers","layersSubject","refresh","pop","refreshLayers","addLayer","layer","refreshAddLayers","addLayerAt","index","slice","refreshLayerConfiguration","removeLayer","removeLayerIndex","removeLayerId","iLen","splice","refreshRemoveLayers","getLayersAdded","addLayersSubject","getLayersRemoved","removeLayersSubject","getLayerConfigurationListener","layerConfigurationSubject","getLayerIndexById","moveLayer","layerIndex","changeLayerVisibility","visibility","changeLayerOpacity","opacity","position","getSituationMapConfigurationListener","situationMapConfigurationSubject","loadSituationMapConfiguration","getMapOptionsConfigurationListener","mapOptionsConfigurationSubject","loadMapOptionsConfiguration","getMapComponentStatusListener","mapComponentStatusSubject","setMapComponentStatus","HasAnyAuthorityDirective","templateRef","viewContainerRef","defineProperty","updateView","clear","createEmbeddedView","Directive","selector","TemplateRef","ViewContainerRef","Input","HasAnyAuthorityOnTerritoryDirective","opts","createTranslateLoader","TranslateHttpLoader","SitmunFrontendCoreModule","forRoot","ngModule","providers","provide","HTTP_INTERCEPTORS","useClass","multi","NgModule","imports","TranslateModule","loader","TranslateLoader","useFactory","ɵ0","deps","declarations","exports","AngularHalModule","HttpClientModule"],"mappings":"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","sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = Object.setPrototypeOf ||\r\n    ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n    function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = Object.assign || function __assign(t) {\r\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n        s = arguments[i];\r\n        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n    }\r\n    return t;\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator.throw(value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = y[op[0] & 2 ? \"return\" : op[0] ? \"throw\" : \"next\"]) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [0, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);  }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { if (o[n]) i[n] = function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; }; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator];\r\n    return m ? m.call(o) : typeof __values === \"function\" ? __values(o) : o[Symbol.iterator]();\r\n}","\r\nimport {throwError as observableThrowError} from 'rxjs';\r\n\r\nimport {catchError, map} from 'rxjs/operators';\r\nimport {Sort} from './sort';\r\nimport {ArrayInterface} from './array-interface';\r\nimport {ResourceHelper} from './resource-helper';\r\nimport {Resource} from './resource';\r\nimport * as url from 'url';\r\nimport {Observable} from 'rxjs';\r\n\r\n/** REST array of resource implementation */\r\nexport class ResourceArray<T extends Resource> implements ArrayInterface<T> {\r\n    /** sorting info */\r\n    public sortInfo: Sort[];\r\n    /** proxy url */\r\n    public proxyUrl: string;\r\n    /** root url */\r\n    public rootUrl: string;\r\n\r\n    /** self url */\r\n    public self_uri: string;\r\n    /** next resource url */\r\n    public next_uri: string;\r\n    /** previous resource url */\r\n    public prev_uri: string;\r\n    /** first resource url */\r\n    public first_uri: string;\r\n    /** last resource url */\r\n    public last_uri: string;\r\n\r\n    /** embedded array list */\r\n    public _embedded;\r\n\r\n    /** total number of elements in this array */\r\n    public totalElements = 0;\r\n    /** total number of pages in the response */\r\n    public totalPages = 1;\r\n    \r\n    /** page number in the response */\r\n    public pageNumber = 1;\r\n    \r\n    /** page size */\r\n    public pageSize: number;\r\n\r\n    /** array components */\r\n    public result: T[] = [];\r\n\r\n    /** push a new resource to the array */\r\n    push = (el: T) => {\r\n        this.result.push(el);\r\n    };\r\n\r\n    /** length of the array */\r\n    length = (): number => {\r\n        return this.result.length;\r\n    };\r\n\r\n    /** load array data from REST request */\r\n    private init = (type: { new(): T }, response: any, sortInfo: Sort[]): ResourceArray<T> => {\r\n        const result: ResourceArray<T> = ResourceHelper.createEmptyResult<T>(this._embedded);\r\n        result.sortInfo = sortInfo;\r\n        ResourceHelper.instantiateResourceCollection(type, response, result);\r\n        return result;\r\n    };\r\n\r\n    /** Load next page */\r\n    next = (type: { new(): T }): Observable<ResourceArray<T>> => {\r\n        if (this.next_uri) {\r\n            return ResourceHelper.getHttp().get(ResourceHelper.getProxy(this.next_uri), {headers: ResourceHelper.headers}).pipe(\r\n                map(response => this.init(type, response, this.sortInfo)),\r\n                catchError(error => observableThrowError(error)),);\r\n        }\r\n        return observableThrowError('no next defined');\r\n    };\r\n\r\n    /** Load previous page */\r\n    prev = (type: { new(): T }): Observable<ResourceArray<T>> => {\r\n        if (this.prev_uri) {\r\n            return ResourceHelper.getHttp().get(ResourceHelper.getProxy(this.prev_uri), {headers: ResourceHelper.headers}).pipe(\r\n                map(response => this.init(type, response, this.sortInfo)),\r\n                catchError(error => observableThrowError(error)),);\r\n        }\r\n        return observableThrowError('no prev defined');\r\n    };\r\n\r\n    /** Load first page */\r\n    first = (type: { new(): T }): Observable<ResourceArray<T>> => {\r\n        if (this.first_uri) {\r\n            return ResourceHelper.getHttp().get(ResourceHelper.getProxy(this.first_uri), {headers: ResourceHelper.headers}).pipe(\r\n                map(response => this.init(type, response, this.sortInfo)),\r\n                catchError(error => observableThrowError(error)),);\r\n        }\r\n        return observableThrowError('no first defined');\r\n    };\r\n\r\n    /** Load last page */\r\n    last = (type: { new(): T }): Observable<ResourceArray<T>> => {\r\n        if (this.last_uri) {\r\n            return ResourceHelper.getHttp().get(ResourceHelper.getProxy(this.last_uri), {headers: ResourceHelper.headers}).pipe(\r\n                map(response => this.init(type, response, this.sortInfo)),\r\n                catchError(error => observableThrowError(error)),);\r\n        }\r\n        return observableThrowError('no last defined');\r\n    };\r\n\r\n    /** Load page with given pageNumber*/\r\n    page = (type: { new(): T }, pageNumber: number): Observable<ResourceArray<T>> => {\r\n        this.self_uri = this.self_uri.replace('{?page,size,sort}', '');\r\n        this.self_uri = this.self_uri.replace('{&sort}', '');\r\n        let urlParsed = url.parse(ResourceHelper.getProxy(this.self_uri));\r\n        let query: string = ResourceArray.replaceOrAdd(urlParsed.query, 'size', this.pageSize.toString());\r\n        query = ResourceArray.replaceOrAdd(query, 'page', pageNumber.toString());\r\n\r\n\r\n        let uri = urlParsed.query ?\r\n            ResourceHelper.getProxy(this.self_uri).replace(urlParsed.query, query) : ResourceHelper.getProxy(this.self_uri).concat(query);\r\n        uri = this.addSortInfo(uri);\r\n        return ResourceHelper.getHttp().get(uri, {headers: ResourceHelper.headers}).pipe(\r\n            map(response => this.init(type, response, this.sortInfo)),\r\n            catchError(error => observableThrowError(error)),);\r\n    };\r\n\r\n    /** Sort collection based on given sort attribute */\r\n    sortElements = (type: { new(): T }, ...sort: Sort[]): Observable<ResourceArray<T>> => {\r\n        this.self_uri = this.self_uri.replace('{?page,size,sort}', '');\r\n        this.self_uri = this.self_uri.replace('{&sort}', '');\r\n        let uri = ResourceHelper.getProxy(this.self_uri).concat('?', 'size=', this.pageSize.toString(), '&page=', this.pageNumber.toString());\r\n        uri = this.addSortInfo(uri);\r\n        return ResourceHelper.getHttp().get(uri, {headers: ResourceHelper.headers}).pipe(\r\n            map(response => this.init(type, response, sort)),\r\n            catchError(error => observableThrowError(error)),);\r\n    };\r\n\r\n    /** Load page with given size */\r\n    size = (type: { new(): T }, size: number): Observable<ResourceArray<T>> => {\r\n        let uri = ResourceHelper.getProxy(this.self_uri).concat('?', 'size=', size.toString());\r\n        uri = this.addSortInfo(uri);\r\n        return ResourceHelper.getHttp().get(uri, {headers: ResourceHelper.headers}).pipe(\r\n            map(response => this.init(type, response, this.sortInfo)),\r\n            catchError(error => observableThrowError(error)),);\r\n    };\r\n\r\n    /** Add sort info to given URI */\r\n    private addSortInfo(uri: string) {\r\n        if (this.sortInfo) {\r\n            for (const item of this.sortInfo) {\r\n                uri = uri.concat('&sort=', item.path, ',', item.order);\r\n            }\r\n        }\r\n        return uri;\r\n    }\r\n\r\n    /** Add replace or add param value to query string */\r\n    private static replaceOrAdd(query: string, field: string, value: string): string {\r\n        if (query) {\r\n            let idx: number = query.indexOf(field);\r\n            let idxNextAmp: number = query.indexOf('&', idx) == -1 ? query.indexOf('/', idx) : query.indexOf('&', idx);\r\n\r\n            if (idx != -1) {\r\n                let seachValue = query.substring(idx, idxNextAmp);\r\n                query = query.replace(seachValue, field + '=' + value);\r\n            } else {\r\n                query = query.concat(\"&\" + field + '=' + value);\r\n            }\r\n        } else {\r\n            query = \"?\" + field + '=' + value;\r\n        }\r\n        return query;\r\n    }\r\n}\r\n","import {HttpClient, HttpHeaders, HttpParams} from '@angular/common/http';\r\nimport {Resource} from './resource';\r\nimport {ResourceArray} from './resource-array';\r\nimport {HalOptions} from './rest.service';\r\nimport {SubTypeBuilder} from './subtype-builder';\r\nimport {isNullOrUndefined, isPrimitive} from 'util';\r\nimport * as url from 'url';\r\n\r\n/** REST API access helper */\r\nexport class ResourceHelper {\r\n\r\n    /** HttpHeaders */\r\n    public static headers: HttpHeaders = new HttpHeaders();\r\n    /** Proxy URL */\r\n    private static proxy_uri: string = null;\r\n    /** Root URL */\r\n    private static root_uri: string = null;\r\n    /** HttpClient */\r\n    private static http: HttpClient = null;\r\n\r\n    /** get request headers */\r\n    /*public static get headers(): HttpHeaders {\r\n        if (isNullOrUndefined(this._headers))\r\n          ResourceHelper._headers = new HttpHeaders();\r\n        return ResourceHelper._headers;\r\n    }*/\r\n\r\n    /** set request headers */\r\n    /*public static set headers(headers: HttpHeaders) {\r\n      ResourceHelper._headers = headers;\r\n    }*/\r\n\r\n    /** get request option params */\r\n    static optionParams(params: HttpParams, options?: HalOptions): HttpParams {\r\n        if (options) {\r\n\r\n            if (options.params) {\r\n                for (const param of options.params) {\r\n                    params = params.append(param.key, param.value.toString());\r\n                }\r\n            }\r\n\r\n            if (options.size) {\r\n                params = params.append('size', options.size.toString());\r\n            }\r\n\r\n            if (options.sort) {\r\n                for (const s of options.sort) {\r\n                    let sortString = '';\r\n                    sortString = s.path ? sortString.concat(s.path) : sortString;\r\n                    sortString = s.order ? sortString.concat(',').concat(s.order) : sortString;\r\n                    params = params.append('sort', sortString);\r\n                }\r\n            }\r\n\r\n        }\r\n        return params;\r\n    }\r\n\r\n    /** resolve resource relations */\r\n    static resolveRelations(resource: Resource): Object {\r\n        const result: any = {};\r\n        for (const key in resource) {\r\n            if (!isNullOrUndefined(resource[key])) {\r\n                if (ResourceHelper.className(resource[key])\r\n                    .find((className: string) => className == 'Resource')) {\r\n                    if (resource[key]['_links'])\r\n                        result[key] = resource[key]['_links']['self']['href'];\r\n                } else if (Array.isArray(resource[key])) {\r\n                    let array: any[] = resource[key];\r\n                    if (array) {\r\n                        result[key] = new Array();\r\n                        array.forEach((element) => {\r\n                            if (isPrimitive(element)) {\r\n                                result[key].push(element);\r\n                            }\r\n                            else {\r\n                                result[key].push(this.resolveRelations(element));\r\n                            }\r\n                        });\r\n                    }\r\n                } else {\r\n                    result[key] = resource[key];\r\n                }\r\n            }\r\n        }\r\n        return result as Object;\r\n    }\r\n\r\n    /** create an empty resource from embedded data*/\r\n    static createEmptyResult<T extends Resource>(_embedded: string): ResourceArray<T> {\r\n        let resourceArray: ResourceArray<T> = new ResourceArray<T>();\r\n        resourceArray._embedded = _embedded;\r\n        return resourceArray;\r\n    }\r\n\r\n    /** get resource class name*/\r\n    static getClassName(obj: any): string {\r\n        var funcNameRegex = /function (.+?)\\(/;\r\n        var results = (funcNameRegex).exec(obj.constructor.toString());\r\n        return (results && results.length > 1) ? results[1] : '';\r\n    }\r\n\r\n    \r\n    /** get resource class name from a prototype object*/\r\n    static className(objProto: any): string[] {\r\n        let classNames = [];\r\n        let obj = Object.getPrototypeOf(objProto);\r\n        let className: string;\r\n\r\n        while ((className = ResourceHelper.getClassName(obj)) !== 'Object') {\r\n            classNames.push(className);\r\n            obj = Object.getPrototypeOf(obj);\r\n        }\r\n\r\n        return classNames;\r\n    }\r\n\r\n    /** instantiate a ResourceCollection from response embedded data*/\r\n    static instantiateResourceCollection<T extends Resource>(type: { new(): T }, payload: any,\r\n                                                             result: ResourceArray<T>, builder?: SubTypeBuilder,embeddedName?:String): ResourceArray<T> {\r\n        for (const embeddedClassName of Object.keys(payload[result._embedded])) {\r\n            if(!embeddedName || (embeddedName && embeddedClassName==embeddedName)){\r\n                let embedded: any = payload[result._embedded];\r\n                const items = embedded[embeddedClassName];\r\n                for (let item of items) {\r\n                    let instance: T = new type();\r\n                    instance = this.searchSubtypes(builder, embeddedClassName, instance);\r\n\r\n                    this.instantiateResource(instance, item);\r\n                    result.push(instance);\r\n                }\r\n            }\r\n        }\r\n\r\n        result.totalElements = payload.page ? payload.page.totalElements : result.length;\r\n        result.totalPages = payload.page ? payload.page.totalPages : 1;\r\n        result.pageNumber = payload.page ? payload.page.number : 1;\r\n        result.pageSize = payload.page ? payload.page.size : 20;\r\n\r\n        result.self_uri = payload._links && payload._links.self ? payload._links.self.href : undefined;\r\n        result.next_uri = payload._links && payload._links.next ? payload._links.next.href : undefined;\r\n        result.prev_uri = payload._links && payload._links.prev ? payload._links.prev.href : undefined;\r\n        result.first_uri = payload._links && payload._links.first ? payload._links.first.href : undefined;\r\n        result.last_uri = payload._links && payload._links.last ? payload._links.last.href : undefined;\r\n        return result;\r\n    }\r\n\r\n    /** search subtypes*/\r\n    static searchSubtypes<T extends Resource>(builder: SubTypeBuilder, embeddedClassName: string, instance: T) {\r\n        if (builder && builder.subtypes) {\r\n            let keys = builder.subtypes.keys();\r\n            Array.from(keys).forEach((subtypeKey: string) => {\r\n                if (embeddedClassName.toLowerCase().startsWith(subtypeKey.toLowerCase())) {\r\n                    let subtype: { new(): any } = builder.subtypes.get(subtypeKey);\r\n                    instance = new subtype();\r\n                }\r\n            });\r\n        }\r\n        return instance;\r\n    }\r\n\r\n    /** instantiate a Resource from response */\r\n    static instantiateResource<T extends Resource>(entity: T, payload: Object): T {\r\n        for (const p in payload) {\r\n            //TODO array init\r\n            /* if(entity[p].constructor === Array && isNullOrUndefined(payload[p]))\r\n                 entity[p] = [];\r\n             else*/\r\n            entity[p] = payload[p];\r\n        }\r\n        return entity;\r\n    }\r\n\r\n    /** set proxy URL */\r\n    static setProxyUri(proxy_uri: string) {\r\n        ResourceHelper.proxy_uri = proxy_uri;\r\n    }\r\n\r\n    /** set Root URI */\r\n    static setRootUri(root_uri: string) {\r\n        ResourceHelper.root_uri = root_uri;\r\n    }\r\n\r\n    /** get proxy URL */\r\n    public static getURL(): string {\r\n        return ResourceHelper.proxy_uri && ResourceHelper.proxy_uri != '' ?\r\n            ResourceHelper.addSlash(ResourceHelper.proxy_uri) :\r\n            ResourceHelper.addSlash(ResourceHelper.root_uri);\r\n    }\r\n\r\n    /** add slash to URI */\r\n    private static addSlash(uri: string): string {\r\n        let uriParsed = url.parse(uri);\r\n        if (isNullOrUndefined(uriParsed.search) && uri && uri[uri.length - 1] != '/')\r\n            return uri + '/';\r\n        return uri;\r\n    }\r\n\r\n    /** get proxy from URL */\r\n    public static getProxy(url: string): string {\r\n        if (!ResourceHelper.proxy_uri || ResourceHelper.proxy_uri == '')\r\n            return url;\r\n        return ResourceHelper.addSlash(url.replace(ResourceHelper.root_uri, ResourceHelper.proxy_uri));\r\n    }\r\n\r\n    /** set HttpClient*/\r\n    public static setHttp(http: HttpClient) {\r\n        ResourceHelper.http = http;\r\n    }\r\n\r\n    /** get HttpClient*/\r\n    public static getHttp(): HttpClient {\r\n        return ResourceHelper.http;\r\n    }\r\n\r\n    /** get root URI*/\r\n    static getRootUri() {\r\n        return ResourceHelper.root_uri;\r\n    }\r\n}\r\n","\r\nimport {throwError as observableThrowError, of as observableOf} from 'rxjs';\r\n\r\nimport {map} from 'rxjs/operators';\r\n\r\n\r\nimport {HttpParams} from '@angular/common/http';\r\nimport {ResourceHelper} from './resource-helper';\r\nimport {ResourceArray} from './resource-array';\r\nimport {isNullOrUndefined} from 'util';\r\n\r\nimport {HalOptions} from './rest.service';\r\nimport {SubTypeBuilder} from './subtype-builder';\r\nimport {Injectable} from '@angular/core';\r\nimport {Observable} from 'rxjs';\r\n\r\n/** Abstract resource class*/\r\n@Injectable()\r\nexport abstract class Resource {\r\n\r\n    /** proxy URL */\r\n    public proxyUrl: string;\r\n    /** root URL */\r\n    public rootUrl: string;\r\n\r\n    /** links */\r\n    public _links: any;\r\n    /** subtypes */\r\n    public _subtypes: Map<string, any>;\r\n\r\n    \r\n    /** get subtypes */    \r\n    public get subtypes(): Map<string, any> {\r\n        return this._subtypes;\r\n    }\r\n\r\n    /** set subtypes */\r\n    public set subtypes(_subtypes: Map<string, any>) {\r\n        this._subtypes = _subtypes;\r\n    }\r\n\r\n    /** constructor*/\r\n    constructor() {\r\n    }\r\n\r\n    /** Get collection of related resources */\r\n    public getRelationArray<T extends Resource>(type: { new(): T }, relation: string, _embedded?: string, options?: HalOptions, builder?: SubTypeBuilder): Observable<T[]> {\r\n\r\n        const params = ResourceHelper.optionParams(new HttpParams(), options);\r\n        const result: ResourceArray<T> = ResourceHelper.createEmptyResult<T>(isNullOrUndefined(_embedded) ? \"_embedded\" : _embedded);\r\n        if (!isNullOrUndefined(this._links) && !isNullOrUndefined(this._links[relation])) {\r\n            let observable = ResourceHelper.getHttp().get(ResourceHelper.getProxy(this._links[relation].href), {\r\n                headers: ResourceHelper.headers,\r\n                params: params\r\n            });\r\n            return observable.pipe(map(response => ResourceHelper.instantiateResourceCollection<T>(type, response, result, builder)),\r\n                map((array: ResourceArray<T>) => array.result),);\r\n        } else {\r\n            return observableOf([]);\r\n        }\r\n    }\r\n\r\n    /** Get related resource */\r\n    public getRelation<T extends Resource>(type: { new(): T }, relation: string, builder?: SubTypeBuilder): Observable<T> {\r\n        let result: T = new type();\r\n        if (!isNullOrUndefined(this._links) && !isNullOrUndefined(this._links[relation])) {\r\n            let observable = ResourceHelper.getHttp().get(ResourceHelper.getProxy(this._links[relation].href), {headers: ResourceHelper.headers});\r\n            return observable.pipe(map((data: any) => {\r\n                if (builder) {\r\n                    for (const embeddedClassName of Object.keys(data['_links'])) {\r\n                        if (embeddedClassName == 'self') {\r\n                            let href: string = data._links[embeddedClassName].href;\r\n                            let idx: number = href.lastIndexOf('/');\r\n                            let realClassName = href.replace(ResourceHelper.getRootUri(), \"\").substring(0, idx);\r\n                            result = ResourceHelper.searchSubtypes(builder, realClassName, result);\r\n                            break;\r\n                        }\r\n                    }\r\n                }\r\n                return ResourceHelper.instantiateResource(result, data);\r\n            }));\r\n        } else {\r\n            return observableOf(null);\r\n        }\r\n    }\r\n\r\n    /** Adds the given resource to the bound collection by the relation */\r\n    public addRelation<T extends Resource>(relation: string, resource: T): Observable<any> {\r\n        if (!isNullOrUndefined(this._links) && !isNullOrUndefined(this._links[relation])) {\r\n            let header = ResourceHelper.headers.append('Content-Type', 'text/uri-list');\r\n            return ResourceHelper.getHttp().post(ResourceHelper.getProxy(this._links[relation].href), resource._links.self.href, {headers: header});\r\n        } else {\r\n            return observableThrowError('no relation found');\r\n        }\r\n    }\r\n\r\n    /** Bind the given resource to this resource by the given relation*/\r\n    public updateRelation<T extends Resource>(relation: string, resource: T): Observable<any> {\r\n        if (!isNullOrUndefined(this._links) && !isNullOrUndefined(this._links[relation])) {\r\n            let header = ResourceHelper.headers.append('Content-Type', 'text/uri-list');\r\n            return ResourceHelper.getHttp().patch(ResourceHelper.getProxy(this._links[relation].href), resource._links.self.href, {headers: header});\r\n        } else {\r\n            return observableThrowError('no relation found');\r\n        }\r\n    }\r\n\r\n    /** Bind the given resource to this resource by the given relation*/\r\n    public substituteRelation<T extends Resource>(relation: string, resource: T): Observable<any> {\r\n        if (!isNullOrUndefined(this._links) && !isNullOrUndefined(this._links[relation])) {\r\n            let header = ResourceHelper.headers.append('Content-Type', 'text/uri-list');\r\n            return ResourceHelper.getHttp().put(ResourceHelper.getProxy(this._links[relation].href), resource._links.self.href, {headers: header});\r\n        } else {\r\n            return observableThrowError('no relation found');\r\n        }\r\n    }\r\n    \r\n    \r\n    /** Bind the given resource to this resource by the given relation*/\r\n    public substituteAllRelation<T extends Resource>(relation: string, resources: Resource[]): Observable<any> {\r\n        if (!isNullOrUndefined(this._links) && !isNullOrUndefined(this._links[relation])) {\r\n            let header = ResourceHelper.headers.append('Content-Type', 'text/uri-list');\r\n            return ResourceHelper.getHttp().put(ResourceHelper.getProxy(this._links[relation].href), resources.map((resource) => resource._links.self.href), {headers: header});\r\n        } else {\r\n            return observableThrowError('no relation found');\r\n        }\r\n    }\r\n\r\n\r\n\r\n    /** Unbind the resource with the given relation from this resource*/\r\n    public deleteRelation<T extends Resource>(relation: string, resource: T): Observable<any> {\r\n        if (!isNullOrUndefined(this._links) && !isNullOrUndefined(resource._links)) {\r\n            let link: string = resource._links['self'].href;\r\n            let idx: number = link.lastIndexOf('/') + 1;\r\n\r\n            if (idx == -1)\r\n                return observableThrowError('no relation found');\r\n\r\n            let relationId: string = link.substring(idx);\r\n            return ResourceHelper.getHttp().delete(ResourceHelper.getProxy(this._links[relation].href + '/' + relationId), {headers: ResourceHelper.headers});\r\n        } else {\r\n            return observableThrowError('no relation found');\r\n        }\r\n    }\r\n    \r\n    /** Unbind the resource with the given relation from this resource*/\r\n    public deleteAllRelation<T extends Resource>(relation: string): Observable<any> {\r\n        return ResourceHelper.getHttp().delete(ResourceHelper.getProxy(this._links[relation].href ), {headers: ResourceHelper.headers});\r\n        \r\n    }\r\n\r\n}","import {Resource} from '../angular-hal/src/lib/resource';\r\nimport { UserConfiguration } from './user-configuration.model';\r\nimport { UserPosition } from './user-position.model';\r\n\r\n/**\r\n * User model\r\n */\r\nexport class User extends Resource {\r\n  /** id */\r\n  public id: number;  \r\n  /** username */\r\n  public username: string;\r\n  /** password */\r\n  public password: string;\r\n  /** first name */\r\n  public firstName: string;\r\n  /** last name */\r\n  public lastName: string;\r\n  /** whether user is blocked */\r\n  public blocked: boolean;\r\n  /** whether user is administrator */\r\n  public administrator: boolean;\r\n  /** user positions */\r\n  public positions: UserPosition[];\r\n  /** user permissions */\r\n  public permissions: UserConfiguration[];\r\n}\r\n","import {HttpClient} from '@angular/common/http';\r\nimport {Inject, Injectable} from '@angular/core';\r\nimport {ResourceHelper} from './resource-helper';\r\nimport {ExternalConfigurationHandlerInterface} from './external-configuration.handler';\r\nimport {ExternalConfiguration} from './ExternalConfiguration';\r\n\r\n\r\n/** ExternalService */\r\n@Injectable()\r\nexport class ExternalService {\r\n\r\n    /** constructor */\r\n    constructor(@Inject('ExternalConfigurationService') private externalConfigurationService: ExternalConfigurationHandlerInterface) {\r\n        ResourceHelper.setProxyUri(externalConfigurationService.getProxyUri());\r\n        ResourceHelper.setRootUri(externalConfigurationService.getRootUri());\r\n        ResourceHelper.setHttp(externalConfigurationService.getHttp());\r\n    }\r\n\r\n    /** update ExternalConfigurationHandler */\r\n    public updateExternalConfigurationHandlerInterface(externalConfigurationService: ExternalConfigurationHandlerInterface) {\r\n\tthis.externalConfigurationService = externalConfigurationService;\r\n\r\n        ResourceHelper.setProxyUri(externalConfigurationService.getProxyUri());\r\n        ResourceHelper.setRootUri(externalConfigurationService.getRootUri());\r\n        ResourceHelper.setHttp(externalConfigurationService.getHttp());\r\n    }\r\n\r\n    /** get ExternalConfiguration */\r\n    public getExternalConfiguration(): ExternalConfiguration {\r\n        return this.externalConfigurationService.getExternalConfiguration();\r\n    }\r\n\r\n    /** get proxy URL */\r\n    public getProxyUri(): string {\r\n        return this.externalConfigurationService.getProxyUri();\r\n    }\r\n\r\n    /** get Root URI */\r\n    public getRootUri(): string {\r\n        return this.externalConfigurationService.getRootUri();\r\n    }\r\n\r\n    /** get URL */\r\n    public getURL(): string {\r\n        return ResourceHelper.getURL();\r\n    }\r\n\r\n    /** get HttpClient */\r\n    public getHttp(): HttpClient {\r\n        return ResourceHelper.getHttp();\r\n    }\r\n}\r\n","\r\nimport { throwError as observableThrowError } from 'rxjs';\r\n\r\nimport { catchError, map } from 'rxjs/operators';\r\nimport { Resource } from './resource';\r\nimport { ResourceHelper } from './resource-helper';\r\nimport { Injectable } from '@angular/core';\r\nimport { HttpParams, HttpResponse } from '@angular/common/http';\r\nimport { Sort } from './sort';\r\nimport { ResourceArray } from './resource-array';\r\nimport { ExternalService } from './external.service';\r\nimport { HalOptions } from './rest.service';\r\nimport { SubTypeBuilder } from './subtype-builder';\r\nimport { Observable } from 'rxjs';\r\n\r\n/** ResourceService */\r\n@Injectable()\r\nexport class ResourceService {\r\n\r\n\r\n    /** constructor */\r\n    constructor(private externalService: ExternalService) { }\r\n\r\n\r\n    /** get URL */\r\n    private static getURL(): string {\r\n        return ResourceHelper.getURL();\r\n    }\r\n\r\n    /** get all resources from a base URI of a given type */\r\n    public getAll<T extends Resource>(type: { new(): T }, resource: string, _embedded: string, options?: HalOptions, subType?: SubTypeBuilder, embeddedName?:String): Observable<ResourceArray<T>> {\r\n        const uri = this.getResourceUrl(resource).concat('?projection=view');\r\n        const params = ResourceHelper.optionParams(new HttpParams(), options);\r\n        const result: ResourceArray<T> = ResourceHelper.createEmptyResult<T>(_embedded);\r\n\r\n        this.setUrls(result);\r\n        result.sortInfo = options ? options.sort : undefined;\r\n        let observable = ResourceHelper.getHttp().get(uri, { headers: ResourceHelper.headers, params: params });\r\n        return observable.pipe(map(response => ResourceHelper.instantiateResourceCollection(type, response, result, subType,embeddedName)),\r\n            catchError(error => observableThrowError(error)));\r\n    }\r\n\r\n    /** get resource from a base URI and a given id */\r\n    public get<T extends Resource>(type: { new(): T }, resource: string, id: any): Observable<T> {\r\n        const uri = this.getResourceUrl(resource).concat('/', id, '?projection=view');\r\n        const result: T = new type();\r\n\r\n        this.setUrlsResource(result);\r\n        let observable = ResourceHelper.getHttp().get(uri, { headers: ResourceHelper.headers });\r\n        return observable.pipe(map(data => ResourceHelper.instantiateResource(result, data)),\r\n            catchError(error => observableThrowError(error)));\r\n    }\r\n\r\n    /** get resource from its selflink */\r\n    public getBySelfLink<T extends Resource>(type: { new(): T }, resourceLink: string): Observable<T> {\r\n        const result: T = new type();\r\n\r\n        this.setUrlsResource(result);\r\n        let observable = ResourceHelper.getHttp().get(ResourceHelper.getProxy(resourceLink), { headers: ResourceHelper.headers });\r\n        return observable.pipe(map(data => ResourceHelper.instantiateResource(result, data)),\r\n            catchError(error => observableThrowError(error)));\r\n    }\r\n\r\n    /** search resources from a given base path, query and options */\r\n    public search<T extends Resource>(type: { new(): T }, query: string, resource: string, _embedded: string, options?: HalOptions): Observable<ResourceArray<T>> {\r\n        const uri = this.getResourceUrl(resource).concat('/search/', query);\r\n        const params = ResourceHelper.optionParams(new HttpParams(), options);\r\n        const result: ResourceArray<T> = ResourceHelper.createEmptyResult<T>(_embedded);\r\n\r\n        this.setUrls(result);\r\n        let observable = ResourceHelper.getHttp().get(uri, { headers: ResourceHelper.headers, params: params });\r\n        return observable.pipe(map(response => ResourceHelper.instantiateResourceCollection(type, response, result)),\r\n            catchError(error => observableThrowError(error)));\r\n    }\r\n\r\n    /** search a single resource from a given base path, query and options */\r\n    public searchSingle<T extends Resource>(type: { new(): T }, query: string, resource: string, options?: HalOptions): Observable<T> {\r\n        const uri = this.getResourceUrl(resource).concat('/search/', query);\r\n        const params = ResourceHelper.optionParams(new HttpParams(), options);\r\n        const result: T = new type();\r\n\r\n        this.setUrlsResource(result);\r\n        let observable = ResourceHelper.getHttp().get(uri, { headers: ResourceHelper.headers, params: params });\r\n        return observable.pipe(map(response => ResourceHelper.instantiateResource(result, response)),\r\n            catchError(error => observableThrowError(error)));\r\n    }\r\n\r\n    /** search resources from a given base path, custom query and options */\r\n    public customQuery<T extends Resource>(type: { new(): T }, query: string, resource: string, _embedded: string, options?: HalOptions): Observable<ResourceArray<T>> {\r\n        const uri = this.getResourceUrl(resource + query);\r\n        const params = ResourceHelper.optionParams(new HttpParams(), options);\r\n        const result: ResourceArray<T> = ResourceHelper.createEmptyResult<T>(_embedded);\r\n\r\n        this.setUrls(result);\r\n        let observable = ResourceHelper.getHttp().get(uri, { headers: ResourceHelper.headers, params: params });\r\n        return observable.pipe(map(response => ResourceHelper.instantiateResourceCollection(type, response, result)),\r\n            catchError(error => observableThrowError(error)));\r\n    }\r\n\r\n    /** get resource given a relation link */\r\n    public getByRelation<T extends Resource>(type: { new(): T }, resourceLink: string): Observable<T> {\r\n        let result: T = new type();\r\n\r\n        this.setUrlsResource(result);\r\n        let observable = ResourceHelper.getHttp().get(resourceLink, { headers: ResourceHelper.headers });\r\n        return observable.pipe(map(data => ResourceHelper.instantiateResource(result, data)),\r\n            catchError(error => observableThrowError(error)));\r\n    }\r\n\r\n    /** get resource array given a relation link */\r\n    public getByRelationArray<T extends Resource>(type: { new(): T }, resourceLink: string, _embedded: string, builder?: SubTypeBuilder): Observable<ResourceArray<T>> {\r\n        const result: ResourceArray<T> = ResourceHelper.createEmptyResult<T>(_embedded);\r\n\r\n        this.setUrls(result);\r\n        let observable = ResourceHelper.getHttp().get(resourceLink, { headers: ResourceHelper.headers });\r\n        return observable.pipe(map(response => ResourceHelper.instantiateResourceCollection(type, response, result, builder)),\r\n            catchError(error => observableThrowError(error)));\r\n    }\r\n\r\n    /** count resources given a path */\r\n    public count(resource: string): Observable<number> {\r\n        const uri = this.getResourceUrl(resource).concat('/search/countAll');\r\n\r\n        return ResourceHelper.getHttp().get(uri, { headers: ResourceHelper.headers, observe: 'body' }).pipe(\r\n            map((response: Response) => Number(response.body)),\r\n            catchError(error => observableThrowError(error)));\r\n    }\r\n\r\n    /** create resource from self link and entity data*/\r\n    public create<T extends Resource>(selfResource: string, entity: T) {\r\n        const uri = ResourceHelper.getURL() + selfResource;\r\n        const payload = ResourceHelper.resolveRelations(entity);\r\n\r\n        this.setUrlsResource(entity);\r\n        let observable = ResourceHelper.getHttp().post(uri, payload, { headers: ResourceHelper.headers, observe: 'response' });\r\n        return observable.pipe(map((response: HttpResponse<string>) => {\r\n            if (response.status >= 200 && response.status <= 207)\r\n                return ResourceHelper.instantiateResource(entity, response.body);\r\n            else if (response.status == 500) {\r\n                let body: any = response.body;\r\n                return observableThrowError(body.error);\r\n            }\r\n        }), catchError(error => observableThrowError(error)));\r\n    }\r\n\r\n    /** update resource from a given entity data*/\r\n    public update<T extends Resource>(entity: T) {\r\n        const uri = ResourceHelper.getProxy(entity._links.self.href);\r\n        const payload = ResourceHelper.resolveRelations(entity);\r\n        this.setUrlsResource(entity);\r\n        let observable = ResourceHelper.getHttp().put(uri, payload, { headers: ResourceHelper.headers, observe: 'response' });\r\n        return observable.pipe(map((response: HttpResponse<string>) => {\r\n            if (response.status >= 200 && response.status <= 207)\r\n                return ResourceHelper.instantiateResource(entity, response.body);\r\n            else if (response.status == 500) {\r\n                let body: any = response.body;\r\n                return observableThrowError(body.error);\r\n            }\r\n        }), catchError(error => observableThrowError(error)));\r\n    }\r\n\r\n    /** update resource from a given entity data*/\r\n    public updateCollection<T extends Resource>(resourceArray: ResourceArray<T>, resourceLink: string) {\r\n        const uri = ResourceHelper.getProxy(resourceLink);\r\n        //const payload = ResourceHelper.resolveRelations(entity);\r\n        //this.setUrlsResource(entity);\r\n        var headersReq = ResourceHelper.headers;\r\n        headersReq.set(\"Content-Type\", \"text/uri-list\");\r\n        let observable = ResourceHelper.getHttp().put(uri, resourceArray, { headers: headersReq, observe: 'response' });\r\n        return observable.pipe(map((response: HttpResponse<string>) => {\r\n            if (response.status >= 200 && response.status <= 207)\r\n                return \"\";\r\n            else if (response.status == 500) {\r\n                let body: any = response.body;\r\n                return observableThrowError(body.error);\r\n            }\r\n        }), catchError(error => observableThrowError(error)));\r\n    }\r\n\r\n    /** patch resource from a given entity data*/\r\n    public patch<T extends Resource>(entity: T) {\r\n        const uri = ResourceHelper.getProxy(entity._links.self.href);\r\n        const payload = ResourceHelper.resolveRelations(entity);\r\n        this.setUrlsResource(entity);\r\n        let observable = ResourceHelper.getHttp().patch(uri, payload, { headers: ResourceHelper.headers, observe: 'response' });\r\n        return observable.pipe(map((response: HttpResponse<string>) => {\r\n            if (response.status >= 200 && response.status <= 207)\r\n                return ResourceHelper.instantiateResource(entity, response.body);\r\n            else if (response.status == 500) {\r\n                let body: any = response.body;\r\n                return observableThrowError(body.error);\r\n            }\r\n        }), catchError(error => observableThrowError(error)));\r\n    }\r\n\r\n    /** delete resource from a given entity data*/\r\n    public delete<T extends Resource>(entity: T): Observable<Object> {\r\n        const uri = ResourceHelper.getProxy(entity._links.self.href);\r\n        return ResourceHelper.getHttp().delete(uri, { headers: ResourceHelper.headers }).pipe(catchError(error => observableThrowError(error)));\r\n    }\r\n\r\n    /** whether a resource array has next page of results*/\r\n    public hasNext<T extends Resource>(resourceArray: ResourceArray<T>): boolean {\r\n        return resourceArray.next_uri != undefined;\r\n    }\r\n\r\n    /** whether a resource array has previous page of results*/\r\n    public hasPrev<T extends Resource>(resourceArray: ResourceArray<T>): boolean {\r\n        return resourceArray.prev_uri != undefined;\r\n    }\r\n\r\n    /** whether a resource array has first page of results*/\r\n    public hasFirst<T extends Resource>(resourceArray: ResourceArray<T>): boolean {\r\n        return resourceArray.first_uri != undefined;\r\n    }\r\n\r\n    /** whether a resource array has last page of results*/\r\n    public hasLast<T extends Resource>(resourceArray: ResourceArray<T>): boolean {\r\n        return resourceArray.last_uri != undefined;\r\n    }\r\n\r\n    /** get resource array next page of results*/\r\n    public next<T extends Resource>(resourceArray: ResourceArray<T>, type: { new(): T }): Observable<ResourceArray<T>> {\r\n        return resourceArray.next(type);\r\n    }\r\n\r\n    /** get resource array previous page of results*/\r\n    public prev<T extends Resource>(resourceArray: ResourceArray<T>, type: { new(): T }): Observable<ResourceArray<T>> {\r\n        return resourceArray.prev(type);\r\n    }\r\n\r\n    /** get resource array first page of results*/\r\n    public first<T extends Resource>(resourceArray: ResourceArray<T>, type: { new(): T }): Observable<ResourceArray<T>> {\r\n        return resourceArray.first(type);\r\n    }\r\n\r\n    /** get resource array last page of results*/\r\n    public last<T extends Resource>(resourceArray: ResourceArray<T>, type: { new(): T }): Observable<ResourceArray<T>> {\r\n        return resourceArray.last(type);\r\n    }\r\n\r\n    /** get resource array page of results given a page number*/\r\n    public page<T extends Resource>(resourceArray: ResourceArray<T>, type: { new(): T }, id: number): Observable<ResourceArray<T>> {\r\n        return resourceArray.page(type, id);\r\n    }\r\n\r\n    /** sort resource array with a given sorting params */\r\n    public sortElements<T extends Resource>(resourceArray: ResourceArray<T>, type: { new(): T }, ...sort: Sort[]): Observable<ResourceArray<T>> {\r\n        return resourceArray.sortElements(type, ...sort);\r\n    }\r\n\r\n    /** get resource array size*/\r\n    public size<T extends Resource>(resourceArray: ResourceArray<T>, type: { new(): T }, size: number): Observable<ResourceArray<T>> {\r\n        return resourceArray.size(type, size);\r\n    }\r\n\r\n    /** get resource URL from a given path*/\r\n    public getResourceUrl(resource?: string): string {\r\n        let url = ResourceService.getURL();\r\n        if (!url.endsWith('/')) {\r\n            url = url.concat('/');\r\n        }\r\n        if (resource) {\r\n            return url.concat(resource);\r\n        }\r\n        return url;\r\n    }\r\n\r\n    /** set proxy and root urls of given resource array */\r\n    private setUrls<T extends Resource>(result: ResourceArray<T>) {\r\n        result.proxyUrl = this.externalService.getProxyUri();\r\n        result.rootUrl = this.externalService.getRootUri();\r\n    }\r\n\r\n    /** set proxy and root urls of given resource */\r\n    private setUrlsResource<T extends Resource>(result: T) {\r\n        result.proxyUrl = this.externalService.getProxyUri();\r\n        result.rootUrl = this.externalService.getRootUri();\r\n    }\r\n}\r\n","import {of as observableOf, throwError as observableThrowError} from 'rxjs';\r\nimport {map, mergeMap} from 'rxjs/operators';\r\nimport {Resource} from './resource';\r\nimport {ResourceArray} from './resource-array';\r\nimport {Sort} from './sort';\r\nimport {ResourceService} from './resource.service';\r\nimport {SubTypeBuilder} from './subtype-builder';\r\nimport {isNullOrUndefined} from 'util';\r\nimport {Observable} from 'rxjs';\r\nimport {Injector} from \"@angular/core\";\r\n\r\n/** HAL param data model */\r\nexport type HalParam = { key: string, value: string | number | boolean };\r\n/** HAL option data model */\r\nexport type HalOptions = { notPaged?: boolean, size?: number, sort?: Sort[], params?: HalParam[] };\r\n\r\n/** REST API access interface */\r\nexport class RestService<T extends Resource> {\r\n    /** resource type */\r\n    private type: any;\r\n    /** resource path */\r\n    private resource: string;\r\n    /** resource array */\r\n    public resourceArray: ResourceArray<T>;\r\n    /** resource service */\r\n    public resourceService: ResourceService;\r\n    /** _embedded field name */\r\n    private _embedded: string = '_embedded';\r\n\r\n    /** constructor */\r\n    constructor(type: { new(): T },\r\n                resource: string,\r\n                private injector: Injector,\r\n                _embedded?: string) {\r\n        this.type = type;\r\n        this.resource = resource;\r\n        this.resourceService = injector.get(ResourceService);\r\n        if (!isNullOrUndefined(_embedded))\r\n            this._embedded = _embedded;\r\n    }\r\n\r\n    /** error handler */\r\n    protected handleError(error: any):Observable<never> {\r\n        return RestService.handleError(error);\r\n    }\r\n\r\n    /** error handler */\r\n    protected static handleError(error: any):Observable<never> {\r\n        return observableThrowError(error);\r\n    }\r\n\r\n    /** get all resources with optional options an subType params */\r\n    public getAll(options?: HalOptions, subType?: SubTypeBuilder, embeddedName?:String): Observable<T[]> {\r\n        return this.resourceService.getAll(this.type, this.resource, this._embedded, options, subType,embeddedName).pipe(\r\n            mergeMap((resourceArray: ResourceArray<T>) => {\r\n                if (options && options.notPaged && !isNullOrUndefined(resourceArray.first_uri)) {\r\n                    options.notPaged = false;\r\n                    options.size = resourceArray.totalElements;\r\n                    return this.getAll(options);\r\n                } else {\r\n                    this.resourceArray = resourceArray;\r\n                    return observableOf(resourceArray.result);\r\n                }\r\n            }));\r\n    }\r\n\r\n    /** get resource from a given id */\r\n    public get(id: any): Observable<T> {\r\n        return this.resourceService.get(this.type, this.resource, id);\r\n    }\r\n\r\n    /** get resource from self link */\r\n    public getBySelfLink(selfLink: string): Observable<T> {\r\n        return this.resourceService.getBySelfLink(this.type, selfLink);\r\n    }\r\n\r\n    /** search resources from a given query string and optional options params */\r\n    public search(query: string, options?: HalOptions): Observable<T[]> {\r\n        return this.resourceService.search(this.type, query, this.resource, this._embedded, options).pipe(\r\n            mergeMap((resourceArray: ResourceArray<T>) => {\r\n                if (options && options.notPaged && !isNullOrUndefined(resourceArray.first_uri)) {\r\n                    options.notPaged = false;\r\n                    options.size = resourceArray.totalElements;\r\n                    return this.search(query, options);\r\n                } else {\r\n                    this.resourceArray = resourceArray;\r\n                    return observableOf(resourceArray.result);\r\n                }\r\n            }));\r\n    }\r\n\r\n    /** search resource from a given query string and optional options params */\r\n    public searchSingle(query: string, options?: HalOptions): Observable<T> {\r\n        return this.resourceService.searchSingle(this.type, query, this.resource, options);\r\n    }\r\n\r\n    /** search resources from a given custom query string and optional options params */\r\n    public customQuery(query: string, options?: HalOptions): Observable<T[]> {\r\n        return this.resourceService.customQuery(this.type, query, this.resource, this._embedded, options).pipe(\r\n            mergeMap((resourceArray: ResourceArray<T>) => {\r\n                if (options && options.notPaged && !isNullOrUndefined(resourceArray.first_uri)) {\r\n                    options.notPaged = false;\r\n                    options.size = resourceArray.totalElements;\r\n                    return this.customQuery(query, options);\r\n                } else {\r\n                    this.resourceArray = resourceArray;\r\n                    return observableOf(resourceArray.result);\r\n                }\r\n            }));\r\n    }\r\n\r\n\r\n    /** get resource array given a relation link */\r\n    public getByRelationArray(relation: string, builder?: SubTypeBuilder): Observable<T[]> {\r\n        return this.resourceService.getByRelationArray(this.type, relation, this._embedded, builder).pipe(\r\n            map((resourceArray: ResourceArray<T>) => {\r\n                this.resourceArray = resourceArray;\r\n                return resourceArray.result;\r\n            }));\r\n    }\r\n\r\n    /** get resource given a relation link */\r\n    public getByRelation(relation: string): Observable<T> {\r\n        return this.resourceService.getByRelation(this.type, relation);\r\n    }\r\n\r\n    /** count resources given a path */\r\n    public count(): Observable<number> {\r\n        return this.resourceService.count(this.resource);\r\n    }\r\n\r\n    /** create resource from self link and entity data*/\r\n    public create(entity: T) {\r\n        return this.resourceService.create(this.resource, entity);\r\n    }\r\n\r\n    /** update resource from a given entity data*/\r\n    public update(entity: T) {\r\n        return this.resourceService.update(entity);\r\n    }\r\n\r\n    /** patch resource from a given entity data*/\r\n    public patch(entity: T) {\r\n        return this.resourceService.patch(entity);\r\n    }\r\n\r\n    /** delete resource from a given entity data*/\r\n    public delete(entity: T): Observable<Object> {\r\n        return this.resourceService.delete(entity);\r\n    }\r\n\r\n    /** get total number of elements of resource array */\r\n    public totalElement(): number {\r\n        if (this.resourceArray && this.resourceArray.totalElements)\r\n            return this.resourceArray.totalElements;\r\n        return 0;\r\n    }\r\n\r\n    /** whether a resource array has first page of results*/\r\n    public hasFirst(): boolean {\r\n        if (this.resourceArray)\r\n            return this.resourceService.hasFirst(this.resourceArray);\r\n        return false;\r\n    }\r\n\r\n    /** whether a resource array has next page of results*/\r\n    public hasNext(): boolean {\r\n        if (this.resourceArray)\r\n            return this.resourceService.hasNext(this.resourceArray);\r\n        return false;\r\n    }\r\n\r\n    /** whether a resource array has previous page of results*/\r\n    public hasPrev(): boolean {\r\n        if (this.resourceArray)\r\n            return this.resourceService.hasPrev(this.resourceArray);\r\n        return false;\r\n    }\r\n\r\n    /** whether a resource array has last page of results*/\r\n    public hasLast(): boolean {\r\n        if (this.resourceArray)\r\n            return this.resourceService.hasLast(this.resourceArray);\r\n        return false;\r\n    }\r\n\r\n    /** get resource array next page of results*/\r\n    public next(): Observable<T[]> {\r\n        if (this.resourceArray)\r\n            return this.resourceService.next(this.resourceArray, this.type).pipe(\r\n                map((resourceArray: ResourceArray<T>) => {\r\n                    this.resourceArray = resourceArray;\r\n                    return resourceArray.result;\r\n                }));\r\n        else\r\n            observableThrowError('no resourceArray found');\r\n    }\r\n\r\n    /** get resource array previous page of results*/\r\n    public prev(): Observable<T[]> {\r\n        if (this.resourceArray)\r\n            return this.resourceService.prev(this.resourceArray, this.type).pipe(\r\n                map((resourceArray: ResourceArray<T>) => {\r\n                    this.resourceArray = resourceArray;\r\n                    return resourceArray.result;\r\n                }));\r\n        else\r\n            observableThrowError('no resourceArray found');\r\n    }\r\n\r\n    /** get resource array first page of results*/\r\n    public first(): Observable<T[]> {\r\n        if (this.resourceArray)\r\n            return this.resourceService.first(this.resourceArray, this.type)\r\n                .pipe(\r\n                    map((resourceArray: ResourceArray<T>) => {\r\n                        this.resourceArray = resourceArray;\r\n                        return resourceArray.result;\r\n                    })\r\n                );\r\n        else\r\n            observableThrowError('no resourceArray found');\r\n    }\r\n\r\n    /** get resource array last page of results*/\r\n    public last(): Observable<T[]> {\r\n        if (this.resourceArray)\r\n            return this.resourceService.last(this.resourceArray, this.type)\r\n                .pipe(\r\n                    map((resourceArray: ResourceArray<T>) => {\r\n                        this.resourceArray = resourceArray;\r\n                        return resourceArray.result;\r\n                    })\r\n                );\r\n        else\r\n            observableThrowError('no resourceArray found');\r\n    }\r\n\r\n    /** get resource array page of results given a page number*/\r\n    public page(pageNumber: number): Observable<T[]> {\r\n        if (this.resourceArray)\r\n            return this.resourceService.page(this.resourceArray, this.type, pageNumber).pipe(\r\n                map((resourceArray: ResourceArray<T>) => {\r\n                    this.resourceArray = resourceArray;\r\n                    return resourceArray.result;\r\n                }));\r\n        else\r\n            observableThrowError('no resourceArray found');\r\n    }\r\n}\r\n","import { User } from '../user/user.model';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Injectable, Injector } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport {RestService} from '../angular-hal/src/lib/rest.service';\r\n\r\n\r\n/** Account manager service */\r\n@Injectable()\r\nexport class AccountService extends RestService<User> {\r\n  \r\n\r\n  /** API resource path */\r\n  public ACCOUNT_API = 'account';\r\n\r\n  /** constructor */\r\n  constructor(injector: Injector,private http: HttpClient) {\r\n    super(User, \"account\", injector);\r\n  }\r\n\r\n  /** get logged in user account*/\r\n  get(): Observable<any> {\r\n    let result: Observable<Object>;\r\n    result = this.http.get(this.resourceService.getResourceUrl(this.ACCOUNT_API));\r\n    return result;\r\n  }\r\n  \r\n  /** save account*/\r\n  save(item: any): Observable<any> {\r\n    let result: Observable<Object>;\r\n    result = this.http.post(this.resourceService.getResourceUrl(this.ACCOUNT_API) , item);\r\n\r\n    return result;\r\n  }\r\n\r\n  /** change logged in user account*/  \r\n  changePassword(item: any): Observable<any> {\r\n    let result: Observable<Object>;\r\n    result = this.http.post(this.resourceService.getResourceUrl(this.ACCOUNT_API+\"/change-password\") , item);\r\n    return result;\r\n  }\r\n  \r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Observable} from 'rxjs-compat';\r\nimport {ResourceService} from '../angular-hal/src/lib/resource.service';\r\n//import * as moment from 'moment';\r\n\r\n/** Authentication service*/\r\n@Injectable()\r\nexport class AuthService {\r\n    \r\n  /** API resource path */\r\n  public AUTH_API = 'authenticate';\r\n\r\n    /** constructor*/\r\n    constructor(\r\n        private http: HttpClient,\r\n        private resourceService: ResourceService\r\n    ) {}\r\n    \r\n    /** get current user jwt token from session storage*/\r\n    getToken() {\r\n        return  sessionStorage.getItem('authenticationToken');\r\n    }\r\n\r\n    /** login operation */\r\n    login(credentials): Observable<any> {\r\n\r\n        const data = {\r\n            username: credentials.username,\r\n            password: credentials.password\r\n        };\r\n        return this.http.post(this.resourceService.getResourceUrl(this.AUTH_API), data, {observe : 'response'}).map(authenticateSuccess.bind(this));\r\n\r\n        function authenticateSuccess(resp) {\r\n            if (resp.ok) {\r\n                const jwt = resp.body.id_token;\r\n                this.storeAuthenticationToken(jwt);\r\n                //const expiresAt = moment().add( resp.headers.get('Token-Validity'),'milisecond');\r\n                //sessionStorage.setItem('expires_at', JSON.stringify(expiresAt.valueOf()));\r\n                return jwt;\r\n            }                    \r\n        }\r\n    }\r\n    \r\n    /** login operation with jwt token */\r\n    loginWithToken(jwt) {\r\n        if (jwt) {\r\n            this.storeAuthenticationToken(jwt);\r\n            return Promise.resolve(jwt);\r\n        } else {\r\n            return Promise.reject('auth-jwt-service Promise reject'); // Put appropriate error message here\r\n        }\r\n    }\r\n\r\n    /** store jwt token in session storage*/\r\n    storeAuthenticationToken(jwt) {\r\n       sessionStorage.setItem('authenticationToken', jwt);\r\n        \r\n    }\r\n    \r\n    /** check whether current user is logged in*/\r\n    public isLoggedIn() {\r\n        //return moment().isBefore(this.getExpiration());\r\n        return this.getToken();\r\n    }\r\n    \r\n    /** check whether current user is logged out*/\r\n    isLoggedOut() {\r\n        return !this.isLoggedIn();\r\n    }\r\n\r\n    /** logout operation */\r\n    logout(): Observable<any> {\r\n\r\n        return new Observable((observer) => {\r\n            //localStorage.removeItem('authenticationToken');\r\n            sessionStorage.removeItem('authenticationToken');\r\n            //sessionStorage.removeItem('expires_at');\r\n            observer.complete();\r\n        });\r\n    }\r\n\r\n\r\n    \r\n}\r\n","import { Observable } from 'rxjs';\r\nimport { HttpInterceptor, HttpRequest, HttpHandler, HttpEvent } from '@angular/common/http';\r\n\r\n/** Interceptor for authentication token in API requests */\r\nexport class AuthInterceptor implements HttpInterceptor {\r\n\r\n    /** constructor*/\r\n    constructor(\r\n    ) {\r\n    }\r\n    \r\n    /** request handler */\r\n    intercept(request: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\r\n        if (!request || !request.url || !(request.url.includes(\"api\")) ) {\r\n            return next.handle(request);\r\n        }\r\n        const token = sessionStorage.getItem('authenticationToken');\r\n        if (!!token) {\r\n            request = request.clone({\r\n                setHeaders: {\r\n                    Authorization: 'Bearer ' + token\r\n                }\r\n            });\r\n        }\r\n        return next.handle(request);\r\n    }\r\n\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { Subject, Observable } from 'rxjs';\r\nimport { AccountService } from '../account/account.service';\r\n\r\n/** Principal service*/\r\n@Injectable()\r\nexport class Principal {\r\n    private userIdentity: any;\r\n    private authenticated = false;\r\n    private authenticationState = new Subject<any>();\r\n\r\n    /** constructor */\r\n    constructor(\r\n        private account: AccountService\r\n    ) {}\r\n\r\n    /** authenticate with given identity*/\r\n    authenticate(identity) {\r\n        this.userIdentity = identity;\r\n        this.authenticated = identity !== null;\r\n        this.authenticationState.next(this.userIdentity);\r\n    }\r\n\r\n    /** check whether current user has any of the given authorities */\r\n    hasAnyAuthority(authorities: string[]): Promise<boolean> {\r\n        return Promise.resolve(this.hasAnyAuthorityDirect(authorities));\r\n    }\r\n\r\n    /** check whether current user has any of the given authorities on the given territory */\r\n    hasAnyAuthorityOnTerritory(authorities: string[],territory: string ): Promise<boolean> {\r\n        return Promise.resolve(this.hasAnyAuthorityDirectOnTerritory(authorities,territory));\r\n    }\r\n\r\n    /** check whether current user has any of the given authorities without resolving promises*/\r\n    hasAnyAuthorityDirect(authorities: string[]): boolean {\r\n        if (!this.authenticated || !this.userIdentity || !this.userIdentity.authorities) {\r\n            return false;\r\n        }\r\n\r\n        for (let i = 0; i < authorities.length; i++) {\r\n            if (this.userIdentity.authorities.includes(authorities[i])) {\r\n                return true;\r\n            }\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    /** check whether current user has any of the given authorities on the given territory without resolving promises */\r\n    hasAnyAuthorityDirectOnTerritory(authorities: string[],territory: string): boolean {\r\n        if (!this.authenticated || !this.userIdentity || !this.userIdentity.authorities) {\r\n            return false;\r\n        }\r\n\r\n        for (let i = 0; i < authorities.length; i++) {\r\n\r\n            if (this.userIdentity.authoritiesPerTerritory[territory] && this.userIdentity.authoritiesPerTerritory[territory].includes(authorities[i])) {\r\n                return true;\r\n            }\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    /** check whether current user has the given authority */\r\n    hasAuthority(authority: string): Promise<boolean> {\r\n        if (!this.authenticated) {\r\n           return Promise.resolve(false);\r\n        }\r\n\r\n        return this.identity().then((id) => {\r\n            return Promise.resolve(id.authorities && id.authorities.includes(authority));\r\n        }, () => {\r\n            return Promise.resolve(false);\r\n        });\r\n    }\r\n\r\n    /** check whether current user has the given authority on the given territory*/\r\n    hasAuthorityOnTerritory(authority: string,territory: string): Promise<boolean> {\r\n        if (!this.authenticated) {\r\n           return Promise.resolve(false);\r\n        }\r\n\r\n        return this.identity().then((id) => {\r\n            return Promise.resolve(id.authoritiesPerTerritory && id.authoritiesPerTerritory[territory] && id.authoritiesPerTerritory[territory].includes(authority));\r\n        }, () => {\r\n            return Promise.resolve(false);\r\n        });\r\n    }\r\n\r\n    /** check user identity*/\r\n    identity(force?: boolean): Promise<any> {\r\n        if (force === true) {\r\n            this.userIdentity = undefined;\r\n        }\r\n\r\n        // check and see if we have retrieved the userIdentity data from the server.\r\n        // if we have, reuse it by immediately resolving\r\n        if (this.userIdentity) {\r\n            return Promise.resolve(this.userIdentity);\r\n        }\r\n\r\n        // retrieve the userIdentity data from the server, update the identity object, and then resolve.\r\n        return this.account.get().toPromise().then((response) => {\r\n            const account = response;\r\n            if (account) {\r\n                this.userIdentity = account;\r\n                this.authenticated = true;\r\n            } else {\r\n                this.userIdentity = null;\r\n                this.authenticated = false;\r\n            }\r\n            this.authenticationState.next(this.userIdentity);\r\n            return this.userIdentity;\r\n        }).catch((err) => {\r\n            this.userIdentity = null;\r\n            this.authenticated = false;\r\n            this.authenticationState.next(this.userIdentity);\r\n            return null;\r\n        });\r\n    }\r\n\r\n    /** check whether current user is authenticated */\r\n    isAuthenticated(): boolean {\r\n        return this.authenticated;\r\n    }\r\n\r\n    /** check whether current user identity is resolved */\r\n    isIdentityResolved(): boolean {\r\n        return this.userIdentity !== undefined;\r\n    }\r\n\r\n    /** get current user authentication state */\r\n    getAuthenticationState(): Observable<any> {\r\n        return this.authenticationState.asObservable();\r\n    }\r\n\r\n\r\n}\r\n","import { Injector, Injectable } from '@angular/core';\r\nimport { HttpInterceptor, HttpRequest, HttpHandler, HttpEvent, HttpErrorResponse } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport { AuthService } from './auth.service';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport { Principal } from './principal.service';\r\n\r\n/** Interceptor for authentication expired response in API requests */\r\n@Injectable()\r\nexport class AuthExpiredInterceptor implements HttpInterceptor {\r\n\r\n    /** constructor */\r\n    constructor(\r\n        private router: Router,     \r\n        private authService: AuthService, \r\n        private principal: Principal\r\n    ) {}\r\n\r\n    /** request handler */\r\n    intercept(request: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\r\n        return next.handle(request).do((event: HttpEvent<any>) => {}, (err: any) => {\r\n            if (err instanceof HttpErrorResponse) {\r\n                if (err.status === 401) {                    \r\n                    this.authService.logout().subscribe();\r\n                    this.principal.authenticate(null);\r\n                    this.router.navigate(['/']);\r\n                }\r\n            }\r\n        });\r\n    }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { AuthService } from './auth.service';\r\nimport { Principal } from './principal.service';\r\n\r\n/** Login service*/\r\n@Injectable()\r\nexport class LoginService {\r\n    \r\n    /** constructor */\r\n    constructor(\r\n        private authServerProvider: AuthService, \r\n        private principal: Principal\r\n    ) {}\r\n\r\n    /**Login operation*/\r\n    login(credentials, callback?) {\r\n        const cb = callback || function() {};\r\n\r\n        return new Promise((resolve, reject) => {\r\n            this.authServerProvider.login(credentials).subscribe((data) => {\r\n                this.principal.identity(true).then((account) => {\r\n                    // After the login the language will be changed to\r\n                    // the language selected by the user during his registration\r\n                    resolve(data);\r\n                });\r\n                \r\n                \r\n                return cb();\r\n            }, (err) => {\r\n                this.logout();\r\n                reject(err);\r\n                return cb(err);\r\n            });\r\n        });\r\n    }\r\n    /**login with jwt token */\r\n    loginWithToken(jwt) {\r\n        return this.authServerProvider.loginWithToken(jwt);\r\n    }\r\n\r\n    /** logout operation */\r\n    logout() {\r\n       this.authServerProvider.logout().subscribe();\r\n       this.principal.authenticate(null);\r\n    }\r\n}\r\n","import { Injectable, Injector } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport {ResourceService} from '../angular-hal/src/lib/resource.service';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class DashboardService{\r\n\r\n    /** API resource path */\r\n    public DASHBOARD_API = 'dashboard/info';\r\n    public DASHBOARD_EMBEDDED= 'dashboard';\r\n    /** constructor */\r\n    constructor(       \r\n      private http: HttpClient,\r\n      private resourceService: ResourceService) {\r\n    }\r\n  \r\n    /** get all kpi */\r\n    getAll(): Observable<any> {\r\n      return this.http.get(this.resourceService.getResourceUrl(this.DASHBOARD_API)).map(response => response[this.DASHBOARD_EMBEDDED]);\r\n    }\r\n}\r\n","import {RestService} from '../angular-hal/src/lib/rest.service';\r\nimport { User } from './user.model';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Injectable, Injector } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\n\r\n/** User manager service */\r\n@Injectable()\r\nexport class UserService extends RestService<User> {\r\n  \r\n  /** API resource path */\r\n  public USER_API ='users';\r\n\r\n  /** constructor */\r\n  constructor(injector: Injector,private http: HttpClient) {\r\n    super(User, \"users\", injector);\r\n  }\r\n  \r\n  /** remove user*/\r\n  remove(item: User) {\r\n    return this.http.delete(item._links.self.href);\r\n   \r\n  }\r\n  \r\n  /** save user*/\r\n  save(item: any): Observable<any> {\r\n    let result: Observable<Object>;\r\n    if (item._links!=null) {\r\n      result = this.http.put(item._links.self.href, item);\r\n    } else {\r\n      result = this.http.post(this.resourceService.getResourceUrl(this.USER_API) , item);\r\n    }\r\n    return result;\r\n  }\r\n    \r\n  /** change password o given user id */\r\n  changePassword(id,item: any): Observable<any> {\r\n    let result: Observable<Object>;\r\n    result = this.http.post(this.resourceService.getResourceUrl(this.USER_API+\"/\"+id+\"/change-password\") , item);\r\n    return result;\r\n  }\r\n}\r\n","import {Resource} from '../angular-hal/src/lib/resource';\r\nimport { Territory } from '../territory/territory.model';\r\nimport { User } from './user.model';\r\n/**\r\n * User position model\r\n */\r\nexport class UserPosition extends Resource {\r\n  /** name */\r\n  public name: string;\r\n  /** email */\r\n  public email: string;\r\n  /** organization name*/\r\n  public organization: string;\r\n  /** system created date*/\r\n  public createdDate: any;\r\n  /** system dated date*/\r\n  public datedDate: any;\r\n  /** position territory*/\r\n  public territory: Territory;\r\n  /** user*/\r\n  public user: User;\r\n}\r\n","import {RestService} from '../angular-hal/src/lib/rest.service';\r\nimport { UserPosition } from './user-position.model';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Injectable, Injector } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\n\r\n/** User position manager service */\r\n@Injectable()\r\nexport class UserPositionService  extends RestService<UserPosition> {\r\n  \r\n\r\n  /** API resource path */\r\n  public USER_POSITION_API = 'user-positions';\r\n\r\n  /** constructor */\r\n  constructor(injector: Injector,private http: HttpClient) {\r\n    super(UserPosition, \"user-positions\", injector);\r\n  }\r\n  \r\n  /** remove user position*/\r\n  remove(item: UserPosition) {\r\n    return this.http.delete(item._links.self.href);\r\n   \r\n  }\r\n  \r\n  /** save user position*/\r\n  save(item: any): Observable<any> {\r\n    let result: Observable<Object>;\r\n    if (item._links!=null) {\r\n      result = this.http.put(item._links.self.href, item);\r\n      if (item.user !=null){\r\n          item.substituteRelation('user',item.user).subscribe(result => {\r\n      \r\n      }, error => console.error(error));\r\n      }\r\n      if (item.territory !=null){\r\n          item.substituteRelation('territory',item.territory).subscribe(result => {\r\n      \r\n      }, error => console.error(error));\r\n      }\r\n    } else {\r\n      item.territory = item.territory._links.self.href;\r\n      item.user = item.user._links.self.href;\r\n  \r\n      result = this.http.post(this.resourceService.getResourceUrl(this.USER_POSITION_API) , item);\r\n    }\r\n    return result;\r\n  }\r\n  \r\n}\r\n","import {Resource} from '../angular-hal/src/lib/resource';\r\nimport { Role } from '../role/role.model';\r\nimport { Territory } from '../territory/territory.model';\r\nimport { User } from './user.model';\r\n\r\n/**\r\n * User permission model\r\n */\r\nexport class UserConfiguration extends Resource {\r\n  /** role */  \r\n  public role: Role;\r\n\r\n  /** role Children */  \r\n  public roleChildren: Role;\r\n  \r\n  /** territory */ \r\n  public territory: Territory;\r\n  /** user */\r\n  public user: User;\r\n}\r\n","import { RestService } from '../angular-hal/src/lib/rest.service';\r\nimport { UserConfiguration } from './user-configuration.model';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Injectable, Injector } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\n\r\n/** User configuration manager service */\r\n@Injectable()\r\nexport class UserConfigurationService extends RestService<UserConfiguration> {\r\n\r\n  /** API resource path */\r\n  public USER_CONFIGURATION_API = 'user-configurations';\r\n\r\n  /** constructor */\r\n  constructor(injector: Injector, private http: HttpClient) {\r\n    super(UserConfiguration, \"user-configurations\", injector);\r\n  }\r\n\r\n  /** remove user configuration*/\r\n  remove(item: UserConfiguration) {\r\n    return this.http.delete(item._links.self.href);\r\n\r\n  }\r\n\r\n  /** save user configuration*/\r\n  save(item: any): Observable<any> {\r\n    let result: Observable<Object>;\r\n    if (item._links != null) {\r\n      result = this.http.put(item._links.self.href, item);\r\n      if (item.user != null) {\r\n        item.substituteRelation('user', item.user).subscribe(result => {\r\n\r\n        }, error => console.error(error));\r\n      }\r\n      if (item.territory != null) {\r\n        item.substituteRelation('territory', item.territory).subscribe(result => {\r\n\r\n        }, error => console.error(error));\r\n      }\r\n      if (item.role != null) {\r\n        item.substituteRelation('role', item.role).subscribe(result => {\r\n\r\n        }, error => console.error(error));\r\n      }\r\n      if (item.roleChildren != null) {\r\n        item.substituteRelation('roleChildren', item.roleChildren).subscribe(result => {\r\n\r\n        }, error => console.error(error));\r\n      }\r\n    } else {\r\n      item.territory = item.territory._links.self.href;\r\n      item.role = item.role!=null?item.role._links.self.href:null;\r\n      item.user = item.user._links.self.href;\r\n      item.roleChildren = item.roleChildren!=null?item.roleChildren._links.self.href:null;\r\n      result = this.http.post(this.resourceService.getResourceUrl(this.USER_CONFIGURATION_API), item);\r\n    }\r\n    return result;\r\n  }\r\n\r\n}\r\n","import {Resource} from '../angular-hal/src/lib/resource';\r\nimport { TerritoryGroupType } from './territory-group-type.model';\r\nimport { TerritoryType } from './territory-type.model';\r\n\r\n/**\r\n * Territory model\r\n */\r\nexport class Territory extends Resource {\r\n  /** id */\r\n  public id: number;  \r\n  /** code */\r\n  public code: string;\r\n  /** name */\r\n  public name: string;\r\n  /** address*/\r\n  public territorialAuthorityAddress: string;\r\n  /** admin */\r\n  public territorialAuthorityName: string;\r\n  /** whether territory is blocked*/\r\n  public blocked: boolean;\r\n  /** comments*/\r\n  public note: string;\r\n  /** system created date*/\r\n  public createdDate: any;\r\n  /** contact email */  \r\n  public territorialAuthorityEmail: string;\r\n  /** extension */\r\n  public extent: string;\r\n  /** logo image URL */\r\n  public territorialAuthorityLogo: string;\r\n  /** contact organization name */\r\n  // public organizationName: string;\r\n  /** scope*/\r\n  public scope: string;\r\n  /** type */  \r\n  public type: TerritoryType;\r\n  /** group type */\r\n  public groupType: TerritoryGroupType;\r\n  /** territory members*/\r\n  public members: Territory[];\r\n\r\n}\r\n","import { Territory } from './territory.model';\r\nimport { Injectable, Injector } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport { RestService } from '../angular-hal/src/lib/rest.service';\r\n\r\n/** Territory manager service */\r\n@Injectable()\r\nexport class TerritoryService extends RestService<Territory> {\r\n\r\n  /** API resource path */\r\n  public TERRITORY_API = 'territories';\r\n\r\n  /** constructor */\r\n  constructor(injector: Injector, private http: HttpClient) {\r\n    super(Territory, \"territories\", injector);\r\n  }\r\n\r\n  /** remove territory*/\r\n  remove(item: Territory) {\r\n    return this.http.delete(item._links.self.href);\r\n\r\n  }\r\n\r\n  /** save territory*/\r\n  save(item: Territory): Observable<any> {\r\n    let result: Observable<Object>;\r\n\r\n    let territoryGroupType:any = {}\r\n    territoryGroupType._links = {};\r\n    territoryGroupType._links.self = {};\r\n    territoryGroupType._links.self.href = \"\";\r\n\r\n    if (item.groupType != null) {\r\n      territoryGroupType = item.groupType;\r\n      if (typeof item.groupType._links != 'undefined') {\r\n        item.groupType = item.groupType._links.self.href;\r\n      } \r\n    }\r\n\r\n    if (item._links != null) {\r\n      //update relations\r\n      delete item.groupType;\r\n\r\n      if (territoryGroupType._links.self.href == '') {\r\n        item.deleteRelation('groupType', territoryGroupType).subscribe(result => {\r\n        }, error => console.error(error));\r\n\r\n      } else {\r\n        item.substituteRelation('groupType', territoryGroupType).subscribe(result => {\r\n        }, error => console.error(error));\r\n      }\r\n\r\n      if (item.type != null)\r\n        item.type = item.type._links.self.href;\r\n\r\n      result = this.http.put(item._links.self.href, item);\r\n    } else {\r\n      result = this.http.post(this.resourceService.getResourceUrl(this.TERRITORY_API), item);\r\n    }\r\n    return result;\r\n  }\r\n\r\n}\r\n","import {Resource} from '../angular-hal/src/lib/resource';\r\n\r\n/**\r\n * Territory type model\r\n */\r\nexport class TerritoryType extends Resource {\r\n   /** id */\r\n   public id: number;  \r\n  /** name */\r\n  public name: string;\r\n}\r\n","import { Territory } from './territory.model';\r\nimport { Injectable, Injector } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport {RestService} from '../angular-hal/src/lib/rest.service';\r\nimport { TerritoryType } from './territory-type.model';\r\n\r\n/** TerritoryType manager service */\r\n@Injectable()\r\nexport class TerritoryTypeService extends RestService<TerritoryType> {\r\n  \r\n\r\n  /** API resource path */\r\n  public TERRITORYTYPE_API = 'territory-types';\r\n\r\n  /** constructor */\r\n  constructor(injector: Injector,private http: HttpClient) {\r\n    super(TerritoryType, \"territory-types\", injector);\r\n  }\r\n  \r\n  /** remove territory type*/\r\n  remove(item: TerritoryType) {\r\n    return this.http.delete(item._links.self.href);\r\n   \r\n  }\r\n  \r\n  /** save territory type*/\r\n  save(item: any): Observable<any> {\r\n    let result: Observable<Object>;\r\n    if (item._links!=null) {\r\n      result = this.http.put(item._links.self.href, item);\r\n    } else {\r\n      result = this.http.post(this.resourceService.getResourceUrl(this.TERRITORYTYPE_API) , item);\r\n    }\r\n    return result;\r\n  }\r\n  \r\n}\r\n","import {Resource} from '../angular-hal/src/lib/resource';\r\n\r\n/**\r\n * Territory type model\r\n */\r\nexport class TerritoryGroupType extends Resource {\r\n  /** id */\r\n  public id: number;  \r\n  /** name */\r\n  public name: string;\r\n}\r\n","import { TerritoryGroupType } from './territory-group-type.model';\r\nimport { Injectable, Injector } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport {RestService} from '../angular-hal/src/lib/rest.service';\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class TerritoryGroupTypeService extends RestService<TerritoryGroupType> {\r\n  \r\n  /** API resource path */\r\n  public TERRITORYGROUPTYPE_API = 'territory-group-types';\r\n\r\n  /** constructor */\r\n  constructor(injector: Injector,private http: HttpClient) {\r\n    super(TerritoryGroupType, \"territory-group-types\", injector);\r\n  }\r\n  \r\n  /** remove territory*/\r\n  remove(item: TerritoryGroupType) {\r\n    return this.http.delete(item._links.self.href);\r\n   \r\n  }\r\n  \r\n  /** save territory*/\r\n  save(item: any): Observable<any> {\r\n    let result: Observable<Object>;\r\n    if (item._links!=null) {\r\n      result = this.http.put(item._links.self.href, item);\r\n    } else {\r\n      result = this.http.post(this.resourceService.getResourceUrl(this.TERRITORYGROUPTYPE_API) , item);\r\n    }\r\n    return result;\r\n  }\r\n  \r\n}","import {Resource} from '../angular-hal/src/lib/resource';\r\n\r\n/**\r\n * Role model\r\n */\r\nexport class Role extends Resource {\r\n  /** id */\r\n  public id: number;\r\n  /** name*/\r\n  public name: string;\r\n  /** comments*/\r\n  public description: string;\r\n\r\n}\r\n","import { Role } from './role.model';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Injectable, Injector } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport {RestService} from '../angular-hal/src/lib/rest.service';\r\n\r\n/** Role manager service */\r\n@Injectable()\r\nexport class RoleService extends RestService<Role> {\r\n  \r\n  /** API resource path */\r\n  public ROLE_API = 'roles';\r\n\r\n  /** constructor */\r\n  constructor(injector: Injector,private http: HttpClient) {\r\n    super(Role, \"roles\", injector);\r\n  }\r\n  \r\n  /** remove role*/\r\n  remove(item: Role) {\r\n    return this.http.delete(item._links.self.href);\r\n   \r\n  }\r\n  \r\n  /** save role*/\r\n  save(item: any): Observable<any> {\r\n    let result: Observable<Object>;\r\n    if (item._links!=null) {\r\n      result = this.http.put(item._links.self.href, item);\r\n    } else {\r\n      result = this.http.post(this.resourceService.getResourceUrl(this.ROLE_API) , item);\r\n    }\r\n    return result;\r\n  }\r\n  \r\n}\r\n","import {Resource} from '../angular-hal/src/lib/resource';\r\n/**\r\n * Connection model\r\n */\r\nexport class Connection extends Resource {\r\n  /** id */\r\n  public id: number;\r\n  /** name*/\r\n  public name: string;\r\n  /** type*/\r\n  public type: string;\r\n  /** user*/\r\n  public user: string;\r\n  /** password*/\r\n  public password: string;\r\n  /** connection string*/\r\n  public connectionString: string;\r\n\r\n}\r\n","import { Connection } from './connection.model';\r\nimport { Injectable, Injector } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport {RestService} from '../angular-hal/src/lib/rest.service';\r\n\r\n/** Connection manager service */\r\n@Injectable()\r\nexport class ConnectionService extends RestService<Connection> {\r\n  \r\n\r\n  /** API resource path */\r\n  public CONNECTION_API = 'connections';\r\n\r\n  /** constructor */\r\n  constructor(injector: Injector,private http: HttpClient) {\r\n    super(Connection, \"connections\", injector);\r\n  }\r\n  \r\n  /** remove connection*/\r\n  remove(item: Connection) {\r\n    return this.http.delete(item._links.self.href);\r\n   \r\n  }\r\n  \r\n  /** save connection*/\r\n  save(item: Connection): Observable<any> {\r\n    let result: Observable<Object>;\r\n    if (item._links!=null) {\r\n      \r\n      result = this.http.put(item._links.self.href, item);\r\n    } else {\r\n      result = this.http.post(this.resourceService.getResourceUrl(this.CONNECTION_API) , item);\r\n    }\r\n    return result;\r\n  }\r\n\r\n  testConnection(item:any): Observable<any> {\r\n    let result: Observable<Object>;\r\n    result=this.http.post(this.resourceService.getResourceUrl(this.CONNECTION_API)+\"/test\" , item);\r\n    return result;\r\n  }\r\n  \r\n}\r\n","import {Resource} from '../angular-hal/src/lib/resource';\r\n\r\nimport { Connection } from '../connection/connection.model';\r\nimport { Role } from '../role/role.model';\r\nimport { TaskType } from './task-type.model';\r\nimport { TaskGroup } from './task-group.model';\r\nimport { TaskAvailability } from './task-availability.model';\r\nimport { TaskParameter } from './task-parameter.model';\r\n\r\n//FIXME ensure task creation in admin app upon initialization (as it is done with Roles and default Users)\r\n/** GEOADMIN_task id */\r\nexport const GEOADMIN_TREE_TASK_ID:string  = \"geoadmin\";\r\n\r\nimport { TaskUI } from './task-ui.model';\r\n/** Task model */\r\nexport class Task extends Resource {\r\n  /** id */\r\n  public id: number;\r\n  /** name */  \r\n  public name: string;\r\n  /** order*/\r\n  public order: Number;\r\n  /** system created date*/\r\n  public createdDate: any;\r\n  /** task group*/\r\n  public group: TaskGroup;\r\n  /** task type*/\r\n  public type: TaskType;\r\n  /** task UI*/\r\n  public ui: TaskUI;\r\n  /** parameters*/\r\n  public parameters: TaskParameter[];\r\n  /** connection*/\r\n  public connection: Connection;\r\n  /** roles*/\r\n  public roles: Role[];\r\n  /** availabilities*/\r\n  public availabilities: TaskAvailability[];\r\n}\r\n","import { Task } from './task.model';\r\nimport { Injectable, Injector } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport {RestService} from '../angular-hal/src/lib/rest.service';\r\n\r\n/** Task manager service */\r\n@Injectable()\r\nexport class TaskService extends RestService<Task> {\r\n\r\n    /** API resource path */\r\n    public CONNECTION_API = 'tasks';\r\n\r\n    /** constructor */\r\n    constructor(injector: Injector, private http: HttpClient) {\r\n        super(Task, \"tasks\", injector);\r\n    }\r\n\r\n    /** remove task*/\r\n    remove(item: Task) {\r\n        return this.http.delete(item._links.self.href);\r\n    }\r\n    \r\n    /** save task*/\r\n    save(item: Task): Observable<any> {\r\n        let result: Observable<Object>;\r\n        const taskType = item.type;\r\n        const taskGroup = item.group;\r\n        let taskConnection = item.connection;\r\n        let taskUI = item.ui;\r\n        if (item._links != null) {\r\n            result = this.http.put(item._links.self.href, item);\r\n        } else {\r\n            result = this.http.post(this.resourceService.getResourceUrl(this.CONNECTION_API), item);\r\n        }\r\n        return result;\r\n    }\r\n\r\n}\r\n","import {Resource} from '../angular-hal/src/lib/resource';\r\n/**\r\n * Task type model\r\n */\r\nexport class TaskType extends Resource {\r\n  /** name*/  \r\n  public name: string;\r\n\r\n}\r\n","import { TaskType } from './task-type.model';\r\nimport { Injectable, Injector } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport {RestService} from '../angular-hal/src/lib/rest.service';\r\n\r\n/** TaskType manager service */\r\n@Injectable()\r\nexport class TaskTypeService extends RestService<TaskType> {\r\n  \r\n\r\n  /** API resource path */\r\n  public CONNECTION_API = 'task-types';\r\n\r\n  /** constructor */\r\n  constructor(injector: Injector,private http: HttpClient) {\r\n    super(TaskType, \"task-types\", injector);\r\n  }\r\n  \r\n  /** remove task type*/\r\n  remove(item: TaskType) {\r\n    return this.http.delete(item._links.self.href);\r\n   \r\n  }\r\n  \r\n  /** save task type*/\r\n  save(item: TaskType): Observable<any> {\r\n    let result: Observable<Object>;\r\n    if (item._links!=null) {\r\n      \r\n      result = this.http.put(item._links.self.href, item);\r\n    } else {\r\n      result = this.http.post(this.resourceService.getResourceUrl(this.CONNECTION_API) , item);\r\n    }\r\n    return result;\r\n  }\r\n  \r\n}\r\n","import {Resource} from '../angular-hal/src/lib/resource';\r\n/**\r\n * Task group model\r\n */\r\nexport class TaskGroup extends Resource {\r\n  /** id */\r\n  public id: number;  \r\n  /** name*/  \r\n  public name: string;\r\n\r\n}\r\n","import { TaskGroup } from './task-group.model';\r\nimport { Injectable, Injector } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport {RestService} from '../angular-hal/src/lib/rest.service';\r\n\r\n/** Task group manager service */\r\n@Injectable()\r\nexport class TaskGroupService extends RestService<TaskGroup> {\r\n  \r\n\r\n  /** API resource path */\r\n  public CONNECTION_API = 'task-groups';\r\n\r\n  /** constructor */\r\n  constructor(injector: Injector,private http: HttpClient) {\r\n    super(TaskGroup, \"task-groups\", injector);\r\n  }\r\n  \r\n  /** remove task group*/\r\n  remove(item: TaskGroup) {\r\n    return this.http.delete(item._links.self.href);\r\n   \r\n  }\r\n  \r\n  /** save task group*/\r\n  save(item: TaskGroup): Observable<any> {\r\n    let result: Observable<Object>;\r\n    if (item._links!=null) {\r\n      \r\n      result = this.http.put(item._links.self.href, item);\r\n    } else {\r\n      result = this.http.post(this.resourceService.getResourceUrl(this.CONNECTION_API) , item);\r\n    }\r\n    return result;\r\n  }\r\n  \r\n}\r\n","import {Resource} from '../angular-hal/src/lib/resource';\r\nimport {Task} from './task.model';  \r\n/**\r\n * Task parameter model\r\n */\r\nexport class TaskParameter extends Resource {\r\n  /** name*/  \r\n  public name: string;\r\n  \r\n  /** type*/\r\n  public type: string;\r\n    \r\n  /** value*/\r\n  public value: string;\r\n  \r\n  /** order*/  \r\n  public order: Number;\r\n  \r\n  /** task*/  \r\n  public task:Task;\r\n\r\n}\r\n","import { TaskParameter } from './task-parameter.model';\r\nimport { Injectable, Injector } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport {RestService} from '../angular-hal/src/lib/rest.service';\r\n\r\n/** Task parameter manager service */\r\n@Injectable() \r\nexport class TaskParameterService extends RestService<TaskParameter> {\r\n  \r\n\r\n  /** API resource path */\r\n  public TASK_PARAMETER_API = 'task-parameters';\r\n\r\n  /** constructor */\r\n  constructor(injector: Injector,private http: HttpClient) {\r\n    super(TaskParameter, \"task-parameters\", injector);\r\n  }\r\n  \r\n  /** remove task parameter*/\r\n  remove(item: TaskParameter) {\r\n    return this.http.delete(item._links.self.href);\r\n   \r\n  }\r\n  \r\n  /** save task parameter*/\r\n  save(item: TaskParameter): Observable<any> {\r\n    let result: Observable<Object>;\r\n    if (item._links!=null) {\r\n      result = this.http.put(item._links.self.href, item);\r\n      if (item.task !=null){\r\n          item.substituteRelation('task',item.task).subscribe(result => {\r\n      \r\n      }, error => console.error(error));\r\n      }\r\n      \r\n    } else {\r\n      item.task = item.task._links.self.href;\r\n  \r\n      result = this.http.post(this.resourceService.getResourceUrl(this.TASK_PARAMETER_API) , item);\r\n    }\r\n    return result;\r\n  }\r\n  \r\n}\r\n","import {Resource} from '../angular-hal/src/lib/resource';\r\nimport { Territory } from '../territory/territory.model';\r\nimport { Task } from './task.model';\r\n/**\r\n * Task availability model\r\n */\r\nexport class TaskAvailability extends Resource {\r\n  /** territory*/\r\n  public territory: Territory;\r\n  /** task*/\r\n  public task: Task;\r\n}\r\n","import { TaskAvailability } from './task-availability.model';\r\nimport { Injectable, Injector } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport {RestService} from '../angular-hal/src/lib/rest.service';\r\n\r\n/** Task availability manager service */\r\n@Injectable() \r\nexport class TaskAvailabilityService extends RestService<TaskAvailability> {\r\n  \r\n\r\n  /** API resource path */\r\n  public TASK_AVAILABILITY_API = 'task-availabilities';\r\n\r\n  /** constructor */\r\n  constructor(injector: Injector,private http: HttpClient) {\r\n    super(TaskAvailability, \"task-availabilities\", injector);\r\n  }\r\n  \r\n  /** remove task availability*/\r\n  remove(item: TaskAvailability) {\r\n    return this.http.delete(item._links.self.href);\r\n   \r\n  }\r\n  \r\n  /** save task availability*/\r\n  save(item: TaskAvailability): Observable<any> {\r\n    let result: Observable<Object>;\r\n    if (item._links!=null) {\r\n      result = this.http.put(item._links.self.href, item);\r\n      if (item.task !=null){\r\n          item.substituteRelation('task',item.task).subscribe(result => {\r\n      \r\n      }, error => console.error(error));\r\n      }\r\n      if (item.territory !=null){\r\n          item.substituteRelation('territory',item.territory).subscribe(result => {\r\n      \r\n      }, error => console.error(error));\r\n      }\r\n    } else {\r\n      item.territory = item.territory._links.self.href;\r\n      item.task = item.task._links.self.href;\r\n  \r\n      result = this.http.post(this.resourceService.getResourceUrl(this.TASK_AVAILABILITY_API) , item);\r\n    }\r\n    return result;\r\n  }\r\n  \r\n}\r\n","import {Resource} from '../angular-hal/src/lib/resource';\r\n/**\r\n * Task UI model\r\n */\r\nexport class TaskUI extends Resource {\r\n  /** name*/\r\n  public name: string;\r\n  \r\n  /** tooltip*/  \r\n  public tooltip: string;\r\n    \r\n  /** order*/ \r\n  public order: number;\r\n\r\n}\r\n","import { TaskUI } from './task-ui.model';\r\nimport { Injectable, Injector } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport {RestService} from '../angular-hal/src/lib/rest.service';\r\n\r\n/** Task UI manager service */\r\n@Injectable()\r\nexport class TaskUIService extends RestService<TaskUI> {\r\n  \r\n\r\n  /** API resource path */\r\n  public CONNECTION_API = 'task-uis';\r\n\r\n  /** constructor */\r\n  constructor(injector: Injector,private http: HttpClient) {\r\n    super(TaskUI, \"task-uis\", injector);\r\n  }\r\n  \r\n  /** remove task UI*/\r\n  remove(item: TaskUI) {\r\n    return this.http.delete(item._links.self.href);\r\n   \r\n  }\r\n  \r\n  /** save task UI*/\r\n  save(item: TaskUI): Observable<any> {\r\n    let result: Observable<Object>;\r\n    if (item._links!=null) {      \r\n      result = this.http.put(item._links.self.href, item);\r\n    } else {\r\n      result = this.http.post(this.resourceService.getResourceUrl(this.CONNECTION_API) , item);\r\n    }\r\n    return result;\r\n  }\r\n  \r\n}\r\n","import {Resource} from '../angular-hal/src/lib/resource';\r\nimport { Language } from './language.model';\r\n\r\n\r\n/** Task model */\r\nexport class Translation extends Resource {\r\n  /** id */\r\n  public id: number;\r\n  /** id */\r\n  public element: number;\r\n  /** name */\r\n  public translation: string;\r\n  /** column */\r\n  public column: string;\r\n  /** name */\r\n  public language: Language;\r\n\r\n\r\n\r\n}\r\n","import { Injectable, Injector } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport {RestService} from '../angular-hal/src/lib/rest.service';\nimport { Translation } from './translation.model';\n\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class TranslationService extends RestService<Translation> {\n\n  /** API resource path */\n  public TRANSLATION_API = 'translations';\n\n  /** constructor */\n  constructor(injector: Injector,private http: HttpClient) {\n    super(Translation, \"translations\", injector);\n  }\n  \n  /** remove translation*/\n  remove(item: Translation) {\n    return this.http.delete(item._links.self.href);\n   \n  }\n  \n  /** save translation*/\n  save(item: Translation): Observable<any> {\n    let result: Observable<Object>;\n\n    let language:any = {}\n    language._links = {};\n    language._links.self = {};\n    language._links.self.href = \"\";\n\n    if (item.language != null) {\n      language = item.language;\n      if (typeof item.language._links != 'undefined') {\n        item.language = item.language._links.self.href;\n      } \n    }\n\n    if (item._links!=null) {\n      delete item.language;\n      // if (language._links.self.href == '') {\n      //   item.deleteRelation('language', language).subscribe(result => {\n      //   }, error => console.error(error));\n\n      // } else {\n      //   item.substituteRelation('language', language).subscribe(result => {\n      //   }, error => console.error(error));\n      // }\n      result = this.http.put(item._links.self.href, item);\n    } else {\n      result = this.http.post(this.resourceService.getResourceUrl(this.TRANSLATION_API) , item);\n    }\n    return result;\n  }\n}\n","import {Resource} from '../angular-hal/src/lib/resource';\r\n\r\n\r\n/** Task model */\r\nexport class Language extends Resource {\r\n  /** id */\r\n  public id: number;\r\n  /** name */\r\n  public shortname: string;\r\n  /** name */\r\n  public name: string;\r\n}\r\n","import { Injectable, Injector } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport {RestService} from '../angular-hal/src/lib/rest.service';\nimport { Language } from './language.model';\n\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class LanguageService extends RestService<Language> {\n\n  /** API resource path */\n  public LANGUAGES_API = 'languages';\n\n  /** constructor */\n  constructor(injector: Injector,private http: HttpClient) {\n    super(Language, \"languages\", injector);\n  }\n  \n  /** remove translation*/\n  remove(item: Language) {\n    return this.http.delete(item._links.self.href);\n   \n  }\n  \n  /** save translation*/\n  save(item: Language): Observable<any> {\n    let result: Observable<Object>;\n    if (item._links!=null) {\n      result = this.http.put(item._links.self.href, item);\n    } else {\n      result = this.http.post(this.resourceService.getResourceUrl(this.LANGUAGES_API) , item);\n    }\n    return result;\n  }\n}\n","import {Resource} from '../angular-hal/src/lib/resource';\r\nimport {Connection} from '../connection/connection.model';\r\nimport {ServiceParameter} from './service-parameter.model';\r\n/**\r\n * Service model\r\n */\r\nexport class Service extends Resource {\r\n  /** id */\r\n  public id: number;\r\n  /** name*/\r\n  public name: string;\r\n    \r\n  /** type*/\r\n  public type: string;\r\n\r\n  /** url*/  \r\n  public serviceURL: string;\r\n\r\n  /** projections*/  \r\n  public supportedSRS: string;\r\n  \r\n  /** legend*/\r\n  public legend: string;\r\n\r\n  /** infoUrl*/  \r\n  public infoUrl: string;\r\n  \r\n  /** system created date*/\r\n  public createdDate: any;\r\n\r\n  /** connection*/\r\n  public connection: Connection;\r\n  \r\n  /** parameters*/  \r\n  public parameters: ServiceParameter[];\r\n\r\n  /** whether service is blocked*/\r\n  public blocked: boolean;\r\n}\r\n","import { Service } from './service.model';\r\nimport { Injectable, Injector } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport {RestService} from '../angular-hal/src/lib/rest.service';\r\n\r\n/** Service manager service */\r\n@Injectable()\r\nexport class ServiceService extends RestService<Service> {\r\n\r\n  /** API resource path */\r\n  public SERVICE_API = 'services';\r\n\r\n  /** constructor */\r\n  constructor(injector: Injector,private http: HttpClient) {\r\n    super(Service, \"services\", injector);\r\n  }\r\n  \r\n  /** remove service*/\r\n  remove(item: Service) {\r\n    return this.http.delete(item._links.self.href);\r\n   \r\n  }\r\n  \r\n  /** save service*/\r\n  save(item: Service): Observable<any> {\r\n    let result: Observable<Object>;\r\n    let serviceConnection = item.connection;\r\n\r\n    if (item.connection!=null){\r\n        if (typeof item.connection._links!= 'undefined') { \r\n            item.connection = item.connection._links.self.href;\r\n        } else {\r\n            serviceConnection._links= {};\r\n            serviceConnection._links.self = {};\r\n            serviceConnection._links.self.href=\"\";\r\n        }        \r\n     }\r\n\r\n    if (item._links!=null) {\r\n      //update relations\r\n      /*delete item.connection;        \r\n      \r\n      if (serviceConnection._links.self.href==''){\r\n         item.deleteRelation('connection',serviceConnection).subscribe(result => {     \r\n\r\n          \r\n             }, error => console.error(error));\r\n          \r\n      } else {\r\n          item.substituteRelation('connection',serviceConnection).subscribe(result => {\r\n         \r\n\r\n      \r\n            }, error => console.error(error));           \r\n       } */\r\n       \r\n         \r\n      result = this.http.put(item._links.self.href, item);\r\n\r\n           \r\n    } else {\r\n      result = this.http.post(this.resourceService.getResourceUrl(this.SERVICE_API) , item);\r\n    }\r\n    return result;\r\n  }\r\n  \r\n}\r\n","import {Resource} from '../angular-hal/src/lib/resource';\r\nimport {Service} from './service.model'; \r\n/**\r\n * Service parameter model\r\n */\r\nexport class ServiceParameter extends Resource {\r\n  /** name*/\r\n  public name: string;\r\n  \r\n  /** type*/\r\n  public type: string;\r\n    \r\n  /** value*/  \r\n  public value: string;\r\n  \r\n  /** service*/\r\n  public service: Service;\r\n\r\n}\r\n","import { ServiceParameter } from './service-parameter.model';\r\nimport { Injectable, Injector } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport {RestService} from '../angular-hal/src/lib/rest.service';\r\n\r\n/** Service parameter manager service */\r\n@Injectable() \r\nexport class ServiceParameterService extends RestService<ServiceParameter> {\r\n\r\n  /** API resource path */\r\n  public SERVICE_PARAMETER_API = 'service-parameters';\r\n\r\n  /** constructor */\r\n  constructor(injector: Injector,private http: HttpClient) {\r\n    super(ServiceParameter, \"service-parameters\", injector);\r\n  }\r\n  \r\n  /** remove service parameter*/\r\n  remove(item: ServiceParameter) {\r\n    return this.http.delete(item._links.self.href);\r\n   \r\n  }\r\n  \r\n  /** save service parameter*/\r\n  save(item: ServiceParameter): Observable<any> {\r\n    let result: Observable<Object>;\r\n    if (item._links!=null) {\r\n      \r\n      \r\n      if (item.service !=null){\r\n          let service =  item.service;\r\n          delete item.service;\r\n          item.substituteRelation('service',service).subscribe(result => {            \r\n          \r\n      }, error => console.error(error));\r\n      }\r\n      result = this.http.put(item._links.self.href, item);\r\n      \r\n      \r\n    } else {\r\n      item.service = item.service._links.self.href;\r\n  \r\n      result = this.http.post(this.resourceService.getResourceUrl(this.SERVICE_PARAMETER_API) , item);\r\n    }\r\n    return result;\r\n  }\r\n  \r\n}\r\n","import {Resource} from '../angular-hal/src/lib/resource';\r\nimport {Service} from '../service/service.model';\r\nimport {Connection} from '../connection/connection.model';\r\nimport {CartographyAvailability} from './cartography-availability.model';\r\n/**\r\n * Cartography\r\n */\r\nexport class Cartography extends Resource {\r\n  /** id */\r\n  public id: number;  \r\n  /** name*/\r\n  public name: string;\r\n  \r\n  /** type*/\r\n  public type : string;\r\n\r\n  /** service*/\r\n  public service : Service;\r\n\r\n  /** order*/  \r\n  public order: Number; \r\n\r\n  /** description*/  \r\n  public description: String;\r\n\r\n  /** source*/  \r\n  public source: String;\r\n\r\n  /** whether cartography is blocked*/\r\n  public blocked: boolean;  \r\n\r\n  /** apply filter to get map*/\r\n  public applyFilterToGetMap: String;  \r\n\r\n  /** apply filter to get feature information*/\r\n  public applyFilterToGetFeatureInfo: boolean;  \r\n\r\n  /** apply filter to spatial selection*/\r\n  public applyFilterToSpatialSelection: boolean;  \r\n\r\n  /** selectable layers*/\r\n  public selectableLayers: string[];\r\n\r\n  /** transparency*/ \r\n  public transparency: Number;\r\n\r\n  /** whether layer is queryable*/  \r\n  public queryable: Boolean;\r\n\r\n  /** whether layer is queryable*/ \r\n  public queryAct: Boolean;\r\n\r\n  /** query layer*/\r\n  public queryLay: string;\r\n\r\n  /** system created date*/\r\n  public createdDate: any;\r\n\r\n  /** minimum scale*/\r\n  public minimumScale: Number;\r\n\r\n  /** maximum scale*/\r\n  public maximumScale: Number;\r\n\r\n  /** layers*/  \r\n  public layers: string;\r\n  \r\n  /** connection*/\r\n  public connection: Connection;\r\n\r\n  /** queryableFeatureEnabled */\r\n  public queryableFeatureEnabled: Boolean;\r\n\r\n    /** queryableLayers */\r\n  public queryableFeatureAvailable: Boolean;\r\n\r\n    /** queryableLayers */\r\n  public queryableLayers: string[];\r\n\r\n  /** availabilities*/\r\n  public availabilities : CartographyAvailability[];\r\n\r\n  /** whether layer is queryable*/ \r\n  public selectableFeatureEnabled: Boolean;\r\n\r\n  /** selection layer*/\r\n  public selectionLayer: string;\r\n\r\n  /** selection service*/  \r\n  public selectionService: Service;\r\n\r\n  /** legend tip*/  \r\n  public legendType: string;\r\n  \r\n  /** legend url*/\r\n  public legendURL: string;\r\n\r\n  /** whether layer is editable*/\r\n  public editable: Boolean;\r\n\r\n  /** metadata URL*/\r\n  public metadataURL: string;\r\n\r\n  /** metadata URL*/\r\n  public datasetURL: string;\r\n\r\n  /** whether layer is themable*/\r\n  public thematic: Boolean;\r\n  \r\n  /** geometry type*/\r\n  public geometryType: string;\r\n  \r\n\r\n}\r\n","import { Cartography } from './cartography.model';\r\nimport { Injectable, Injector } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport { RestService } from '../angular-hal/src/lib/rest.service';\r\nimport { Connection } from '../connection/connection.model';\r\nimport { Service } from '../service/service.model';\r\n\r\n/** Cartography manager service */\r\n@Injectable()\r\nexport class CartographyService extends RestService<Cartography> {\r\n\r\n  /** API resource path */\r\n  public CARTOGRAPHY_API = 'cartographies';\r\n\r\n  /** constructor */\r\n  constructor(injector: Injector, private http: HttpClient) {\r\n    super(Cartography, \"cartographies\", injector);\r\n  }\r\n\r\n  /** remove cartography*/\r\n  remove(item: Cartography) {\r\n    return this.http.delete(item._links.self.href);\r\n\r\n  }\r\n\r\n  /** save cartography*/\r\n  save(item: Cartography): Observable<any> {\r\n    let result: Observable<Object>;\r\n\r\n    let cartographyConnection:any={};\r\n    cartographyConnection._links = {};\r\n    cartographyConnection._links.self = {};\r\n    cartographyConnection._links.self.href = \"\";\r\n     \r\n    let cartographyService:any={};\r\n    cartographyService._links = {};\r\n    cartographyService._links.self = {};\r\n    cartographyService._links.self.href = \"\";\r\n    \r\n    let cartographySelectionService:any = {};\r\n    cartographySelectionService._links = {};\r\n    cartographySelectionService._links.self = {};\r\n    cartographySelectionService._links.self.href = \"\";\r\n\r\n    if (item.service != null) {\r\n      cartographyService=  item.service;\r\n      if (typeof item.service._links != 'undefined') {\r\n        item.service = item.service._links.self.href;\r\n      }\r\n    }\r\n\r\n    if (item.selectionService != null) {\r\n      cartographySelectionService = item.selectionService\r\n      if (typeof item.selectionService._links != 'undefined') {\r\n        item.selectionService = item.selectionService._links.self.href;\r\n      }\r\n    }\r\n\r\n    if (item.connection != null) {\r\n      cartographyConnection=  item.connection;\r\n      if (typeof item.connection._links != 'undefined') {\r\n        item.connection = item.connection._links.self.href;\r\n      }\r\n    }\r\n\r\n    if (item._links != null) {\r\n\r\n      //update relations\r\n      delete item.connection;\r\n      delete item.service;\r\n      delete item.selectionService;\r\n\r\n      if (cartographyConnection._links.self.href == '') {\r\n        item.deleteRelation('spatialSelectionConnection', cartographyConnection).subscribe(result => {\r\n        }, error => console.error(error));\r\n      } else {\r\n        item.substituteRelation('spatialSelectionConnection', cartographyConnection).subscribe(result => {\r\n        }, error => console.error(error));\r\n      }\r\n\r\n      if (cartographyService._links.self.href == '') {\r\n        item.deleteRelation('service', cartographyService).subscribe(result => {\r\n        }, error => console.error(error));\r\n      } else {\r\n        item.substituteRelation('service', cartographyService).subscribe(result => {\r\n        }, error => console.error(error));\r\n      }\r\n\r\n      if (cartographySelectionService._links.self.href == '') {\r\n        item.deleteRelation('spatialSelectionService', cartographySelectionService).subscribe(result => {\r\n        }, error => console.error(error));\r\n      } else {\r\n        item.substituteRelation('spatialSelectionService', cartographySelectionService).subscribe(result => {\r\n        }, error => console.error(error));\r\n      }\r\n\r\n      result = this.http.put(item._links.self.href, item);\r\n\r\n    } else {\r\n      result = this.http.post(this.resourceService.getResourceUrl(this.CARTOGRAPHY_API), item);\r\n    }\r\n    return result;\r\n  }\r\n\r\n}\r\n","import {Resource} from '../angular-hal/src/lib/resource';\r\nimport {Cartography} from './cartography.model';\r\nimport {Role} from '../role/role.model';\r\n/**\r\n * Cartography group\r\n */\r\nexport class CartographyGroup extends Resource {\r\n  /** id */\r\n  public id: number;  \r\n  /** name*/\r\n  public name: string;\r\n  /** type*/\r\n  public type: string;\r\n  /** members*/\r\n  public members: Cartography[];\r\n  /** roles*/\r\n  public roles: Role[];\r\n\r\n}\r\n","import { CartographyGroup } from './cartography-group.model';\r\nimport { Injectable, Injector } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport {RestService} from '../angular-hal/src/lib/rest.service';\r\n\r\n/** CartographyGroup manager service */\r\n@Injectable()\r\nexport class CartographyGroupService extends RestService<CartographyGroup> {\r\n  \r\n\r\n  /** API resource path */\r\n  public CARTOGRAPHY_GROUP_API ='cartography-groups';\r\n\r\n  /** constructor */\r\n  constructor(injector: Injector,private http: HttpClient) {\r\n    super(CartographyGroup, \"cartography-groups\", injector);\r\n  }\r\n  \r\n  /** remove cartography group*/\r\n  remove(item: CartographyGroup) {\r\n    return this.http.delete(item._links.self.href);\r\n   \r\n  }\r\n  \r\n  /** save cartography group*/\r\n  save(item: CartographyGroup): Observable<any> {\r\n    let result: Observable<Object>;\r\n    if (item._links!=null) {\r\n      result = this.http.put(item._links.self.href, item);\r\n    } else {\r\n      result = this.http.post(this.resourceService.getResourceUrl(this.CARTOGRAPHY_GROUP_API) , item);\r\n    }\r\n    return result;\r\n  }\r\n  \r\n}\r\n","import {Resource} from '../angular-hal/src/lib/resource';\r\nimport { Territory } from '../territory/territory.model';\r\nimport { Cartography } from './cartography.model';\r\n/**\r\n * Cartography availability model\r\n */\r\nexport class CartographyAvailability extends Resource {\r\n  /** territory*/\r\n  public territory: Territory;\r\n  \r\n  /** system created date*/\r\n  public createdDate: any;\r\n  \r\n  /** cartography*/\r\n  public cartography: Cartography;\r\n}\r\n","import { CartographyAvailability } from './cartography-availability.model';\r\nimport { Injectable, Injector } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport {RestService} from '../angular-hal/src/lib/rest.service';\r\n\r\n/** CartographyAvailability manager service */\r\n@Injectable() \r\nexport class CartographyAvailabilityService extends RestService<CartographyAvailability> {\r\n  \r\n\r\n  /** API resource path */\r\n  public CARTOGRAPHY_AVAILABILITY_API = 'cartography-availabilities';\r\n\r\n  /** constructor */\r\n  constructor(injector: Injector,private http: HttpClient) {\r\n    super(CartographyAvailability, \"cartography-availabilities\", injector);\r\n  }\r\n  \r\n  /** remove cartography availability*/\r\n  remove(item: CartographyAvailability) {\r\n    return this.http.delete(item._links.self.href);\r\n   \r\n  }\r\n  \r\n  /** save cartography availability*/\r\n  save(item: CartographyAvailability): Observable<any> {\r\n    let result: Observable<Object>;\r\n    if (item._links!=null) {\r\n      result = this.http.put(item._links.self.href, item);\r\n      if (item.cartography !=null){\r\n          item.substituteRelation('cartography',item.cartography).subscribe(result => {\r\n      \r\n      }, error => console.error(error));\r\n      }\r\n      if (item.territory !=null){\r\n          item.substituteRelation('territory',item.territory).subscribe(result => {\r\n      \r\n      }, error => console.error(error));\r\n      }\r\n    } else {\r\n      item.territory = item.territory._links.self.href;\r\n      item.cartography = item.cartography._links.self.href;\r\n  \r\n      result = this.http.post(this.resourceService.getResourceUrl(this.CARTOGRAPHY_AVAILABILITY_API) , item);\r\n    }\r\n    return result;\r\n  }\r\n  \r\n}\r\n","import {Resource} from '../angular-hal/src/lib/resource';\r\nimport { TerritoryType } from '../territory/territory-type.model';\r\nimport { Cartography } from './cartography.model';\r\n/**\r\n * Cartography availability model\r\n */\r\nexport class CartographyFilter extends Resource {\r\n \r\n  /** name*/\r\n  public name: string;\r\n\r\n  /** required */\r\n  public required: boolean;\r\n\r\n  /** type*/\r\n  public type: string;\r\n\r\n  /** Territorial level. */\r\n  public territorialLevel: TerritoryType;\r\n  \r\n  /** column */\r\n  public column: string;\r\n\r\n  /** values*/  \r\n  public values: string;\r\n\r\n  /** value*/  \r\n  public valueType: string;\r\n\r\n  /** cartography*/\r\n  public cartography: Cartography;\r\n\r\n\r\n}\r\n","import { CartographyFilter } from './cartography-filter.model';\r\nimport { Injectable, Injector } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport {RestService} from '../angular-hal/src/lib/rest.service';\r\n\r\n/** CartographyFilter manager service */\r\n@Injectable() \r\nexport class CartographyFilterService extends RestService<CartographyFilter> {\r\n  \r\n\r\n  /** API resource path */\r\n  public CARTOGRAPHY_FILTER_API = 'cartography-filters';\r\n\r\n  /** constructor */\r\n  constructor(injector: Injector,private http: HttpClient) {\r\n    super(CartographyFilter, \"cartography-filters\", injector);\r\n  }\r\n  \r\n  /** remove cartography filter*/\r\n  remove(item: CartographyFilter) {\r\n    return this.http.delete(item._links.self.href);\r\n   \r\n  }\r\n  \r\n  /** save cartography availability*/\r\n  save(item: CartographyFilter): Observable<any> {\r\n    let result: Observable<Object>;\r\n    if (item._links!=null) {\r\n      result = this.http.put(item._links.self.href, item);\r\n      if (item.cartography !=null){\r\n          item.substituteRelation('cartography',item.cartography).subscribe(result => {\r\n      }, error => console.error(error));\r\n      }\r\n\r\n      if(item.territorialLevel != null && item.territorialLevel != undefined ){\r\n        item.substituteRelation('territorialLevel',item.territorialLevel).subscribe(result => {\r\n        }, error => console.error(error));\r\n      }\r\n     \r\n    } else {\r\n      \r\n      item.cartography = item.cartography._links.self.href;\r\n      item.territorialLevel=item.territorialLevel._links.self.href;\r\n      \r\n      result = this.http.post(this.resourceService.getResourceUrl(this.CARTOGRAPHY_FILTER_API) , item);\r\n    }\r\n    return result;\r\n  }\r\n  \r\n}\r\n","import {Resource} from '../angular-hal/src/lib/resource';\r\nimport {Cartography} from './cartography.model'; \r\n/**\r\n * Service parameter model\r\n */\r\nexport class CartographyParameter extends Resource {\r\n  /** name*/\r\n  public name: string;\r\n  \r\n  /** type*/\r\n  public type: string;\r\n    \r\n  /** value*/  \r\n  public value: string;\r\n  \r\n  /** order*/  \r\n  public order: string;\r\n\r\n  /** cartography*/\r\n  public cartography: Cartography;\r\n\r\n}\r\n","import { CartographyParameter } from './cartography-parameter.model';\r\nimport { Injectable, Injector } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport {RestService} from '../angular-hal/src/lib/rest.service';\r\n\r\n/** Service parameter manager service */\r\n@Injectable() \r\nexport class CartographyParameterService extends RestService<CartographyParameter> {\r\n\r\n  /** API resource path */\r\n  public CARTOGRAPHY_PARAMETER_API = 'cartography-parameters';\r\n\r\n  /** constructor */\r\n  constructor(injector: Injector,private http: HttpClient) {\r\n    super(CartographyParameter, \"cartography-parameters\", injector);\r\n  }\r\n  \r\n  /** remove service parameter*/\r\n  remove(item: CartographyParameter) {\r\n    return this.http.delete(item._links.self.href);\r\n   \r\n  }\r\n  \r\n  /** save service parameter*/\r\n  save(item: CartographyParameter): Observable<any> {\r\n    let result: Observable<Object>;\r\n    if (item._links!=null) {\r\n      \r\n      \r\n      if (item.cartography !=null){\r\n          let cartography =  item.cartography;\r\n          delete item.cartography;\r\n          item.substituteRelation('cartography',cartography).subscribe(result => {            \r\n          \r\n      }, error => console.error(error));\r\n      }\r\n      result = this.http.put(item._links.self.href, item);\r\n      \r\n      \r\n    } else {\r\n      item.cartography = item.cartography._links.self.href;\r\n  \r\n      result = this.http.post(this.resourceService.getResourceUrl(this.CARTOGRAPHY_PARAMETER_API) , item);\r\n    }\r\n    return result;\r\n  }\r\n  \r\n}\r\n","import {Resource} from '../angular-hal/src/lib/resource';\r\nimport {CartographyGroup} from './cartography-group.model';\r\n/**\r\n * Background model\r\n */\r\nexport class Background extends Resource {\r\n  /** id */\r\n  public id: number;  \r\n  \r\n  /** name*/\r\n  public name: string;\r\n\r\n  /** description*/\r\n  public description: string;\r\n\r\n  /** image */\r\n  public image: string;\r\n\r\n  /** whether background is active*/\r\n  public active: Boolean;\r\n  \r\n  /** system created date*/\r\n  public createdDate: any;\r\n\r\n  /** cartography group*/\r\n  public cartographyGroup: CartographyGroup;\r\n}\r\n","import { Background } from './background.model';\r\nimport { Injectable, Injector } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport {RestService} from '../angular-hal/src/lib/rest.service';\r\n\r\n/** Background manager service */\r\n@Injectable()\r\nexport class BackgroundService extends RestService<Background> {\r\n\r\n  /** API resource path */\r\n  public BACKGROUND_API = 'backgrounds';\r\n\r\n  /** constructor */\r\n  constructor(injector: Injector,private http: HttpClient) {\r\n    super(Background, \"backgrounds\", injector);\r\n  }\r\n  \r\n  /** remove background*/\r\n  remove(item: Background) {\r\n    return this.http.delete(item._links.self.href);   \r\n  }\r\n  \r\n  /** save background*/\r\n  save(item: Background): Observable<any> {\r\n    let result: Observable<Object>;\r\n    let backgroundCartographyGroup:any = {}         \r\n    \r\n    backgroundCartographyGroup._links= {};\r\n    backgroundCartographyGroup._links.self = {};\r\n    backgroundCartographyGroup._links.self.href=\"\";\r\n    item.cartographyGroup;\r\n\r\n    if (item.cartographyGroup!=null){\r\n      backgroundCartographyGroup = item.cartographyGroup;\r\n        if (typeof item.cartographyGroup._links!= 'undefined') { \r\n            item.cartographyGroup = item.cartographyGroup._links.self.href;\r\n        }    \r\n     }\r\n\r\n    if (item._links!=null) {\r\n      //update relations\r\n      delete item.cartographyGroup;        \r\n      \r\n      if (backgroundCartographyGroup._links.self.href==''){\r\n         item.deleteRelation('cartographyGroup',backgroundCartographyGroup).subscribe(result => {     \r\n\r\n          \r\n             }, error => console.error(error));\r\n          \r\n      } else {\r\n          item.substituteRelation('cartographyGroup',backgroundCartographyGroup).subscribe(result => {\r\n         \r\n\r\n      \r\n            }, error => console.error(error));           \r\n       } \r\n       \r\n         \r\n      result = this.http.put(item._links.self.href, item);\r\n\r\n           \r\n    } else {\r\n      result = this.http.post(this.resourceService.getResourceUrl(this.BACKGROUND_API) , item);\r\n    }\r\n    return result;\r\n  }\r\n  \r\n}\r\n","import {Resource} from '../angular-hal/src/lib/resource';\r\nimport {TreeNode} from './tree-node.model';\r\nimport {Role} from '../role/role.model';    \r\n/**\r\n * Tree model\r\n */\r\nexport class Tree extends Resource {\r\n  /** id */\r\n  public id: number;\r\n  /** name */\r\n  public name: string;\r\n  /** description */\r\n  public description: string;\r\n  /** image */\r\n  public image: string;\r\n  /** nodes */\r\n  public nodes: TreeNode[];\r\n  /** available roles */\r\n  public availableRoles : Role[];\r\n\r\n}\r\n","import { Tree } from './tree.model';\r\nimport { Injectable, Injector } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport {RestService} from '../angular-hal/src/lib/rest.service';\r\n\r\n/** Tree manager service */\r\n@Injectable()\r\nexport class TreeService extends RestService<Tree> {\r\n  \r\n  /** API resource path */\r\n  public TREE_API = 'trees';\r\n\r\n  /** constructor */\r\n  constructor(injector: Injector,private http: HttpClient) {\r\n    super(Tree, \"trees\", injector);\r\n  }\r\n  \r\n  /** remove tree*/\r\n  remove(item: Tree) {\r\n    return this.http.delete(item._links.self.href);\r\n   \r\n  }\r\n  \r\n  /** save tree*/\r\n  save(item: Tree): Observable<any> {\r\n    let result: Observable<Object>;\r\n    if (item._links!=null) {\r\n      \r\n      result = this.http.put(item._links.self.href, item);\r\n    } else {\r\n      result = this.http.post(this.resourceService.getResourceUrl(this.TREE_API) , item);\r\n    }\r\n    return result;\r\n  }\r\n  \r\n}\r\n","import {Resource} from '../angular-hal/src/lib/resource';\r\nimport {Cartography} from '../cartography/cartography.model';\r\nimport {Tree} from './tree.model';\r\n/**\r\n * Tree node model\r\n */\r\nexport class TreeNode extends Resource {\r\n  /** name */\r\n  public name: string;\r\n  /** tooltip*/\r\n  public tooltip: string;\r\n  /** description*/\r\n  public description: string;\r\n  /** datasetURL*/\r\n  public datasetURL: string;\r\n  /** metadataURL*/\r\n  public metadataURL: string;\r\n  /** order*/\r\n  public order : number;\r\n  /** whether tree node is active*/\r\n  public active: boolean;\r\n  /** parent tree node */\r\n  public radio: boolean;\r\n  /** parent tree node */\r\n  public parent: TreeNode;\r\n  /** displayed cartography */  \r\n  public cartography: Cartography;\r\n  /** tree */  \r\n  public tree: Tree;\r\n\r\n}\r\n","import { TreeNode } from './tree-node.model';\r\nimport { Injectable, Injector } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport {RestService} from '../angular-hal/src/lib/rest.service';\r\n\r\n/** Tree node manager service */\r\n@Injectable() \r\nexport class TreeNodeService extends RestService<TreeNode> {\r\n  \r\n  /** API resource path */\r\n  public TREE_NODE_API = 'tree-nodes';\r\n\r\n  /** constructor */\r\n  constructor(injector: Injector,private http: HttpClient) {\r\n    super(TreeNode, \"tree-nodes\", injector);\r\n  }\r\n  \r\n  /** remove tree node*/\r\n  remove(item: TreeNode) {\r\n    return this.http.delete(item._links.self.href);\r\n   \r\n  }\r\n  \r\n  /** save tree node*/\r\n  save(item: TreeNode): Observable<any> {\r\n    let result: Observable<Object>;\r\n    if (item._links!=null) {\r\n      const itemTree = item.tree;\r\n      const itemCartography = item.cartography;\r\n      const itemParent = item.parent;\r\n        \r\n      delete item.tree;\r\n      delete item.cartography;\r\n      delete item.parent;\r\n        \r\n      result = this.http.put(item._links.self.href, item);\r\n      if (itemTree !=null){\r\n          item.substituteRelation('tree',itemTree).subscribe(result => {\r\n      \r\n          }, error => console.error(error));\r\n      }\r\n      if (itemCartography !=null){\r\n          item.substituteRelation('cartography',itemCartography).subscribe(result => {\r\n      \r\n          }, error => console.error(error));\r\n      }\r\n      if (itemParent !=null){\r\n          item.substituteRelation('parent',itemParent).subscribe(result => {\r\n      \r\n          }, error => console.error(error));\r\n      }\r\n      \r\n    } else {\r\n      if (item.tree && item.tree._links && item.tree._links.self) {\r\n        item.tree = item.tree._links.self.href;\r\n      }\r\n      if (item.cartography && item.cartography._links && item.cartography._links.self) {\r\n        item.cartography = item.cartography._links.self.href;\r\n      }      \r\n      result = this.http.post(this.resourceService.getResourceUrl(this.TREE_NODE_API) , item);\r\n    }\r\n    return result;\r\n  }\r\n  \r\n}\r\n","import {Resource} from '../angular-hal/src/lib/resource';\r\nimport {Tree} from '../tree/tree.model';\r\nimport {Role} from '../role/role.model';\r\nimport {CartographyGroup} from '../cartography/cartography-group.model';\r\nimport {ApplicationParameter} from './application-parameter.model';\r\nimport {ApplicationBackground} from './application-background.model';\r\n\r\n//FIXME ensure application creation in admin app upon initialization (as it is done with Roles and default Users)\r\n/** Territorial appliction name */\r\nexport const TERRITORIAL_APP_NAME:string  = \"AplicaciÃ³n Territorial\";\r\n\r\n/**\r\n * Application model\r\n */\r\nexport class Application extends Resource {\r\n  /** id */\r\n  public id: number;  \r\n  \r\n  /** name*/\r\n  public name: string;\r\n\r\n  /** type*/\r\n  public type: string;\r\n  \r\n  /** title*/\r\n  public title: string;\r\n  \r\n  /** theme*/\r\n  public theme: string;\r\n\r\n    \r\n  /** urlTemplate*/\r\n  public jspTemplate: string;\r\n  \r\n  \r\n  /** system created date*/\r\n  public createdDate: any;\r\n  \r\n  /** available roles*/\r\n  public availableRoles : Role[];\r\n  \r\n  /** trees*/\r\n  public trees : Tree[];\r\n  \r\n  /** scales (comma-separated values)*/\r\n  public scales: string[];\r\n  \r\n  /** projections(comma-separated EPSG codes)*/\r\n  public srs: string;\r\n  \r\n  /** whether application tree will auto refresh*/  \r\n  public treeAutoRefresh: Boolean;\r\n\r\n  /** backgrounds*/\r\n  public backgrounds: ApplicationBackground[];\r\n\r\n  /** situation map*/\r\n  public situationMap: CartographyGroup;    \r\n  \r\n  /** parameters*/\r\n  public parameters: ApplicationParameter[];\r\n}\r\n","import { Application } from './application.model';\r\nimport { Injectable, Injector } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport {RestService} from '../angular-hal/src/lib/rest.service';\r\nimport { CartographyGroup } from '../cartography/cartography-group.model';\r\n\r\n/** Application manager service */\r\n@Injectable()\r\nexport class ApplicationService extends RestService<Application> {\r\n  \r\n\r\n  /** API resource path */\r\n  public APPLICATION_API = 'applications';\r\n\r\n  /** constructor */\r\n  constructor(injector: Injector,private http: HttpClient) {\r\n    super(Application, \"applications\", injector);\r\n  }\r\n  \r\n  /** remove application*/\r\n  remove(item: Application) {\r\n    return this.http.delete(item._links.self.href);\r\n   \r\n  }\r\n  \r\n  /** save application*/\r\n  save(item: Application): Observable<any> {\r\n    let result: Observable<Object>;\r\n\r\n    let applicationSituationMap:any = {};\r\n    applicationSituationMap._links= {};\r\n    applicationSituationMap._links.self = {};\r\n    applicationSituationMap._links.self.href=\"\";\r\n     \r\n    if (item.situationMap!=null){\r\n        applicationSituationMap=item.situationMap;\r\n        if (typeof item.situationMap._links!= 'undefined') { \r\n            item.situationMap = item.situationMap._links.self.href;\r\n        }       \r\n     }\r\n\r\n    if (item._links!=null) {\r\n      //update relations\r\n      delete item.situationMap;        \r\n      \r\n      if (applicationSituationMap._links.self.href==''){\r\n         item.deleteRelation('situationMap',applicationSituationMap).subscribe(result => {     \r\n             \r\n             }, error => console.error(error));\r\n          \r\n      } else {\r\n          item.substituteRelation('situationMap',applicationSituationMap).subscribe(result => {\r\n         \r\n      \r\n            }, error => console.error(error));           \r\n       } \r\n       \r\n         \r\n      result = this.http.put(item._links.self.href, item);\r\n\r\n           \r\n    } else {\r\n      result = this.http.post(this.resourceService.getResourceUrl(this.APPLICATION_API) , item);\r\n    }\r\n    return result;\r\n  }\r\n    \r\n    \r\n  \r\n}\r\n","import {Resource} from '../angular-hal/src/lib/resource';\r\nimport {Background} from '../cartography/background.model';\r\nimport {Application} from './application.model'; \r\n\r\n/**\r\n * Application background model\r\n */\r\nexport class ApplicationBackground extends Resource {\r\n  /** order*/\r\n  public order: Number;\r\n  \r\n  /** background*/\r\n  public background: Background;\r\n  \r\n  /** application*/\r\n  public application: Application;\r\n\r\n}\r\n","import { ApplicationBackground } from './application-background.model';\r\nimport { Injectable, Injector } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport {RestService} from '../angular-hal/src/lib/rest.service';\r\n\r\n/** Application background manager service */\r\n@Injectable() \r\nexport class ApplicationBackgroundService extends RestService<ApplicationBackground> {\r\n  \r\n\r\n  /** API resource path */\r\n  public APPLICATION_BACKGROUND_API ='application-backgrounds';\r\n\r\n  /** constructor */\r\n  constructor(injector: Injector,private http: HttpClient) {\r\n    super(ApplicationBackground, \"application-backgrounds\", injector);\r\n  }\r\n  \r\n  /** remove application background*/\r\n  remove(item: ApplicationBackground) {\r\n    return this.http.delete(item._links.self.href);\r\n   \r\n  }\r\n  \r\n  /** save application background*/\r\n  save(item: ApplicationBackground): Observable<any> {\r\n    let result: Observable<Object>;\r\n    if (item._links!=null) {\r\n      result = this.http.put(item._links.self.href, item);\r\n      if (item.application !=null){\r\n          item.substituteRelation('application',item.application).subscribe(result => {\r\n      \r\n      }, error => console.error(error));\r\n      }\r\n      if (item.background !=null){\r\n          item.substituteRelation('background',item.background).subscribe(result => {\r\n      \r\n      }, error => console.error(error));\r\n      }\r\n      \r\n    } else {\r\n      item.application = item.application._links.self.href;\r\n      item.background = item.background._links.self.href;\r\n  \r\n      result = this.http.post(this.resourceService.getResourceUrl(this.APPLICATION_BACKGROUND_API) , item);\r\n    }\r\n    return result;\r\n  }\r\n  \r\n}\r\n","import {Resource} from '../angular-hal/src/lib/resource';\r\nimport {Application} from './application.model'; \r\n\r\n/**\r\n * Application parameter model \r\n */\r\nexport class ApplicationParameter extends Resource {\r\n  /** name*/\r\n  public name: string;\r\n  \r\n  /** type*/\r\n  public type: string;\r\n  \r\n  /** value*/    \r\n  public value: string;\r\n  \r\n  /** application*/\r\n  public application: Application;\r\n\r\n}\r\n","import { ApplicationParameter } from './application-parameter.model';\r\nimport { Injectable, Injector } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport {RestService} from '../angular-hal/src/lib/rest.service';\r\n\r\n/** Application parameter manager service */\r\n@Injectable() \r\nexport class ApplicationParameterService extends RestService<ApplicationParameter> {\r\n  \r\n\r\n  /** API resource path */\r\n  public APPLICATION_PARAMETER_API = 'application-parameters';\r\n\r\n  /** constructor */\r\n  constructor(injector: Injector,private http: HttpClient) {\r\n    super(ApplicationParameter, \"application-parameters\", injector);\r\n  }\r\n  \r\n  /** remove application*/\r\n  remove(item: ApplicationParameter) {\r\n    return this.http.delete(item._links.self.href);\r\n   \r\n  }\r\n  \r\n  /** save application*/\r\n  save(item: ApplicationParameter): Observable<any> {\r\n    let result: Observable<Object>;\r\n    if (item._links!=null) {\r\n      result = this.http.put(item._links.self.href, item);\r\n      if (item.application !=null){\r\n          item.substituteRelation('application',item.application).subscribe(result => {\r\n      \r\n      }, error => console.error(error));\r\n      }\r\n      \r\n    } else {\r\n      item.application = item.application._links.self.href;\r\n  \r\n      result = this.http.post(this.resourceService.getResourceUrl(this.APPLICATION_PARAMETER_API) , item);\r\n    }\r\n    return result;\r\n  }\r\n  \r\n}\r\n","import {Resource} from '../angular-hal/src/lib/resource';\r\n/**\r\n * Connection model\r\n */\r\nexport class CodeList extends Resource {\r\n  /** id */\r\n  public id: number;\r\n  /** name*/\r\n  public codeListName: string;\r\n  /** type*/\r\n  public value: string;\r\n  /** user*/\r\n  public description: string;\r\n\r\n\r\n}\r\n","import { CodeList } from './codelist.model';\r\nimport { Injectable, Injector } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport {RestService} from '../angular-hal/src/lib/rest.service';\r\n\r\n/** Connection manager service */\r\n@Injectable()\r\nexport class CodeListService extends RestService<CodeList> {\r\n  \r\n \r\n  /** API resource path */\r\n  public CODELIST_API = 'codelist-values';\r\n\r\n  /** constructor */\r\n  constructor(injector: Injector,private http: HttpClient) {\r\n    super(CodeList, \"codelist-values\", injector);\r\n  }\r\n  \r\n  /** remove connection*/\r\n  remove(item: CodeList) {\r\n    return this.http.delete(item._links.self.href);\r\n   \r\n  }\r\n  \r\n  /** save connection*/\r\n  save(item: CodeList): Observable<any> {\r\n    let result: Observable<Object>;\r\n    if (item._links!=null) {\r\n      \r\n      result = this.http.put(item._links.self.href, item);\r\n    } else {\r\n      result = this.http.post(this.resourceService.getResourceUrl(this.CODELIST_API ), item);\r\n    }\r\n    return result;\r\n  }\r\n  \r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { BehaviorSubject, Observable, of } from 'rxjs';\r\n\r\n/** Layer model: configure Layer data and displaying configuration */ \r\nexport class Layer {\r\n  // Display data\r\n  /** layer visibility*/  \r\n  visibility: boolean = false;\r\n  /** Transparency (Transparent) 0-1 (Opaque)*/\r\n  opacity: number = 1.0;\r\n\r\n  // Configuration data\r\n  /** title*/\r\n  title: string;\r\n  \r\n  /** Id to index*/\r\n  id: any;\r\n  \r\n  /** Service Name*/\r\n  serverName: string;\r\n\r\n  /** Service attributions*/\r\n  attributions: string = \"\";\r\n\r\n  /** Request format (image/jpg, ...)*/\r\n  format: string;\r\n  \r\n  /** Request service version*/\r\n  version:string;\r\n\r\n  /** Service url*/\r\n  url: string;\r\n\r\n  /** Is base layer?*/\r\n  isBaseLayer: boolean;\r\n\r\n  /** Request layer name*/\r\n  name: string;\r\n\r\n  /** Is tiled?*/\r\n  tiled: boolean;\r\n  \r\n  /** Description*/\r\n  desc: string = \"\";\r\n  \r\n  /**  Transparent request parameter?*/\r\n  url_transparent: string = \"true\";\r\n  \r\n  /** Request Background parameter color (Hexa)*/\r\n  url_bgcolor: string = \"0x000000\";\r\n  \r\n  /** Request Exception URL*/\r\n  url_exception: string;\r\n  \r\n  /** Extent for tiled services*/\r\n  extent: any = null;\r\n\r\n  /** Tile height (if not defined, the default map is taken)*/\r\n  tileHeight?:number;\r\n  \r\n  /** Tile width (if not defined, the default map is taken)*/\r\n  tileWidth?:number;\r\n  \r\n  /** Enabled for GetFeatureInfo requests (enabled to use the viewer features information tool)*/\r\n  queryable?:boolean = false;\r\n  \r\n  /** Minimum scale*/\r\n  minimumScale?:number;\r\n  \r\n  /** Maximum scale*/\r\n  maximumScale?:number;\r\n  \r\n  /** List of available CRS*/\r\n  projections?:string;\r\n  \r\n  /** Features information URL*/\r\n  infoUrl?:string;\r\n  \r\n  /** Metadata information URL*/\r\n  metadataUrl?:string;\r\n  \r\n  /** Legend URL*/\r\n  legendUrl?:string;\r\n  \r\n  /** Array of OptionalParameter object that defines other optional parameter-value pairs for the request (TIME ...)*/\r\n  optionalParameters?:Array<OptionalParameter>;\r\n}\r\n\r\n/** Optional parameter model: configure parameter-value pair to add to the request layer URL */\r\nexport class OptionalParameter {\r\n  /** key*/key:string;\r\n  /** value*/value:string;\r\n}\r\n\r\n/** Layer configuration model: modify the configuration of a layer when interacting with the map (make visible, move the layer ...) */\r\nexport class LayerConfiguration {\r\n  /** Identifier to index*/id: any;\r\n  /** Layer visibility*/visibility: boolean;\r\n  /** Layer transparency (Transparent) 0-1 (Opaque)*/opacity: number;\r\n  /** Layer position*/position: number;\r\n}\r\n\r\n/** Layer group model*/\r\nexport class LayerGroup {\r\n  /** initially activated (all visible layers)*/active?:boolean;\r\n  /** group name*/name?: String;\r\n  /** group id*/id: String;\r\n  /** array of child Layers*/layers: Array<Layer>;\r\n}\r\n\r\n/** Map options configuration model*/\r\nexport class MapOptionsConfiguration {\r\n  /** scales*/scales?: string;\r\n  /** projections*/projections?: string;\r\n  /** minimum scale*/minScale?:number;\r\n  /** maximum scale*/maxScale?:number;\r\n  /** extent*/extent?:any;\r\n  /** maximum extent*/maxExtent?:any;\r\n  /** tile width*/tileWidth?:number;\r\n  /** tile height*/tileHeight?:number;\r\n  /** parameters*/parameters?: Array<OptionalParameter>\r\n}\r\n\r\n/** Map component status model*/\r\nexport class MapComponentStatus {\r\n    /** loaded?*/loaded: boolean = false;\r\n}\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\n\r\n/** Map configuration manager service*/\r\nexport class MapConfigurationManagerService {\r\n  private layersSubject = new BehaviorSubject([]);\r\n  private layers: Array<Layer> = null;\r\n\r\n  private baseLayerGroupsSubject = new BehaviorSubject([]);\r\n  private baseLayerGroups: Array<LayerGroup> = null;\r\n\r\n  private layerConfigurationSubject = new BehaviorSubject([]);\r\n\r\n  private addLayersSubject = new BehaviorSubject([]);\r\n  private removeLayersSubject = new BehaviorSubject([]);\r\n\r\n  private situationMapConfigurationSubject = new BehaviorSubject([]);\r\n  private mapOptionsConfigurationSubject = new BehaviorSubject([]);\r\n\r\n  private mapComponentStatusSubject = new BehaviorSubject([]);\r\n\r\n  /** constructor*/\r\n  constructor() { \r\n   //\r\n  }\r\n  \r\n  /** layer count */\r\n  count = 0;\r\n\r\n  /** configure the overlay layers of the map, by passing as a parameter an array of objects of type Layer objects defining the layers to load.*/\r\n  loadLayersConfiguration(configuration) {\r\n    if (this.layers != null) {\r\n      this.clearLayers(false);\r\n    }\r\n    this.setLayers(configuration);\r\n  }\r\n  \r\n  /**configure the base layers of the map by passing as a parameter an array of objects of type LayerGroup each of them with the corresponding Layer objects defining the layers to load.*/\r\n  loadBaseLayersConfiguration(configuration) {\r\n    this.setBaseLayerGroups(configuration);\r\n  }\r\n\r\n  /** get base layer groups*/\r\n  getBaseLayerGroups(): Observable<LayerGroup[]> {\r\n    return this.baseLayerGroupsSubject.asObservable();\r\n  }\r\n\r\n  /** set base layer groups*/\r\n  setBaseLayerGroups(groups:Array<LayerGroup>) {\r\n    this.baseLayerGroups = groups;\r\n    this.refreshBaseLayerGroups();\r\n  }\r\n\r\n  private refreshBaseLayerGroups() {\r\n    // Send the new values so that all subscribers are updated\r\n    this.baseLayerGroupsSubject.next(this.baseLayerGroups);\r\n  }\r\n\r\n  /** get layers*/\r\n  getLayers(): Observable<Layer[]> {\r\n    return this.layersSubject.asObservable();\r\n  }\r\n\r\n  /** remove all layers from map*/\r\n  clearLayers(refresh:boolean) {\r\n    while(this.layers.length) {\r\n      this.layers.pop();\r\n    }\r\n    if (refresh) {\r\n      this.refreshLayers();\r\n    }\r\n  }\r\n\r\n  /** set layers*/\r\n  setLayers(layers:Array<Layer>) {\r\n    this.layers = layers;\r\n    this.refreshLayers();\r\n  }\r\n\r\n  /** add given layer to map*/\r\n  addLayer(layer:Layer) {\r\n    this.layers.push(layer);\r\n    this.refreshAddLayers(layer);\r\n  }\r\n\r\n  /** add given layer to map at given index*/\r\n  addLayerAt(layer:Layer, index:number) {\r\n    if (index == 0) {\r\n      this.layers = [layer].concat(this.layers);\r\n    } else if (index >= this.layers.length) {\r\n      this.layers.push(layer);\r\n    } else {\r\n      this.layers = this.layers.slice(0, index)\r\n                    .concat([layer])\r\n                    .concat(this.layers.slice(index, this.layers.length));\r\n    }\r\n    this.refreshAddLayers(layer);\r\n    this.refreshLayerConfiguration(layer.id, null, null, index);\r\n  }\r\n\r\n  /** remove given layer from map*/\r\n  removeLayer(layer:Layer) {\r\n    var index = this.layers.indexOf(layer);\r\n    this.removeLayerIndex(index);\r\n  }\r\n\r\n  /** remove layer with given id from map */\r\n  removeLayerId(id) {\r\n    var index = -1;\r\n    for (var i = 0, iLen = this.layers.length; i < iLen; i++) {\r\n      if (this.layers[i].id == id) {\r\n        index = i;\r\n        break;\r\n      }\r\n    }\r\n    this.removeLayerIndex(index);\r\n  }\r\n\r\n  /** remove layer at given index from map */\r\n  removeLayerIndex(index:number) {\r\n    var layer = this.layers[index];\r\n    this.layers.splice(index, 1);\r\n    this.refreshRemoveLayers(layer);\r\n  }\r\n\r\n  /** refresh layers */\r\n  private refreshLayers() {\r\n    // Send the new values so that all subscribers are updated\r\n    this.layersSubject.next(this.layers);\r\n  }\r\n\r\n  /** Observable for layers added */\r\n  getLayersAdded(): Observable<Layer[]> {\r\n    return this.addLayersSubject.asObservable();\r\n  }\r\n\r\n  private refreshAddLayers(layer:Layer) {\r\n    // Send the new values so that all subscribers are updated\r\n    this.addLayersSubject.next([layer]);\r\n  }\r\n\r\n  getLayersRemoved(): Observable<Layer[]> {\r\n    return this.removeLayersSubject.asObservable();\r\n  }\r\n\r\n  private refreshRemoveLayers(layer:Layer) {\r\n    // Send the new values so that all subscribers are updated\r\n    this.removeLayersSubject.next([layer]);\r\n  }\r\n\r\n  getLayerConfigurationListener(): Observable<LayerConfiguration[]> {\r\n    return this.layerConfigurationSubject.asObservable();\r\n  }\r\n\r\n  private getLayerIndexById(id:string):number{\r\n    var index = -1;\r\n    for (var i = 0, iLen = this.layers.length; i < iLen; i++) {\r\n      if (this.layers[i].id == id) {\r\n        index = i;\r\n        break;\r\n      }\r\n    }\r\n    return index;\r\n  }\r\n  \r\n  /** move layer with given id to the given index*/\r\n  moveLayer(id, index) {\r\n    var layerIndex = this.getLayerIndexById(id);\r\n    if (layerIndex != -1) {\r\n      var layer = this.layers.splice(layerIndex, 1);\r\n      this.layers = \r\n        this.layers.slice(0, index)\r\n        .concat(layer)\r\n        .concat(this.layers.slice(index, this.layers.length));\r\n    }\r\n    this.refreshLayerConfiguration(id, null, null, index);\r\n  }\r\n\r\n  /** change visibility of layer with given id to the given value*/\r\n  changeLayerVisibility(id, visibility) {\r\n    this.refreshLayerConfiguration(id, null, visibility, null);\r\n  }\r\n\r\n  /** change opacity of layer with given id to the given value*/\r\n  changeLayerOpacity(id, opacity) {\r\n    this.refreshLayerConfiguration(id, opacity, null, null);\r\n  }\r\n\r\n  private refreshLayerConfiguration(id, opacity, visibility, position) {\r\n    // Send the new values so that all subscribers are updated\r\n    var layer = new LayerConfiguration();\r\n    layer.id = id;\r\n    layer.opacity = opacity;\r\n    layer.visibility = visibility;\r\n    layer.position = position;\r\n    this.layerConfigurationSubject.next([layer]);\r\n  }\r\n\r\n  getSituationMapConfigurationListener(): Observable<Layer[]> {\r\n    return this.situationMapConfigurationSubject.asObservable();\r\n  }\r\n\r\n  /** configure the situation map of the map component by passing as a parameter an array of objects of type LayerGroup, each of them with the corresponding Layer objects defining the layers to load as situation map.*/\r\n  loadSituationMapConfiguration(layers:Array<Layer>) {\r\n    // Send the new values so that all subscribers are updated\r\n    this.situationMapConfigurationSubject.next(layers);\r\n  }\r\n\r\n  getMapOptionsConfigurationListener(): Observable<MapOptionsConfiguration[]> {\r\n    return this.mapOptionsConfigurationSubject.asObservable();\r\n  }\r\n\r\n  /** load map options configuration */\r\n  loadMapOptionsConfiguration(configuration:MapOptionsConfiguration) {\r\n    // Send the new values so that all subscribers are updated\r\n    this.mapOptionsConfigurationSubject.next([configuration]);\r\n  }\r\n\r\n  getMapComponentStatusListener(): Observable<MapComponentStatus[]> {\r\n    return this.mapComponentStatusSubject.asObservable();\r\n  }\r\n  \r\n  /** set map component status */\r\n  setMapComponentStatus(status:MapComponentStatus) {\r\n    //Notify the map component status\r\n    this.mapComponentStatusSubject.next([status]);\r\n  }\r\n\r\n}\r\n","import { Directive, Input, TemplateRef, ViewContainerRef } from '@angular/core';\r\nimport { Principal } from './principal.service';\r\n\r\n/**\r\n * @whatItDoes Conditionally includes an HTML element if current user has any\r\n * of the authorities passed as the `expression`.\r\n *\r\n * @howToUse\r\n * ```\r\n *     <some-element *sitmunHasAnyAuthority=\"'ROLE_ADMIN'\">...</some-element>\r\n *\r\n *     <some-element *sitmunHasAnyAuthority=\"['ROLE_ADMIN', 'ROLE_USER']\">...</some-element>\r\n * ```\r\n */\r\n@Directive({\r\n    selector: '[sitmunHasAnyAuthority]'\r\n})\r\nexport class HasAnyAuthorityDirective {\r\n    \r\n    /** authorities to check */\r\n    public authorities: string[]; \r\n    \r\n    /** constructor */\r\n    constructor(private principal: Principal, private templateRef: TemplateRef<any>, private viewContainerRef: ViewContainerRef) {\r\n    }\r\n    \r\n    /** territory to check authorities*/\r\n    @Input() territory: string;\r\n    \r\n    /** Set whether current user has any of the given authorities */\r\n    @Input()\r\n    set sitmunHasAnyAuthority(value: string|string[]) {\r\n        this.authorities = typeof value === 'string' ? [ <string> value ] : <string[]> value;\r\n        this.updateView();\r\n        // Get notified each time authentication state changes.\r\n        this.principal.getAuthenticationState().subscribe((identity) => this.updateView());\r\n    }\r\n    \r\n    /** update view */\r\n    private updateView(): void {\r\n        if (this.territory){\r\n        this.principal.hasAnyAuthorityOnTerritory(this.authorities,this.territory).then((result) => {\r\n            this.viewContainerRef.clear();\r\n            if (result) {\r\n                this.viewContainerRef.createEmbeddedView(this.templateRef);\r\n            }\r\n        });\r\n\r\n        } else {\r\n        this.principal.hasAnyAuthority(this.authorities).then((result) => {\r\n            this.viewContainerRef.clear();\r\n            if (result) {\r\n                this.viewContainerRef.createEmbeddedView(this.templateRef);\r\n            }\r\n        });\r\n        }\r\n    }\r\n}\r\n","import { Directive, Input, TemplateRef, ViewContainerRef } from '@angular/core';\r\nimport { Principal } from './principal.service';\r\n\r\n/**\r\n * @whatItDoes Conditionally includes an HTML element if current user has any\r\n * of the authorities passed as the `expression`.\r\n *\r\n * @howToUse\r\n * ```\r\n *     <some-element *sitmunHasAnyAuthority=\"'ROLE_ADMIN'\">...</some-element>\r\n *\r\n *     <some-element *sitmunHasAnyAuthority=\"['ROLE_ADMIN', 'ROLE_USER']\">...</some-element>\r\n * ```\r\n */\r\n@Directive({\r\n    selector: '[sitmunHasAnyAuthorityOnTerritory]'\r\n})\r\nexport class HasAnyAuthorityOnTerritoryDirective {\r\n\r\n    /** authorities to check */\r\n    public authorities: string[]; \r\n\r\n    /** territory to check authorities*/\r\n    public territory: string; \r\n\r\n    /** constructor */\r\n    constructor(private principal: Principal, private templateRef: TemplateRef<any>, private viewContainerRef: ViewContainerRef) {\r\n    }\r\n    \r\n    /** Set whether current user has any of the given authorities on territory */\r\n    @Input()\r\n    set sitmunHasAnyAuthorityOnTerritory(opts: any) {\r\n\r\n        this.authorities = typeof opts.authorities === 'string' ? [ <string> opts.authorities ] : <string[]> opts.authorities;\r\n        this.territory = opts.territory;\r\n        this.updateView();\r\n        // Get notified each time authentication state changes.\r\n        this.principal.getAuthenticationState().subscribe((identity) => this.updateView());\r\n    }\r\n    \r\n    /** update view */\r\n    private updateView(): void {\r\n        if (this.territory){\r\n        this.principal.hasAnyAuthorityOnTerritory(this.authorities,this.territory).then((result) => {\r\n            this.viewContainerRef.clear();\r\n            if (result) {\r\n                this.viewContainerRef.createEmbeddedView(this.templateRef);\r\n            }\r\n        });\r\n\r\n        } else {\r\n        this.principal.hasAnyAuthority(this.authorities).then((result) => {\r\n            this.viewContainerRef.clear();\r\n            if (result) {\r\n                this.viewContainerRef.createEmbeddedView(this.templateRef);\r\n            }\r\n        });\r\n        }\r\n    }\r\n}\r\n","import { NgModule, ModuleWithProviders } from '@angular/core';\r\n\r\nimport { CommonModule } from '@angular/common';\r\nimport {HttpClientModule, HTTP_INTERCEPTORS, HttpClient} from '@angular/common/http';\r\nimport { RouterModule } from '@angular/router';\r\n//import { AngularHalModule } from '../../lib/angular-hal';\r\nimport {CodeListService} from './codelist/codelist.service';\r\nimport {TerritoryService} from './territory/territory.service';\r\nimport {TerritoryTypeService} from './territory/territory-type.service';\r\nimport {TerritoryGroupTypeService} from './territory/territory-group-type.service';\r\nimport {UserPositionService} from './user/user-position.service';\r\nimport {UserConfigurationService} from './user/user-configuration.service';\r\nimport {RoleService} from './role/role.service';\r\nimport {UserService} from './user/user.service';\r\nimport {ConnectionService} from './connection/connection.service';\r\nimport {TaskService} from './task/task.service';\r\nimport {TaskTypeService} from './task/task-type.service';\r\nimport {TaskGroupService} from './task/task-group.service';\r\nimport {TaskParameterService} from './task/task-parameter.service';\r\nimport {TaskAvailabilityService} from './task/task-availability.service';\r\nimport {TaskUIService} from './task/task-ui.service';\r\nimport {ServiceService} from './service/service.service';\r\nimport {ServiceParameterService} from './service/service-parameter.service';\r\nimport {CartographyService} from './cartography/cartography.service';\r\nimport {CartographyAvailabilityService} from './cartography/cartography-availability.service';\r\nimport {CartographyFilterService} from './cartography/cartography-filter.service';\r\nimport {CartographyGroupService} from './cartography/cartography-group.service';\r\nimport {CartographyParameterService} from './cartography/cartography-parameter.service';\r\nimport {BackgroundService} from './cartography/background.service';\r\nimport {TreeService} from './tree/tree.service';\r\nimport {TreeNodeService} from './tree/tree-node.service';\r\nimport {ApplicationService} from './application/application.service';\r\nimport {ApplicationParameterService} from './application/application-parameter.service';\r\nimport {ApplicationBackgroundService} from './application/application-background.service';\r\nimport { MapConfigurationManagerService } from './map/map-configuration-manager.service';\r\nimport { AuthService } from './auth/auth.service';\r\nimport { Principal } from './auth/principal.service';\r\nimport { AuthInterceptor } from './auth/auth.interceptor';\r\nimport { AuthExpiredInterceptor } from './auth/auth-expired.interceptor';\r\nimport { HasAnyAuthorityDirective } from './auth/has-any-authority.directive';\r\nimport { HasAnyAuthorityOnTerritoryDirective } from './auth/has-any-authority-on-territory.directive';\r\nimport { LoginService } from './auth/login.service';\r\nimport { AccountService } from './account/account.service';\r\nimport {TranslateHttpLoader} from '@ngx-translate/http-loader';\r\nimport {TranslateLoader, TranslateModule} from '@ngx-translate/core';\r\nimport { TranslationService } from './translation/translation.service';\r\nimport { LanguageService } from './translation/language.service';\r\nimport { DashboardService } from './dashboard/dashboard.service';\r\n/** load i18n assets*/\r\nexport function createTranslateLoader(http: HttpClient) {\r\n  return new TranslateHttpLoader(http, './assets/i18n/', '.json');\r\n}\r\n\r\n\r\n/** SITMUN frontend core module */\r\n@NgModule({\r\n  imports: [\r\n    /*RouterModule,\r\n    HttpClientModule,\r\n    CommonModule,\r\n    AngularHalModule,*/\r\n    TranslateModule.forRoot({\r\n      loader: {\r\n        provide: TranslateLoader,\r\n        useFactory: (createTranslateLoader),\r\n        deps: [HttpClient]\r\n      }\r\n    }),\r\n  ],\r\n  declarations: [\r\n    HasAnyAuthorityDirective,\r\n    HasAnyAuthorityOnTerritoryDirective,\r\n  ],\r\n  exports: [\r\n    HasAnyAuthorityDirective,\r\n    HasAnyAuthorityOnTerritoryDirective,\r\n    TranslateModule\r\n  ]\r\n})\r\nexport class SitmunFrontendCoreModule {\r\n  static forRoot(): ModuleWithProviders {\r\n    return {\r\n      ngModule: SitmunFrontendCoreModule,\r\n      providers: [\r\n        CodeListService,\r\n        TerritoryService,\r\n        TerritoryTypeService,\r\n        TerritoryGroupTypeService,\r\n        RoleService,\r\n        AccountService,\r\n        AuthService,\r\n        UserService,\r\n        ConnectionService,\r\n        TaskService,\r\n        TaskTypeService,\r\n        TaskUIService,\r\n        TaskGroupService,\r\n        TaskParameterService,\r\n        TaskAvailabilityService,\r\n        ServiceService,\r\n        ServiceParameterService,\r\n        CartographyService,\r\n        CartographyGroupService,\r\n        CartographyAvailabilityService,\r\n        CartographyParameterService,\r\n        CartographyFilterService,\r\n        BackgroundService,\r\n        TreeService,\r\n        TreeNodeService,\r\n        ApplicationService,\r\n        ApplicationParameterService,\r\n        ApplicationBackgroundService,\r\n        AuthInterceptor,\r\n        AuthExpiredInterceptor,\r\n        Principal,\r\n        UserPositionService,\r\n        UserConfigurationService,\r\n        LoginService,\r\n        TranslationService,\r\n        LanguageService,\r\n        DashboardService,\r\n        MapConfigurationManagerService,\r\n        {\r\n          provide: HTTP_INTERCEPTORS,\r\n          useClass: AuthInterceptor,\r\n          multi: true\r\n        }\r\n        , {\r\n          provide: HTTP_INTERCEPTORS,\r\n          useClass: AuthExpiredInterceptor,\r\n          multi: true\r\n        }\r\n      ]\r\n    };\r\n  }\r\n}\r\n\r\n","import {ModuleWithProviders, NgModule} from '@angular/core';\r\nimport {HttpClient, HttpClientModule} from '@angular/common/http';\r\nimport {HalParam, RestService} from './rest.service';\r\nimport {ExternalService} from './external.service';\r\nimport {ResourceService} from './resource.service';\r\nimport {ExternalConfigurationHandlerInterface} from './external-configuration.handler';\r\n\r\nimport 'rxjs';\r\n\r\nimport {SubTypeBuilder} from './subtype-builder';\r\n\r\nexport {ExternalService} from './external.service';\r\nexport {RestService} from './rest.service';\r\nexport {Resource} from './resource';\r\nexport {ResourceArray} from './resource-array';\r\nexport {Sort} from './sort';\r\nexport {ResourceHelper} from './resource-helper';\r\nexport {ExternalConfiguration} from './ExternalConfiguration';\r\nexport {ExternalConfigurationHandlerInterface} from './external-configuration.handler';\r\nexport {HalOptions, HalParam} from './rest.service';\r\nexport {SubTypeBuilder} from './subtype-builder';\r\n\r\n\r\n/** Angular HAL module */\r\n@NgModule({\r\n    imports: [HttpClientModule],\r\n    declarations: [],\r\n    exports: [HttpClientModule],\r\n    providers: [\r\n        ExternalService,\r\n        HttpClient,\r\n        {\r\n            provide: ResourceService,\r\n            useClass: ResourceService,\r\n            deps: [ExternalService]\r\n        }]\r\n})\r\nexport class AngularHalModule {\r\n    static forRoot(): ModuleWithProviders {\r\n        return {\r\n            ngModule: AngularHalModule,\r\n            providers: [\r\n                ExternalService,\r\n                HttpClient,\r\n                {\r\n                    provide: ResourceService,\r\n                    useClass: ResourceService,\r\n                    deps: [ExternalService]\r\n                }\r\n            ]\r\n        };\r\n    }\r\n}"]}