{"version":3,"file":"sitmun-frontend-core.js.map","sources":["ng://@sitmun/frontend-core/angular-hal/src/lib/resource-array.ts","ng://@sitmun/frontend-core/angular-hal/src/lib/resource-helper.ts","ng://@sitmun/frontend-core/angular-hal/src/lib/resource.ts","ng://@sitmun/frontend-core/user/user.model.ts","ng://@sitmun/frontend-core/angular-hal/src/lib/external.service.ts","ng://@sitmun/frontend-core/angular-hal/src/lib/resource.service.ts","ng://@sitmun/frontend-core/angular-hal/src/lib/rest.service.ts","ng://@sitmun/frontend-core/account/account.service.ts","ng://@sitmun/frontend-core/auth/auth.service.ts","ng://@sitmun/frontend-core/auth/auth.interceptor.ts","ng://@sitmun/frontend-core/auth/principal.service.ts","ng://@sitmun/frontend-core/auth/auth-expired.interceptor.ts","ng://@sitmun/frontend-core/auth/login.service.ts","ng://@sitmun/frontend-core/dashboard/dashboard.service.ts","ng://@sitmun/frontend-core/user/user.service.ts","ng://@sitmun/frontend-core/user/user-position.model.ts","ng://@sitmun/frontend-core/user/user-position.service.ts","ng://@sitmun/frontend-core/user/user-configuration.model.ts","ng://@sitmun/frontend-core/user/user-configuration.service.ts","ng://@sitmun/frontend-core/territory/territory.model.ts","ng://@sitmun/frontend-core/territory/territory.service.ts","ng://@sitmun/frontend-core/territory/territory-type.model.ts","ng://@sitmun/frontend-core/territory/territory-type.service.ts","ng://@sitmun/frontend-core/territory/territory-group-type.model.ts","ng://@sitmun/frontend-core/territory/territory-group-type.service.ts","ng://@sitmun/frontend-core/role/role.model.ts","ng://@sitmun/frontend-core/role/role.service.ts","ng://@sitmun/frontend-core/connection/connection.model.ts","ng://@sitmun/frontend-core/connection/connection.service.ts","ng://@sitmun/frontend-core/task/task.model.ts","ng://@sitmun/frontend-core/task/task.service.ts","ng://@sitmun/frontend-core/task/task-type.model.ts","ng://@sitmun/frontend-core/task/task-type.service.ts","ng://@sitmun/frontend-core/task/task-group.model.ts","ng://@sitmun/frontend-core/task/task-group.service.ts","ng://@sitmun/frontend-core/task/task-parameter.model.ts","ng://@sitmun/frontend-core/task/task-parameter.service.ts","ng://@sitmun/frontend-core/task/task-availability.model.ts","ng://@sitmun/frontend-core/task/task-availability.service.ts","ng://@sitmun/frontend-core/task/task-ui.model.ts","ng://@sitmun/frontend-core/task/task-ui.service.ts","ng://@sitmun/frontend-core/translation/translation.model.ts","ng://@sitmun/frontend-core/translation/translation.service.ts","ng://@sitmun/frontend-core/translation/language.model.ts","ng://@sitmun/frontend-core/translation/language.service.ts","ng://@sitmun/frontend-core/service/service.model.ts","ng://@sitmun/frontend-core/service/service.service.ts","ng://@sitmun/frontend-core/service/service-parameter.model.ts","ng://@sitmun/frontend-core/service/service-parameter.service.ts","ng://@sitmun/frontend-core/cartography/cartography.model.ts","ng://@sitmun/frontend-core/cartography/cartography.service.ts","ng://@sitmun/frontend-core/cartography/cartography-group.model.ts","ng://@sitmun/frontend-core/cartography/cartography-group.service.ts","ng://@sitmun/frontend-core/cartography/cartography-availability.model.ts","ng://@sitmun/frontend-core/cartography/cartography-availability.service.ts","ng://@sitmun/frontend-core/cartography/cartography-filter.model.ts","ng://@sitmun/frontend-core/cartography/cartography-filter.service.ts","ng://@sitmun/frontend-core/cartography/cartography-parameter.model.ts","ng://@sitmun/frontend-core/cartography/cartography-parameter.service.ts","ng://@sitmun/frontend-core/cartography/background.model.ts","ng://@sitmun/frontend-core/cartography/background.service.ts","ng://@sitmun/frontend-core/tree/tree.model.ts","ng://@sitmun/frontend-core/tree/tree.service.ts","ng://@sitmun/frontend-core/tree/tree-node.model.ts","ng://@sitmun/frontend-core/tree/tree-node.service.ts","ng://@sitmun/frontend-core/application/application.model.ts","ng://@sitmun/frontend-core/application/application.service.ts","ng://@sitmun/frontend-core/application/application-background.model.ts","ng://@sitmun/frontend-core/application/application-background.service.ts","ng://@sitmun/frontend-core/application/application-parameter.model.ts","ng://@sitmun/frontend-core/application/application-parameter.service.ts","ng://@sitmun/frontend-core/codelist/codelist.model.ts","ng://@sitmun/frontend-core/codelist/codelist.service.ts","ng://@sitmun/frontend-core/map/map-configuration-manager.service.ts","ng://@sitmun/frontend-core/auth/has-any-authority.directive.ts","ng://@sitmun/frontend-core/auth/has-any-authority-on-territory.directive.ts","ng://@sitmun/frontend-core/sitmun-frontend-core.module.ts","ng://@sitmun/frontend-core/angular-hal/src/lib/angular-hal.module.ts"],"sourcesContent":["\r\nimport {throwError as observableThrowError} from 'rxjs';\r\n\r\nimport {catchError, map} from 'rxjs/operators';\r\nimport {Sort} from './sort';\r\nimport {ArrayInterface} from './array-interface';\r\nimport {ResourceHelper} from './resource-helper';\r\nimport {Resource} from './resource';\r\nimport * as url from 'url';\r\nimport {Observable} from 'rxjs';\r\n\r\n/** REST array of resource implementation */\r\nexport class ResourceArray<T extends Resource> implements ArrayInterface<T> {\r\n    /** sorting info */\r\n    public sortInfo: Sort[];\r\n    /** proxy url */\r\n    public proxyUrl: string;\r\n    /** root url */\r\n    public rootUrl: string;\r\n\r\n    /** self url */\r\n    public self_uri: string;\r\n    /** next resource url */\r\n    public next_uri: string;\r\n    /** previous resource url */\r\n    public prev_uri: string;\r\n    /** first resource url */\r\n    public first_uri: string;\r\n    /** last resource url */\r\n    public last_uri: string;\r\n\r\n    /** embedded array list */\r\n    public _embedded;\r\n\r\n    /** total number of elements in this array */\r\n    public totalElements = 0;\r\n    /** total number of pages in the response */\r\n    public totalPages = 1;\r\n    \r\n    /** page number in the response */\r\n    public pageNumber = 1;\r\n    \r\n    /** page size */\r\n    public pageSize: number;\r\n\r\n    /** array components */\r\n    public result: T[] = [];\r\n\r\n    /** push a new resource to the array */\r\n    push = (el: T) => {\r\n        this.result.push(el);\r\n    };\r\n\r\n    /** length of the array */\r\n    length = (): number => {\r\n        return this.result.length;\r\n    };\r\n\r\n    /** load array data from REST request */\r\n    private init = (type: { new(): T }, response: any, sortInfo: Sort[]): ResourceArray<T> => {\r\n        const result: ResourceArray<T> = ResourceHelper.createEmptyResult<T>(this._embedded);\r\n        result.sortInfo = sortInfo;\r\n        ResourceHelper.instantiateResourceCollection(type, response, result);\r\n        return result;\r\n    };\r\n\r\n    /** Load next page */\r\n    next = (type: { new(): T }): Observable<ResourceArray<T>> => {\r\n        if (this.next_uri) {\r\n            return ResourceHelper.getHttp().get(ResourceHelper.getProxy(this.next_uri), {headers: ResourceHelper.headers}).pipe(\r\n                map(response => this.init(type, response, this.sortInfo)),\r\n                catchError(error => observableThrowError(error)),);\r\n        }\r\n        return observableThrowError('no next defined');\r\n    };\r\n\r\n    /** Load previous page */\r\n    prev = (type: { new(): T }): Observable<ResourceArray<T>> => {\r\n        if (this.prev_uri) {\r\n            return ResourceHelper.getHttp().get(ResourceHelper.getProxy(this.prev_uri), {headers: ResourceHelper.headers}).pipe(\r\n                map(response => this.init(type, response, this.sortInfo)),\r\n                catchError(error => observableThrowError(error)),);\r\n        }\r\n        return observableThrowError('no prev defined');\r\n    };\r\n\r\n    /** Load first page */\r\n    first = (type: { new(): T }): Observable<ResourceArray<T>> => {\r\n        if (this.first_uri) {\r\n            return ResourceHelper.getHttp().get(ResourceHelper.getProxy(this.first_uri), {headers: ResourceHelper.headers}).pipe(\r\n                map(response => this.init(type, response, this.sortInfo)),\r\n                catchError(error => observableThrowError(error)),);\r\n        }\r\n        return observableThrowError('no first defined');\r\n    };\r\n\r\n    /** Load last page */\r\n    last = (type: { new(): T }): Observable<ResourceArray<T>> => {\r\n        if (this.last_uri) {\r\n            return ResourceHelper.getHttp().get(ResourceHelper.getProxy(this.last_uri), {headers: ResourceHelper.headers}).pipe(\r\n                map(response => this.init(type, response, this.sortInfo)),\r\n                catchError(error => observableThrowError(error)),);\r\n        }\r\n        return observableThrowError('no last defined');\r\n    };\r\n\r\n    /** Load page with given pageNumber*/\r\n    page = (type: { new(): T }, pageNumber: number): Observable<ResourceArray<T>> => {\r\n        this.self_uri = this.self_uri.replace('{?page,size,sort}', '');\r\n        this.self_uri = this.self_uri.replace('{&sort}', '');\r\n        let urlParsed = url.parse(ResourceHelper.getProxy(this.self_uri));\r\n        let query: string = ResourceArray.replaceOrAdd(urlParsed.query, 'size', this.pageSize.toString());\r\n        query = ResourceArray.replaceOrAdd(query, 'page', pageNumber.toString());\r\n\r\n\r\n        let uri = urlParsed.query ?\r\n            ResourceHelper.getProxy(this.self_uri).replace(urlParsed.query, query) : ResourceHelper.getProxy(this.self_uri).concat(query);\r\n        uri = this.addSortInfo(uri);\r\n        return ResourceHelper.getHttp().get(uri, {headers: ResourceHelper.headers}).pipe(\r\n            map(response => this.init(type, response, this.sortInfo)),\r\n            catchError(error => observableThrowError(error)),);\r\n    };\r\n\r\n    /** Sort collection based on given sort attribute */\r\n    sortElements = (type: { new(): T }, ...sort: Sort[]): Observable<ResourceArray<T>> => {\r\n        this.self_uri = this.self_uri.replace('{?page,size,sort}', '');\r\n        this.self_uri = this.self_uri.replace('{&sort}', '');\r\n        let uri = ResourceHelper.getProxy(this.self_uri).concat('?', 'size=', this.pageSize.toString(), '&page=', this.pageNumber.toString());\r\n        uri = this.addSortInfo(uri);\r\n        return ResourceHelper.getHttp().get(uri, {headers: ResourceHelper.headers}).pipe(\r\n            map(response => this.init(type, response, sort)),\r\n            catchError(error => observableThrowError(error)),);\r\n    };\r\n\r\n    /** Load page with given size */\r\n    size = (type: { new(): T }, size: number): Observable<ResourceArray<T>> => {\r\n        let uri = ResourceHelper.getProxy(this.self_uri).concat('?', 'size=', size.toString());\r\n        uri = this.addSortInfo(uri);\r\n        return ResourceHelper.getHttp().get(uri, {headers: ResourceHelper.headers}).pipe(\r\n            map(response => this.init(type, response, this.sortInfo)),\r\n            catchError(error => observableThrowError(error)),);\r\n    };\r\n\r\n    /** Add sort info to given URI */\r\n    private addSortInfo(uri: string) {\r\n        if (this.sortInfo) {\r\n            for (const item of this.sortInfo) {\r\n                uri = uri.concat('&sort=', item.path, ',', item.order);\r\n            }\r\n        }\r\n        return uri;\r\n    }\r\n\r\n    /** Add replace or add param value to query string */\r\n    private static replaceOrAdd(query: string, field: string, value: string): string {\r\n        if (query) {\r\n            let idx: number = query.indexOf(field);\r\n            let idxNextAmp: number = query.indexOf('&', idx) == -1 ? query.indexOf('/', idx) : query.indexOf('&', idx);\r\n\r\n            if (idx != -1) {\r\n                let seachValue = query.substring(idx, idxNextAmp);\r\n                query = query.replace(seachValue, field + '=' + value);\r\n            } else {\r\n                query = query.concat(\"&\" + field + '=' + value);\r\n            }\r\n        } else {\r\n            query = \"?\" + field + '=' + value;\r\n        }\r\n        return query;\r\n    }\r\n}\r\n","import {HttpClient, HttpHeaders, HttpParams} from '@angular/common/http';\r\nimport {Resource} from './resource';\r\nimport {ResourceArray} from './resource-array';\r\nimport {HalOptions} from './rest.service';\r\nimport {SubTypeBuilder} from './subtype-builder';\r\nimport {isNullOrUndefined, isPrimitive} from 'util';\r\nimport * as url from 'url';\r\n\r\n/** REST API access helper */\r\nexport class ResourceHelper {\r\n\r\n    /** HttpHeaders */\r\n    public static headers: HttpHeaders = new HttpHeaders();\r\n    /** Proxy URL */\r\n    private static proxy_uri: string = null;\r\n    /** Root URL */\r\n    private static root_uri: string = null;\r\n    /** HttpClient */\r\n    private static http: HttpClient = null;\r\n\r\n    /** get request headers */\r\n    /*public static get headers(): HttpHeaders {\r\n        if (isNullOrUndefined(this._headers))\r\n          ResourceHelper._headers = new HttpHeaders();\r\n        return ResourceHelper._headers;\r\n    }*/\r\n\r\n    /** set request headers */\r\n    /*public static set headers(headers: HttpHeaders) {\r\n      ResourceHelper._headers = headers;\r\n    }*/\r\n\r\n    /** get request option params */\r\n    static optionParams(params: HttpParams, options?: HalOptions): HttpParams {\r\n        if (options) {\r\n\r\n            if (options.params) {\r\n                for (const param of options.params) {\r\n                    params = params.append(param.key, param.value.toString());\r\n                }\r\n            }\r\n\r\n            if (options.size) {\r\n                params = params.append('size', options.size.toString());\r\n            }\r\n\r\n            if (options.sort) {\r\n                for (const s of options.sort) {\r\n                    let sortString = '';\r\n                    sortString = s.path ? sortString.concat(s.path) : sortString;\r\n                    sortString = s.order ? sortString.concat(',').concat(s.order) : sortString;\r\n                    params = params.append('sort', sortString);\r\n                }\r\n            }\r\n\r\n        }\r\n        return params;\r\n    }\r\n\r\n    /** resolve resource relations */\r\n    static resolveRelations(resource: Resource): Object {\r\n        const result: any = {};\r\n        for (const key in resource) {\r\n            if (!isNullOrUndefined(resource[key])) {\r\n                if (ResourceHelper.className(resource[key])\r\n                    .find((className: string) => className == 'Resource')) {\r\n                    if (resource[key]['_links'])\r\n                        result[key] = resource[key]['_links']['self']['href'];\r\n                } else if (Array.isArray(resource[key])) {\r\n                    let array: any[] = resource[key];\r\n                    if (array) {\r\n                        result[key] = new Array();\r\n                        array.forEach((element) => {\r\n                            if (isPrimitive(element)) {\r\n                                result[key].push(element);\r\n                            }\r\n                            else {\r\n                                result[key].push(this.resolveRelations(element));\r\n                            }\r\n                        });\r\n                    }\r\n                } else {\r\n                    result[key] = resource[key];\r\n                }\r\n            }\r\n        }\r\n        return result as Object;\r\n    }\r\n\r\n    /** create an empty resource from embedded data*/\r\n    static createEmptyResult<T extends Resource>(_embedded: string): ResourceArray<T> {\r\n        let resourceArray: ResourceArray<T> = new ResourceArray<T>();\r\n        resourceArray._embedded = _embedded;\r\n        return resourceArray;\r\n    }\r\n\r\n    /** get resource class name*/\r\n    static getClassName(obj: any): string {\r\n        var funcNameRegex = /function (.+?)\\(/;\r\n        var results = (funcNameRegex).exec(obj.constructor.toString());\r\n        return (results && results.length > 1) ? results[1] : '';\r\n    }\r\n\r\n    \r\n    /** get resource class name from a prototype object*/\r\n    static className(objProto: any): string[] {\r\n        let classNames = [];\r\n        let obj = Object.getPrototypeOf(objProto);\r\n        let className: string;\r\n\r\n        while ((className = ResourceHelper.getClassName(obj)) !== 'Object') {\r\n            classNames.push(className);\r\n            obj = Object.getPrototypeOf(obj);\r\n        }\r\n\r\n        return classNames;\r\n    }\r\n\r\n    /** instantiate a ResourceCollection from response embedded data*/\r\n    static instantiateResourceCollection<T extends Resource>(type: { new(): T }, payload: any,\r\n                                                             result: ResourceArray<T>, builder?: SubTypeBuilder,embeddedName?:String): ResourceArray<T> {\r\n        for (const embeddedClassName of Object.keys(payload[result._embedded])) {\r\n            if(!embeddedName || (embeddedName && embeddedClassName==embeddedName)){\r\n                let embedded: any = payload[result._embedded];\r\n                const items = embedded[embeddedClassName];\r\n                for (let item of items) {\r\n                    let instance: T = new type();\r\n                    instance = this.searchSubtypes(builder, embeddedClassName, instance);\r\n\r\n                    this.instantiateResource(instance, item);\r\n                    result.push(instance);\r\n                }\r\n            }\r\n        }\r\n\r\n        result.totalElements = payload.page ? payload.page.totalElements : result.length;\r\n        result.totalPages = payload.page ? payload.page.totalPages : 1;\r\n        result.pageNumber = payload.page ? payload.page.number : 1;\r\n        result.pageSize = payload.page ? payload.page.size : 20;\r\n\r\n        result.self_uri = payload._links && payload._links.self ? payload._links.self.href : undefined;\r\n        result.next_uri = payload._links && payload._links.next ? payload._links.next.href : undefined;\r\n        result.prev_uri = payload._links && payload._links.prev ? payload._links.prev.href : undefined;\r\n        result.first_uri = payload._links && payload._links.first ? payload._links.first.href : undefined;\r\n        result.last_uri = payload._links && payload._links.last ? payload._links.last.href : undefined;\r\n        return result;\r\n    }\r\n\r\n    /** search subtypes*/\r\n    static searchSubtypes<T extends Resource>(builder: SubTypeBuilder, embeddedClassName: string, instance: T) {\r\n        if (builder && builder.subtypes) {\r\n            let keys = builder.subtypes.keys();\r\n            Array.from(keys).forEach((subtypeKey: string) => {\r\n                if (embeddedClassName.toLowerCase().startsWith(subtypeKey.toLowerCase())) {\r\n                    let subtype: { new(): any } = builder.subtypes.get(subtypeKey);\r\n                    instance = new subtype();\r\n                }\r\n            });\r\n        }\r\n        return instance;\r\n    }\r\n\r\n    /** instantiate a Resource from response */\r\n    static instantiateResource<T extends Resource>(entity: T, payload: Object): T {\r\n        for (const p in payload) {\r\n            //TODO array init\r\n            /* if(entity[p].constructor === Array && isNullOrUndefined(payload[p]))\r\n                 entity[p] = [];\r\n             else*/\r\n            entity[p] = payload[p];\r\n        }\r\n        return entity;\r\n    }\r\n\r\n    /** set proxy URL */\r\n    static setProxyUri(proxy_uri: string) {\r\n        ResourceHelper.proxy_uri = proxy_uri;\r\n    }\r\n\r\n    /** set Root URI */\r\n    static setRootUri(root_uri: string) {\r\n        ResourceHelper.root_uri = root_uri;\r\n    }\r\n\r\n    /** get proxy URL */\r\n    public static getURL(): string {\r\n        return ResourceHelper.proxy_uri && ResourceHelper.proxy_uri != '' ?\r\n            ResourceHelper.addSlash(ResourceHelper.proxy_uri) :\r\n            ResourceHelper.addSlash(ResourceHelper.root_uri);\r\n    }\r\n\r\n    /** add slash to URI */\r\n    private static addSlash(uri: string): string {\r\n        let uriParsed = url.parse(uri);\r\n        if (isNullOrUndefined(uriParsed.search) && uri && uri[uri.length - 1] != '/')\r\n            return uri + '/';\r\n        return uri;\r\n    }\r\n\r\n    /** get proxy from URL */\r\n    public static getProxy(url: string): string {\r\n        if (!ResourceHelper.proxy_uri || ResourceHelper.proxy_uri == '')\r\n            return url;\r\n        return ResourceHelper.addSlash(url.replace(ResourceHelper.root_uri, ResourceHelper.proxy_uri));\r\n    }\r\n\r\n    /** set HttpClient*/\r\n    public static setHttp(http: HttpClient) {\r\n        ResourceHelper.http = http;\r\n    }\r\n\r\n    /** get HttpClient*/\r\n    public static getHttp(): HttpClient {\r\n        return ResourceHelper.http;\r\n    }\r\n\r\n    /** get root URI*/\r\n    static getRootUri() {\r\n        return ResourceHelper.root_uri;\r\n    }\r\n}\r\n","\r\nimport {throwError as observableThrowError, of as observableOf} from 'rxjs';\r\n\r\nimport {map} from 'rxjs/operators';\r\n\r\n\r\nimport {HttpParams} from '@angular/common/http';\r\nimport {ResourceHelper} from './resource-helper';\r\nimport {ResourceArray} from './resource-array';\r\nimport {isNullOrUndefined} from 'util';\r\n\r\nimport {HalOptions} from './rest.service';\r\nimport {SubTypeBuilder} from './subtype-builder';\r\nimport {Injectable} from '@angular/core';\r\nimport {Observable} from 'rxjs';\r\n\r\n/** Abstract resource class*/\r\n@Injectable()\r\nexport abstract class Resource {\r\n\r\n    /** proxy URL */\r\n    public proxyUrl: string;\r\n    /** root URL */\r\n    public rootUrl: string;\r\n\r\n    /** links */\r\n    public _links: any;\r\n    /** subtypes */\r\n    public _subtypes: Map<string, any>;\r\n\r\n    \r\n    /** get subtypes */    \r\n    public get subtypes(): Map<string, any> {\r\n        return this._subtypes;\r\n    }\r\n\r\n    /** set subtypes */\r\n    public set subtypes(_subtypes: Map<string, any>) {\r\n        this._subtypes = _subtypes;\r\n    }\r\n\r\n    /** constructor*/\r\n    constructor() {\r\n    }\r\n\r\n    /** Get collection of related resources */\r\n    public getRelationArray<T extends Resource>(type: { new(): T }, relation: string, _embedded?: string, options?: HalOptions, builder?: SubTypeBuilder): Observable<T[]> {\r\n\r\n        const params = ResourceHelper.optionParams(new HttpParams(), options);\r\n        const result: ResourceArray<T> = ResourceHelper.createEmptyResult<T>(isNullOrUndefined(_embedded) ? \"_embedded\" : _embedded);\r\n        if (!isNullOrUndefined(this._links) && !isNullOrUndefined(this._links[relation])) {\r\n            let observable = ResourceHelper.getHttp().get(ResourceHelper.getProxy(this._links[relation].href), {\r\n                headers: ResourceHelper.headers,\r\n                params: params\r\n            });\r\n            return observable.pipe(map(response => ResourceHelper.instantiateResourceCollection<T>(type, response, result, builder)),\r\n                map((array: ResourceArray<T>) => array.result),);\r\n        } else {\r\n            return observableOf([]);\r\n        }\r\n    }\r\n\r\n    /** Get related resource */\r\n    public getRelation<T extends Resource>(type: { new(): T }, relation: string, builder?: SubTypeBuilder): Observable<T> {\r\n        let result: T = new type();\r\n        if (!isNullOrUndefined(this._links) && !isNullOrUndefined(this._links[relation])) {\r\n            let observable = ResourceHelper.getHttp().get(ResourceHelper.getProxy(this._links[relation].href), {headers: ResourceHelper.headers});\r\n            return observable.pipe(map((data: any) => {\r\n                if (builder) {\r\n                    for (const embeddedClassName of Object.keys(data['_links'])) {\r\n                        if (embeddedClassName == 'self') {\r\n                            let href: string = data._links[embeddedClassName].href;\r\n                            let idx: number = href.lastIndexOf('/');\r\n                            let realClassName = href.replace(ResourceHelper.getRootUri(), \"\").substring(0, idx);\r\n                            result = ResourceHelper.searchSubtypes(builder, realClassName, result);\r\n                            break;\r\n                        }\r\n                    }\r\n                }\r\n                return ResourceHelper.instantiateResource(result, data);\r\n            }));\r\n        } else {\r\n            return observableOf(null);\r\n        }\r\n    }\r\n\r\n    /** Adds the given resource to the bound collection by the relation */\r\n    public addRelation<T extends Resource>(relation: string, resource: T): Observable<any> {\r\n        if (!isNullOrUndefined(this._links) && !isNullOrUndefined(this._links[relation])) {\r\n            let header = ResourceHelper.headers.append('Content-Type', 'text/uri-list');\r\n            return ResourceHelper.getHttp().post(ResourceHelper.getProxy(this._links[relation].href), resource._links.self.href, {headers: header});\r\n        } else {\r\n            return observableThrowError('no relation found');\r\n        }\r\n    }\r\n\r\n    /** Bind the given resource to this resource by the given relation*/\r\n    public updateRelation<T extends Resource>(relation: string, resource: T): Observable<any> {\r\n        if (!isNullOrUndefined(this._links) && !isNullOrUndefined(this._links[relation])) {\r\n            let header = ResourceHelper.headers.append('Content-Type', 'text/uri-list');\r\n            return ResourceHelper.getHttp().patch(ResourceHelper.getProxy(this._links[relation].href), resource._links.self.href, {headers: header});\r\n        } else {\r\n            return observableThrowError('no relation found');\r\n        }\r\n    }\r\n\r\n    /** Bind the given resource to this resource by the given relation*/\r\n    public substituteRelation<T extends Resource>(relation: string, resource: T): Observable<any> {\r\n        if (!isNullOrUndefined(this._links) && !isNullOrUndefined(this._links[relation])) {\r\n            let header = ResourceHelper.headers.append('Content-Type', 'text/uri-list');\r\n            return ResourceHelper.getHttp().put(ResourceHelper.getProxy(this._links[relation].href), resource._links.self.href, {headers: header});\r\n        } else {\r\n            return observableThrowError('no relation found');\r\n        }\r\n    }\r\n    \r\n    \r\n    /** Bind the given resource to this resource by the given relation*/\r\n    public substituteAllRelation<T extends Resource>(relation: string, resources: Resource[]): Observable<any> {\r\n        if (!isNullOrUndefined(this._links) && !isNullOrUndefined(this._links[relation])) {\r\n            let header = ResourceHelper.headers.append('Content-Type', 'text/uri-list');\r\n            return ResourceHelper.getHttp().put(ResourceHelper.getProxy(this._links[relation].href), resources.map((resource) => resource._links.self.href), {headers: header});\r\n        } else {\r\n            return observableThrowError('no relation found');\r\n        }\r\n    }\r\n\r\n\r\n\r\n    /** Unbind the resource with the given relation from this resource*/\r\n    public deleteRelation<T extends Resource>(relation: string, resource: T): Observable<any> {\r\n        if (!isNullOrUndefined(this._links) && !isNullOrUndefined(resource._links)) {\r\n            let link: string = resource._links['self'].href;\r\n            let idx: number = link.lastIndexOf('/') + 1;\r\n\r\n            if (idx == -1)\r\n                return observableThrowError('no relation found');\r\n\r\n            let relationId: string = link.substring(idx);\r\n            return ResourceHelper.getHttp().delete(ResourceHelper.getProxy(this._links[relation].href + '/' + relationId), {headers: ResourceHelper.headers});\r\n        } else {\r\n            return observableThrowError('no relation found');\r\n        }\r\n    }\r\n    \r\n    /** Unbind the resource with the given relation from this resource*/\r\n    public deleteAllRelation<T extends Resource>(relation: string): Observable<any> {\r\n        return ResourceHelper.getHttp().delete(ResourceHelper.getProxy(this._links[relation].href ), {headers: ResourceHelper.headers});\r\n        \r\n    }\r\n\r\n}","import {Resource} from '../angular-hal/src/lib/resource';\r\nimport { UserConfiguration } from './user-configuration.model';\r\nimport { UserPosition } from './user-position.model';\r\n\r\n/**\r\n * User model\r\n */\r\nexport class User extends Resource {\r\n  /** id */\r\n  public id: number;  \r\n  /** username */\r\n  public username: string;\r\n  /** password */\r\n  public password: string;\r\n  /** first name */\r\n  public firstName: string;\r\n  /** last name */\r\n  public lastName: string;\r\n  /** whether user is blocked */\r\n  public blocked: boolean;\r\n  /** whether user is administrator */\r\n  public administrator: boolean;\r\n  /** user positions */\r\n  public positions: UserPosition[];\r\n  /** user permissions */\r\n  public permissions: UserConfiguration[];\r\n}\r\n","import {HttpClient} from '@angular/common/http';\r\nimport {Inject, Injectable} from '@angular/core';\r\nimport {ResourceHelper} from './resource-helper';\r\nimport {ExternalConfigurationHandlerInterface} from './external-configuration.handler';\r\nimport {ExternalConfiguration} from './ExternalConfiguration';\r\n\r\n\r\n/** ExternalService */\r\n@Injectable()\r\nexport class ExternalService {\r\n\r\n    /** constructor */\r\n    constructor(@Inject('ExternalConfigurationService') private externalConfigurationService: ExternalConfigurationHandlerInterface) {\r\n        ResourceHelper.setProxyUri(externalConfigurationService.getProxyUri());\r\n        ResourceHelper.setRootUri(externalConfigurationService.getRootUri());\r\n        ResourceHelper.setHttp(externalConfigurationService.getHttp());\r\n    }\r\n\r\n    /** update ExternalConfigurationHandler */\r\n    public updateExternalConfigurationHandlerInterface(externalConfigurationService: ExternalConfigurationHandlerInterface) {\r\n\tthis.externalConfigurationService = externalConfigurationService;\r\n\r\n        ResourceHelper.setProxyUri(externalConfigurationService.getProxyUri());\r\n        ResourceHelper.setRootUri(externalConfigurationService.getRootUri());\r\n        ResourceHelper.setHttp(externalConfigurationService.getHttp());\r\n    }\r\n\r\n    /** get ExternalConfiguration */\r\n    public getExternalConfiguration(): ExternalConfiguration {\r\n        return this.externalConfigurationService.getExternalConfiguration();\r\n    }\r\n\r\n    /** get proxy URL */\r\n    public getProxyUri(): string {\r\n        return this.externalConfigurationService.getProxyUri();\r\n    }\r\n\r\n    /** get Root URI */\r\n    public getRootUri(): string {\r\n        return this.externalConfigurationService.getRootUri();\r\n    }\r\n\r\n    /** get URL */\r\n    public getURL(): string {\r\n        return ResourceHelper.getURL();\r\n    }\r\n\r\n    /** get HttpClient */\r\n    public getHttp(): HttpClient {\r\n        return ResourceHelper.getHttp();\r\n    }\r\n}\r\n","\r\nimport { throwError as observableThrowError } from 'rxjs';\r\n\r\nimport { catchError, map } from 'rxjs/operators';\r\nimport { Resource } from './resource';\r\nimport { ResourceHelper } from './resource-helper';\r\nimport { Injectable } from '@angular/core';\r\nimport { HttpParams, HttpResponse } from '@angular/common/http';\r\nimport { Sort } from './sort';\r\nimport { ResourceArray } from './resource-array';\r\nimport { ExternalService } from './external.service';\r\nimport { HalOptions } from './rest.service';\r\nimport { SubTypeBuilder } from './subtype-builder';\r\nimport { Observable } from 'rxjs';\r\n\r\n/** ResourceService */\r\n@Injectable()\r\nexport class ResourceService {\r\n\r\n\r\n    /** constructor */\r\n    constructor(private externalService: ExternalService) { }\r\n\r\n\r\n    /** get URL */\r\n    private static getURL(): string {\r\n        return ResourceHelper.getURL();\r\n    }\r\n\r\n    /** get all resources from a base URI of a given type */\r\n    public getAll<T extends Resource>(type: { new(): T }, resource: string, _embedded: string, options?: HalOptions, subType?: SubTypeBuilder, embeddedName?:String): Observable<ResourceArray<T>> {\r\n        const uri = this.getResourceUrl(resource).concat('?projection=view');\r\n        const params = ResourceHelper.optionParams(new HttpParams(), options);\r\n        const result: ResourceArray<T> = ResourceHelper.createEmptyResult<T>(_embedded);\r\n\r\n        this.setUrls(result);\r\n        result.sortInfo = options ? options.sort : undefined;\r\n        let observable = ResourceHelper.getHttp().get(uri, { headers: ResourceHelper.headers, params: params });\r\n        return observable.pipe(map(response => ResourceHelper.instantiateResourceCollection(type, response, result, subType,embeddedName)),\r\n            catchError(error => observableThrowError(error)));\r\n    }\r\n\r\n    /** get resource from a base URI and a given id */\r\n    public get<T extends Resource>(type: { new(): T }, resource: string, id: any): Observable<T> {\r\n        const uri = this.getResourceUrl(resource).concat('/', id, '?projection=view');\r\n        const result: T = new type();\r\n\r\n        this.setUrlsResource(result);\r\n        let observable = ResourceHelper.getHttp().get(uri, { headers: ResourceHelper.headers });\r\n        return observable.pipe(map(data => ResourceHelper.instantiateResource(result, data)),\r\n            catchError(error => observableThrowError(error)));\r\n    }\r\n\r\n    /** get resource from its selflink */\r\n    public getBySelfLink<T extends Resource>(type: { new(): T }, resourceLink: string): Observable<T> {\r\n        const result: T = new type();\r\n\r\n        this.setUrlsResource(result);\r\n        let observable = ResourceHelper.getHttp().get(ResourceHelper.getProxy(resourceLink), { headers: ResourceHelper.headers });\r\n        return observable.pipe(map(data => ResourceHelper.instantiateResource(result, data)),\r\n            catchError(error => observableThrowError(error)));\r\n    }\r\n\r\n    /** search resources from a given base path, query and options */\r\n    public search<T extends Resource>(type: { new(): T }, query: string, resource: string, _embedded: string, options?: HalOptions): Observable<ResourceArray<T>> {\r\n        const uri = this.getResourceUrl(resource).concat('/search/', query);\r\n        const params = ResourceHelper.optionParams(new HttpParams(), options);\r\n        const result: ResourceArray<T> = ResourceHelper.createEmptyResult<T>(_embedded);\r\n\r\n        this.setUrls(result);\r\n        let observable = ResourceHelper.getHttp().get(uri, { headers: ResourceHelper.headers, params: params });\r\n        return observable.pipe(map(response => ResourceHelper.instantiateResourceCollection(type, response, result)),\r\n            catchError(error => observableThrowError(error)));\r\n    }\r\n\r\n    /** search a single resource from a given base path, query and options */\r\n    public searchSingle<T extends Resource>(type: { new(): T }, query: string, resource: string, options?: HalOptions): Observable<T> {\r\n        const uri = this.getResourceUrl(resource).concat('/search/', query);\r\n        const params = ResourceHelper.optionParams(new HttpParams(), options);\r\n        const result: T = new type();\r\n\r\n        this.setUrlsResource(result);\r\n        let observable = ResourceHelper.getHttp().get(uri, { headers: ResourceHelper.headers, params: params });\r\n        return observable.pipe(map(response => ResourceHelper.instantiateResource(result, response)),\r\n            catchError(error => observableThrowError(error)));\r\n    }\r\n\r\n    /** search resources from a given base path, custom query and options */\r\n    public customQuery<T extends Resource>(type: { new(): T }, query: string, resource: string, _embedded: string, options?: HalOptions): Observable<ResourceArray<T>> {\r\n        const uri = this.getResourceUrl(resource + query);\r\n        const params = ResourceHelper.optionParams(new HttpParams(), options);\r\n        const result: ResourceArray<T> = ResourceHelper.createEmptyResult<T>(_embedded);\r\n\r\n        this.setUrls(result);\r\n        let observable = ResourceHelper.getHttp().get(uri, { headers: ResourceHelper.headers, params: params });\r\n        return observable.pipe(map(response => ResourceHelper.instantiateResourceCollection(type, response, result)),\r\n            catchError(error => observableThrowError(error)));\r\n    }\r\n\r\n    /** get resource given a relation link */\r\n    public getByRelation<T extends Resource>(type: { new(): T }, resourceLink: string): Observable<T> {\r\n        let result: T = new type();\r\n\r\n        this.setUrlsResource(result);\r\n        let observable = ResourceHelper.getHttp().get(resourceLink, { headers: ResourceHelper.headers });\r\n        return observable.pipe(map(data => ResourceHelper.instantiateResource(result, data)),\r\n            catchError(error => observableThrowError(error)));\r\n    }\r\n\r\n    /** get resource array given a relation link */\r\n    public getByRelationArray<T extends Resource>(type: { new(): T }, resourceLink: string, _embedded: string, builder?: SubTypeBuilder): Observable<ResourceArray<T>> {\r\n        const result: ResourceArray<T> = ResourceHelper.createEmptyResult<T>(_embedded);\r\n\r\n        this.setUrls(result);\r\n        let observable = ResourceHelper.getHttp().get(resourceLink, { headers: ResourceHelper.headers });\r\n        return observable.pipe(map(response => ResourceHelper.instantiateResourceCollection(type, response, result, builder)),\r\n            catchError(error => observableThrowError(error)));\r\n    }\r\n\r\n    /** count resources given a path */\r\n    public count(resource: string): Observable<number> {\r\n        const uri = this.getResourceUrl(resource).concat('/search/countAll');\r\n\r\n        return ResourceHelper.getHttp().get(uri, { headers: ResourceHelper.headers, observe: 'body' }).pipe(\r\n            map((response: Response) => Number(response.body)),\r\n            catchError(error => observableThrowError(error)));\r\n    }\r\n\r\n    /** create resource from self link and entity data*/\r\n    public create<T extends Resource>(selfResource: string, entity: T) {\r\n        const uri = ResourceHelper.getURL() + selfResource;\r\n        const payload = ResourceHelper.resolveRelations(entity);\r\n\r\n        this.setUrlsResource(entity);\r\n        let observable = ResourceHelper.getHttp().post(uri, payload, { headers: ResourceHelper.headers, observe: 'response' });\r\n        return observable.pipe(map((response: HttpResponse<string>) => {\r\n            if (response.status >= 200 && response.status <= 207)\r\n                return ResourceHelper.instantiateResource(entity, response.body);\r\n            else if (response.status == 500) {\r\n                let body: any = response.body;\r\n                return observableThrowError(body.error);\r\n            }\r\n        }), catchError(error => observableThrowError(error)));\r\n    }\r\n\r\n    /** update resource from a given entity data*/\r\n    public update<T extends Resource>(entity: T) {\r\n        const uri = ResourceHelper.getProxy(entity._links.self.href);\r\n        const payload = ResourceHelper.resolveRelations(entity);\r\n        this.setUrlsResource(entity);\r\n        let observable = ResourceHelper.getHttp().put(uri, payload, { headers: ResourceHelper.headers, observe: 'response' });\r\n        return observable.pipe(map((response: HttpResponse<string>) => {\r\n            if (response.status >= 200 && response.status <= 207)\r\n                return ResourceHelper.instantiateResource(entity, response.body);\r\n            else if (response.status == 500) {\r\n                let body: any = response.body;\r\n                return observableThrowError(body.error);\r\n            }\r\n        }), catchError(error => observableThrowError(error)));\r\n    }\r\n\r\n    /** update resource from a given entity data*/\r\n    public updateCollection<T extends Resource>(resourceArray: ResourceArray<T>, resourceLink: string) {\r\n        const uri = ResourceHelper.getProxy(resourceLink);\r\n        //const payload = ResourceHelper.resolveRelations(entity);\r\n        //this.setUrlsResource(entity);\r\n        var headersReq = ResourceHelper.headers;\r\n        headersReq.set(\"Content-Type\", \"text/uri-list\");\r\n        let observable = ResourceHelper.getHttp().put(uri, resourceArray, { headers: headersReq, observe: 'response' });\r\n        return observable.pipe(map((response: HttpResponse<string>) => {\r\n            if (response.status >= 200 && response.status <= 207)\r\n                return \"\";\r\n            else if (response.status == 500) {\r\n                let body: any = response.body;\r\n                return observableThrowError(body.error);\r\n            }\r\n        }), catchError(error => observableThrowError(error)));\r\n    }\r\n\r\n    /** patch resource from a given entity data*/\r\n    public patch<T extends Resource>(entity: T) {\r\n        const uri = ResourceHelper.getProxy(entity._links.self.href);\r\n        const payload = ResourceHelper.resolveRelations(entity);\r\n        this.setUrlsResource(entity);\r\n        let observable = ResourceHelper.getHttp().patch(uri, payload, { headers: ResourceHelper.headers, observe: 'response' });\r\n        return observable.pipe(map((response: HttpResponse<string>) => {\r\n            if (response.status >= 200 && response.status <= 207)\r\n                return ResourceHelper.instantiateResource(entity, response.body);\r\n            else if (response.status == 500) {\r\n                let body: any = response.body;\r\n                return observableThrowError(body.error);\r\n            }\r\n        }), catchError(error => observableThrowError(error)));\r\n    }\r\n\r\n    /** delete resource from a given entity data*/\r\n    public delete<T extends Resource>(entity: T): Observable<Object> {\r\n        const uri = ResourceHelper.getProxy(entity._links.self.href);\r\n        return ResourceHelper.getHttp().delete(uri, { headers: ResourceHelper.headers }).pipe(catchError(error => observableThrowError(error)));\r\n    }\r\n\r\n    /** whether a resource array has next page of results*/\r\n    public hasNext<T extends Resource>(resourceArray: ResourceArray<T>): boolean {\r\n        return resourceArray.next_uri != undefined;\r\n    }\r\n\r\n    /** whether a resource array has previous page of results*/\r\n    public hasPrev<T extends Resource>(resourceArray: ResourceArray<T>): boolean {\r\n        return resourceArray.prev_uri != undefined;\r\n    }\r\n\r\n    /** whether a resource array has first page of results*/\r\n    public hasFirst<T extends Resource>(resourceArray: ResourceArray<T>): boolean {\r\n        return resourceArray.first_uri != undefined;\r\n    }\r\n\r\n    /** whether a resource array has last page of results*/\r\n    public hasLast<T extends Resource>(resourceArray: ResourceArray<T>): boolean {\r\n        return resourceArray.last_uri != undefined;\r\n    }\r\n\r\n    /** get resource array next page of results*/\r\n    public next<T extends Resource>(resourceArray: ResourceArray<T>, type: { new(): T }): Observable<ResourceArray<T>> {\r\n        return resourceArray.next(type);\r\n    }\r\n\r\n    /** get resource array previous page of results*/\r\n    public prev<T extends Resource>(resourceArray: ResourceArray<T>, type: { new(): T }): Observable<ResourceArray<T>> {\r\n        return resourceArray.prev(type);\r\n    }\r\n\r\n    /** get resource array first page of results*/\r\n    public first<T extends Resource>(resourceArray: ResourceArray<T>, type: { new(): T }): Observable<ResourceArray<T>> {\r\n        return resourceArray.first(type);\r\n    }\r\n\r\n    /** get resource array last page of results*/\r\n    public last<T extends Resource>(resourceArray: ResourceArray<T>, type: { new(): T }): Observable<ResourceArray<T>> {\r\n        return resourceArray.last(type);\r\n    }\r\n\r\n    /** get resource array page of results given a page number*/\r\n    public page<T extends Resource>(resourceArray: ResourceArray<T>, type: { new(): T }, id: number): Observable<ResourceArray<T>> {\r\n        return resourceArray.page(type, id);\r\n    }\r\n\r\n    /** sort resource array with a given sorting params */\r\n    public sortElements<T extends Resource>(resourceArray: ResourceArray<T>, type: { new(): T }, ...sort: Sort[]): Observable<ResourceArray<T>> {\r\n        return resourceArray.sortElements(type, ...sort);\r\n    }\r\n\r\n    /** get resource array size*/\r\n    public size<T extends Resource>(resourceArray: ResourceArray<T>, type: { new(): T }, size: number): Observable<ResourceArray<T>> {\r\n        return resourceArray.size(type, size);\r\n    }\r\n\r\n    /** get resource URL from a given path*/\r\n    public getResourceUrl(resource?: string): string {\r\n        let url = ResourceService.getURL();\r\n        if (!url.endsWith('/')) {\r\n            url = url.concat('/');\r\n        }\r\n        if (resource) {\r\n            return url.concat(resource);\r\n        }\r\n        return url;\r\n    }\r\n\r\n    /** set proxy and root urls of given resource array */\r\n    private setUrls<T extends Resource>(result: ResourceArray<T>) {\r\n        result.proxyUrl = this.externalService.getProxyUri();\r\n        result.rootUrl = this.externalService.getRootUri();\r\n    }\r\n\r\n    /** set proxy and root urls of given resource */\r\n    private setUrlsResource<T extends Resource>(result: T) {\r\n        result.proxyUrl = this.externalService.getProxyUri();\r\n        result.rootUrl = this.externalService.getRootUri();\r\n    }\r\n}\r\n","import {of as observableOf, throwError as observableThrowError} from 'rxjs';\r\nimport {map, mergeMap} from 'rxjs/operators';\r\nimport {Resource} from './resource';\r\nimport {ResourceArray} from './resource-array';\r\nimport {Sort} from './sort';\r\nimport {ResourceService} from './resource.service';\r\nimport {SubTypeBuilder} from './subtype-builder';\r\nimport {isNullOrUndefined} from 'util';\r\nimport {Observable} from 'rxjs';\r\nimport {Injector} from \"@angular/core\";\r\n\r\n/** HAL param data model */\r\nexport type HalParam = { key: string, value: string | number | boolean };\r\n/** HAL option data model */\r\nexport type HalOptions = { notPaged?: boolean, size?: number, sort?: Sort[], params?: HalParam[] };\r\n\r\n/** REST API access interface */\r\nexport class RestService<T extends Resource> {\r\n    /** resource type */\r\n    private type: any;\r\n    /** resource path */\r\n    private resource: string;\r\n    /** resource array */\r\n    public resourceArray: ResourceArray<T>;\r\n    /** resource service */\r\n    public resourceService: ResourceService;\r\n    /** _embedded field name */\r\n    private _embedded: string = '_embedded';\r\n\r\n    /** constructor */\r\n    constructor(type: { new(): T },\r\n                resource: string,\r\n                private injector: Injector,\r\n                _embedded?: string) {\r\n        this.type = type;\r\n        this.resource = resource;\r\n        this.resourceService = injector.get(ResourceService);\r\n        if (!isNullOrUndefined(_embedded))\r\n            this._embedded = _embedded;\r\n    }\r\n\r\n    /** error handler */\r\n    protected handleError(error: any):Observable<never> {\r\n        return RestService.handleError(error);\r\n    }\r\n\r\n    /** error handler */\r\n    protected static handleError(error: any):Observable<never> {\r\n        return observableThrowError(error);\r\n    }\r\n\r\n    /** get all resources with optional options an subType params */\r\n    public getAll(options?: HalOptions, subType?: SubTypeBuilder, embeddedName?:String): Observable<T[]> {\r\n        return this.resourceService.getAll(this.type, this.resource, this._embedded, options, subType,embeddedName).pipe(\r\n            mergeMap((resourceArray: ResourceArray<T>) => {\r\n                if (options && options.notPaged && !isNullOrUndefined(resourceArray.first_uri)) {\r\n                    options.notPaged = false;\r\n                    options.size = resourceArray.totalElements;\r\n                    return this.getAll(options);\r\n                } else {\r\n                    this.resourceArray = resourceArray;\r\n                    return observableOf(resourceArray.result);\r\n                }\r\n            }));\r\n    }\r\n\r\n    /** get resource from a given id */\r\n    public get(id: any): Observable<T> {\r\n        return this.resourceService.get(this.type, this.resource, id);\r\n    }\r\n\r\n    /** get resource from self link */\r\n    public getBySelfLink(selfLink: string): Observable<T> {\r\n        return this.resourceService.getBySelfLink(this.type, selfLink);\r\n    }\r\n\r\n    /** search resources from a given query string and optional options params */\r\n    public search(query: string, options?: HalOptions): Observable<T[]> {\r\n        return this.resourceService.search(this.type, query, this.resource, this._embedded, options).pipe(\r\n            mergeMap((resourceArray: ResourceArray<T>) => {\r\n                if (options && options.notPaged && !isNullOrUndefined(resourceArray.first_uri)) {\r\n                    options.notPaged = false;\r\n                    options.size = resourceArray.totalElements;\r\n                    return this.search(query, options);\r\n                } else {\r\n                    this.resourceArray = resourceArray;\r\n                    return observableOf(resourceArray.result);\r\n                }\r\n            }));\r\n    }\r\n\r\n    /** search resource from a given query string and optional options params */\r\n    public searchSingle(query: string, options?: HalOptions): Observable<T> {\r\n        return this.resourceService.searchSingle(this.type, query, this.resource, options);\r\n    }\r\n\r\n    /** search resources from a given custom query string and optional options params */\r\n    public customQuery(query: string, options?: HalOptions): Observable<T[]> {\r\n        return this.resourceService.customQuery(this.type, query, this.resource, this._embedded, options).pipe(\r\n            mergeMap((resourceArray: ResourceArray<T>) => {\r\n                if (options && options.notPaged && !isNullOrUndefined(resourceArray.first_uri)) {\r\n                    options.notPaged = false;\r\n                    options.size = resourceArray.totalElements;\r\n                    return this.customQuery(query, options);\r\n                } else {\r\n                    this.resourceArray = resourceArray;\r\n                    return observableOf(resourceArray.result);\r\n                }\r\n            }));\r\n    }\r\n\r\n\r\n    /** get resource array given a relation link */\r\n    public getByRelationArray(relation: string, builder?: SubTypeBuilder): Observable<T[]> {\r\n        return this.resourceService.getByRelationArray(this.type, relation, this._embedded, builder).pipe(\r\n            map((resourceArray: ResourceArray<T>) => {\r\n                this.resourceArray = resourceArray;\r\n                return resourceArray.result;\r\n            }));\r\n    }\r\n\r\n    /** get resource given a relation link */\r\n    public getByRelation(relation: string): Observable<T> {\r\n        return this.resourceService.getByRelation(this.type, relation);\r\n    }\r\n\r\n    /** count resources given a path */\r\n    public count(): Observable<number> {\r\n        return this.resourceService.count(this.resource);\r\n    }\r\n\r\n    /** create resource from self link and entity data*/\r\n    public create(entity: T) {\r\n        return this.resourceService.create(this.resource, entity);\r\n    }\r\n\r\n    /** update resource from a given entity data*/\r\n    public update(entity: T) {\r\n        return this.resourceService.update(entity);\r\n    }\r\n\r\n    /** patch resource from a given entity data*/\r\n    public patch(entity: T) {\r\n        return this.resourceService.patch(entity);\r\n    }\r\n\r\n    /** delete resource from a given entity data*/\r\n    public delete(entity: T): Observable<Object> {\r\n        return this.resourceService.delete(entity);\r\n    }\r\n\r\n    /** get total number of elements of resource array */\r\n    public totalElement(): number {\r\n        if (this.resourceArray && this.resourceArray.totalElements)\r\n            return this.resourceArray.totalElements;\r\n        return 0;\r\n    }\r\n\r\n    /** whether a resource array has first page of results*/\r\n    public hasFirst(): boolean {\r\n        if (this.resourceArray)\r\n            return this.resourceService.hasFirst(this.resourceArray);\r\n        return false;\r\n    }\r\n\r\n    /** whether a resource array has next page of results*/\r\n    public hasNext(): boolean {\r\n        if (this.resourceArray)\r\n            return this.resourceService.hasNext(this.resourceArray);\r\n        return false;\r\n    }\r\n\r\n    /** whether a resource array has previous page of results*/\r\n    public hasPrev(): boolean {\r\n        if (this.resourceArray)\r\n            return this.resourceService.hasPrev(this.resourceArray);\r\n        return false;\r\n    }\r\n\r\n    /** whether a resource array has last page of results*/\r\n    public hasLast(): boolean {\r\n        if (this.resourceArray)\r\n            return this.resourceService.hasLast(this.resourceArray);\r\n        return false;\r\n    }\r\n\r\n    /** get resource array next page of results*/\r\n    public next(): Observable<T[]> {\r\n        if (this.resourceArray)\r\n            return this.resourceService.next(this.resourceArray, this.type).pipe(\r\n                map((resourceArray: ResourceArray<T>) => {\r\n                    this.resourceArray = resourceArray;\r\n                    return resourceArray.result;\r\n                }));\r\n        else\r\n            observableThrowError('no resourceArray found');\r\n    }\r\n\r\n    /** get resource array previous page of results*/\r\n    public prev(): Observable<T[]> {\r\n        if (this.resourceArray)\r\n            return this.resourceService.prev(this.resourceArray, this.type).pipe(\r\n                map((resourceArray: ResourceArray<T>) => {\r\n                    this.resourceArray = resourceArray;\r\n                    return resourceArray.result;\r\n                }));\r\n        else\r\n            observableThrowError('no resourceArray found');\r\n    }\r\n\r\n    /** get resource array first page of results*/\r\n    public first(): Observable<T[]> {\r\n        if (this.resourceArray)\r\n            return this.resourceService.first(this.resourceArray, this.type)\r\n                .pipe(\r\n                    map((resourceArray: ResourceArray<T>) => {\r\n                        this.resourceArray = resourceArray;\r\n                        return resourceArray.result;\r\n                    })\r\n                );\r\n        else\r\n            observableThrowError('no resourceArray found');\r\n    }\r\n\r\n    /** get resource array last page of results*/\r\n    public last(): Observable<T[]> {\r\n        if (this.resourceArray)\r\n            return this.resourceService.last(this.resourceArray, this.type)\r\n                .pipe(\r\n                    map((resourceArray: ResourceArray<T>) => {\r\n                        this.resourceArray = resourceArray;\r\n                        return resourceArray.result;\r\n                    })\r\n                );\r\n        else\r\n            observableThrowError('no resourceArray found');\r\n    }\r\n\r\n    /** get resource array page of results given a page number*/\r\n    public page(pageNumber: number): Observable<T[]> {\r\n        if (this.resourceArray)\r\n            return this.resourceService.page(this.resourceArray, this.type, pageNumber).pipe(\r\n                map((resourceArray: ResourceArray<T>) => {\r\n                    this.resourceArray = resourceArray;\r\n                    return resourceArray.result;\r\n                }));\r\n        else\r\n            observableThrowError('no resourceArray found');\r\n    }\r\n}\r\n","import { User } from '../user/user.model';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Injectable, Injector } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport {RestService} from '../angular-hal/src/lib/rest.service';\r\n\r\n\r\n/** Account manager service */\r\n@Injectable()\r\nexport class AccountService extends RestService<User> {\r\n  \r\n\r\n  /** API resource path */\r\n  public ACCOUNT_API = 'account';\r\n\r\n  /** constructor */\r\n  constructor(injector: Injector,private http: HttpClient) {\r\n    super(User, \"account\", injector);\r\n  }\r\n\r\n  /** get logged in user account*/\r\n  get(): Observable<any> {\r\n    let result: Observable<Object>;\r\n    result = this.http.get(this.resourceService.getResourceUrl(this.ACCOUNT_API));\r\n    return result;\r\n  }\r\n  \r\n  /** save account*/\r\n  save(item: any): Observable<any> {\r\n    let result: Observable<Object>;\r\n    result = this.http.post(this.resourceService.getResourceUrl(this.ACCOUNT_API) , item);\r\n\r\n    return result;\r\n  }\r\n\r\n  /** change logged in user account*/  \r\n  changePassword(item: any): Observable<any> {\r\n    let result: Observable<Object>;\r\n    result = this.http.post(this.resourceService.getResourceUrl(this.ACCOUNT_API+\"/change-password\") , item);\r\n    return result;\r\n  }\r\n  \r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Observable} from 'rxjs-compat';\r\nimport {ResourceService} from '../angular-hal/src/lib/resource.service';\r\n//import * as moment from 'moment';\r\n\r\n/** Authentication service*/\r\n@Injectable()\r\nexport class AuthService {\r\n    \r\n  /** API resource path */\r\n  public AUTH_API = 'authenticate';\r\n\r\n    /** constructor*/\r\n    constructor(\r\n        private http: HttpClient,\r\n        private resourceService: ResourceService\r\n    ) {}\r\n    \r\n    /** get current user jwt token from session storage*/\r\n    getToken() {\r\n        return  sessionStorage.getItem('authenticationToken');\r\n    }\r\n\r\n    /** login operation */\r\n    login(credentials): Observable<any> {\r\n\r\n        const data = {\r\n            username: credentials.username,\r\n            password: credentials.password\r\n        };\r\n        return this.http.post(this.resourceService.getResourceUrl(this.AUTH_API), data, {observe : 'response'}).map(authenticateSuccess.bind(this));\r\n\r\n        function authenticateSuccess(resp) {\r\n            if (resp.ok) {\r\n                const jwt = resp.body.id_token;\r\n                this.storeAuthenticationToken(jwt);\r\n                //const expiresAt = moment().add( resp.headers.get('Token-Validity'),'milisecond');\r\n                //sessionStorage.setItem('expires_at', JSON.stringify(expiresAt.valueOf()));\r\n                return jwt;\r\n            }                    \r\n        }\r\n    }\r\n    \r\n    /** login operation with jwt token */\r\n    loginWithToken(jwt) {\r\n        if (jwt) {\r\n            this.storeAuthenticationToken(jwt);\r\n            return Promise.resolve(jwt);\r\n        } else {\r\n            return Promise.reject('auth-jwt-service Promise reject'); // Put appropriate error message here\r\n        }\r\n    }\r\n\r\n    /** store jwt token in session storage*/\r\n    storeAuthenticationToken(jwt) {\r\n       sessionStorage.setItem('authenticationToken', jwt);\r\n        \r\n    }\r\n    \r\n    /** check whether current user is logged in*/\r\n    public isLoggedIn() {\r\n        //return moment().isBefore(this.getExpiration());\r\n        return this.getToken();\r\n    }\r\n    \r\n    /** check whether current user is logged out*/\r\n    isLoggedOut() {\r\n        return !this.isLoggedIn();\r\n    }\r\n\r\n    /** logout operation */\r\n    logout(): Observable<any> {\r\n\r\n        return new Observable((observer) => {\r\n            //localStorage.removeItem('authenticationToken');\r\n            sessionStorage.removeItem('authenticationToken');\r\n            //sessionStorage.removeItem('expires_at');\r\n            observer.complete();\r\n        });\r\n    }\r\n\r\n\r\n    \r\n}\r\n","import { Observable } from 'rxjs';\r\nimport { HttpInterceptor, HttpRequest, HttpHandler, HttpEvent } from '@angular/common/http';\r\n\r\n/** Interceptor for authentication token in API requests */\r\nexport class AuthInterceptor implements HttpInterceptor {\r\n\r\n    /** constructor*/\r\n    constructor(\r\n    ) {\r\n    }\r\n    \r\n    /** request handler */\r\n    intercept(request: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\r\n        if (!request || !request.url || !(request.url.includes(\"api\")) ) {\r\n            return next.handle(request);\r\n        }\r\n        const token = sessionStorage.getItem('authenticationToken');\r\n        if (!!token) {\r\n            request = request.clone({\r\n                setHeaders: {\r\n                    Authorization: 'Bearer ' + token\r\n                }\r\n            });\r\n        }\r\n        return next.handle(request);\r\n    }\r\n\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { Subject, Observable } from 'rxjs';\r\nimport { AccountService } from '../account/account.service';\r\n\r\n/** Principal service*/\r\n@Injectable()\r\nexport class Principal {\r\n    private userIdentity: any;\r\n    private authenticated = false;\r\n    private authenticationState = new Subject<any>();\r\n\r\n    /** constructor */\r\n    constructor(\r\n        private account: AccountService\r\n    ) {}\r\n\r\n    /** authenticate with given identity*/\r\n    authenticate(identity) {\r\n        this.userIdentity = identity;\r\n        this.authenticated = identity !== null;\r\n        this.authenticationState.next(this.userIdentity);\r\n    }\r\n\r\n    /** check whether current user has any of the given authorities */\r\n    hasAnyAuthority(authorities: string[]): Promise<boolean> {\r\n        return Promise.resolve(this.hasAnyAuthorityDirect(authorities));\r\n    }\r\n\r\n    /** check whether current user has any of the given authorities on the given territory */\r\n    hasAnyAuthorityOnTerritory(authorities: string[],territory: string ): Promise<boolean> {\r\n        return Promise.resolve(this.hasAnyAuthorityDirectOnTerritory(authorities,territory));\r\n    }\r\n\r\n    /** check whether current user has any of the given authorities without resolving promises*/\r\n    hasAnyAuthorityDirect(authorities: string[]): boolean {\r\n        if (!this.authenticated || !this.userIdentity || !this.userIdentity.authorities) {\r\n            return false;\r\n        }\r\n\r\n        for (let i = 0; i < authorities.length; i++) {\r\n            if (this.userIdentity.authorities.includes(authorities[i])) {\r\n                return true;\r\n            }\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    /** check whether current user has any of the given authorities on the given territory without resolving promises */\r\n    hasAnyAuthorityDirectOnTerritory(authorities: string[],territory: string): boolean {\r\n        if (!this.authenticated || !this.userIdentity || !this.userIdentity.authorities) {\r\n            return false;\r\n        }\r\n\r\n        for (let i = 0; i < authorities.length; i++) {\r\n\r\n            if (this.userIdentity.authoritiesPerTerritory[territory] && this.userIdentity.authoritiesPerTerritory[territory].includes(authorities[i])) {\r\n                return true;\r\n            }\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    /** check whether current user has the given authority */\r\n    hasAuthority(authority: string): Promise<boolean> {\r\n        if (!this.authenticated) {\r\n           return Promise.resolve(false);\r\n        }\r\n\r\n        return this.identity().then((id) => {\r\n            return Promise.resolve(id.authorities && id.authorities.includes(authority));\r\n        }, () => {\r\n            return Promise.resolve(false);\r\n        });\r\n    }\r\n\r\n    /** check whether current user has the given authority on the given territory*/\r\n    hasAuthorityOnTerritory(authority: string,territory: string): Promise<boolean> {\r\n        if (!this.authenticated) {\r\n           return Promise.resolve(false);\r\n        }\r\n\r\n        return this.identity().then((id) => {\r\n            return Promise.resolve(id.authoritiesPerTerritory && id.authoritiesPerTerritory[territory] && id.authoritiesPerTerritory[territory].includes(authority));\r\n        }, () => {\r\n            return Promise.resolve(false);\r\n        });\r\n    }\r\n\r\n    /** check user identity*/\r\n    identity(force?: boolean): Promise<any> {\r\n        if (force === true) {\r\n            this.userIdentity = undefined;\r\n        }\r\n\r\n        // check and see if we have retrieved the userIdentity data from the server.\r\n        // if we have, reuse it by immediately resolving\r\n        if (this.userIdentity) {\r\n            return Promise.resolve(this.userIdentity);\r\n        }\r\n\r\n        // retrieve the userIdentity data from the server, update the identity object, and then resolve.\r\n        return this.account.get().toPromise().then((response) => {\r\n            const account = response;\r\n            if (account) {\r\n                this.userIdentity = account;\r\n                this.authenticated = true;\r\n            } else {\r\n                this.userIdentity = null;\r\n                this.authenticated = false;\r\n            }\r\n            this.authenticationState.next(this.userIdentity);\r\n            return this.userIdentity;\r\n        }).catch((err) => {\r\n            this.userIdentity = null;\r\n            this.authenticated = false;\r\n            this.authenticationState.next(this.userIdentity);\r\n            return null;\r\n        });\r\n    }\r\n\r\n    /** check whether current user is authenticated */\r\n    isAuthenticated(): boolean {\r\n        return this.authenticated;\r\n    }\r\n\r\n    /** check whether current user identity is resolved */\r\n    isIdentityResolved(): boolean {\r\n        return this.userIdentity !== undefined;\r\n    }\r\n\r\n    /** get current user authentication state */\r\n    getAuthenticationState(): Observable<any> {\r\n        return this.authenticationState.asObservable();\r\n    }\r\n\r\n\r\n}\r\n","import { Injector, Injectable } from '@angular/core';\r\nimport { HttpInterceptor, HttpRequest, HttpHandler, HttpEvent, HttpErrorResponse } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport { AuthService } from './auth.service';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport { Principal } from './principal.service';\r\n\r\n/** Interceptor for authentication expired response in API requests */\r\n@Injectable()\r\nexport class AuthExpiredInterceptor implements HttpInterceptor {\r\n\r\n    /** constructor */\r\n    constructor(\r\n        private router: Router,     \r\n        private authService: AuthService, \r\n        private principal: Principal\r\n    ) {}\r\n\r\n    /** request handler */\r\n    intercept(request: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\r\n        return next.handle(request).do((event: HttpEvent<any>) => {}, (err: any) => {\r\n            if (err instanceof HttpErrorResponse) {\r\n                if (err.status === 401) {                    \r\n                    this.authService.logout().subscribe();\r\n                    this.principal.authenticate(null);\r\n                    this.router.navigate(['/']);\r\n                }\r\n            }\r\n        });\r\n    }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { AuthService } from './auth.service';\r\nimport { Principal } from './principal.service';\r\n\r\n/** Login service*/\r\n@Injectable()\r\nexport class LoginService {\r\n    \r\n    /** constructor */\r\n    constructor(\r\n        private authServerProvider: AuthService, \r\n        private principal: Principal\r\n    ) {}\r\n\r\n    /**Login operation*/\r\n    login(credentials, callback?) {\r\n        const cb = callback || function() {};\r\n\r\n        return new Promise((resolve, reject) => {\r\n            this.authServerProvider.login(credentials).subscribe((data) => {\r\n                this.principal.identity(true).then((account) => {\r\n                    // After the login the language will be changed to\r\n                    // the language selected by the user during his registration\r\n                    resolve(data);\r\n                });\r\n                \r\n                \r\n                return cb();\r\n            }, (err) => {\r\n                this.logout();\r\n                reject(err);\r\n                return cb(err);\r\n            });\r\n        });\r\n    }\r\n    /**login with jwt token */\r\n    loginWithToken(jwt) {\r\n        return this.authServerProvider.loginWithToken(jwt);\r\n    }\r\n\r\n    /** logout operation */\r\n    logout() {\r\n       this.authServerProvider.logout().subscribe();\r\n       this.principal.authenticate(null);\r\n    }\r\n}\r\n","import { Injectable, Injector } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport {ResourceService} from '../angular-hal/src/lib/resource.service';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class DashboardService{\r\n\r\n    /** API resource path */\r\n    public DASHBOARD_API = 'dashboard/info';\r\n    public DASHBOARD_EMBEDDED= 'dashboard';\r\n    /** constructor */\r\n    constructor(       \r\n      private http: HttpClient,\r\n      private resourceService: ResourceService) {\r\n    }\r\n  \r\n    /** get all kpi */\r\n    getAll(): Observable<any> {\r\n      return this.http.get(this.resourceService.getResourceUrl(this.DASHBOARD_API)).map(response => response[this.DASHBOARD_EMBEDDED]);\r\n    }\r\n}\r\n","import {RestService} from '../angular-hal/src/lib/rest.service';\r\nimport { User } from './user.model';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Injectable, Injector } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\n\r\n/** User manager service */\r\n@Injectable()\r\nexport class UserService extends RestService<User> {\r\n  \r\n  /** API resource path */\r\n  public USER_API ='users';\r\n\r\n  /** constructor */\r\n  constructor(injector: Injector,private http: HttpClient) {\r\n    super(User, \"users\", injector);\r\n  }\r\n  \r\n  /** remove user*/\r\n  remove(item: User) {\r\n    return this.http.delete(item._links.self.href);\r\n   \r\n  }\r\n  \r\n  /** save user*/\r\n  save(item: any): Observable<any> {\r\n    let result: Observable<Object>;\r\n    if (item._links!=null) {\r\n      result = this.http.put(item._links.self.href, item);\r\n    } else {\r\n      result = this.http.post(this.resourceService.getResourceUrl(this.USER_API) , item);\r\n    }\r\n    return result;\r\n  }\r\n    \r\n  /** change password o given user id */\r\n  changePassword(id,item: any): Observable<any> {\r\n    let result: Observable<Object>;\r\n    result = this.http.post(this.resourceService.getResourceUrl(this.USER_API+\"/\"+id+\"/change-password\") , item);\r\n    return result;\r\n  }\r\n}\r\n","import {Resource} from '../angular-hal/src/lib/resource';\r\nimport { Territory } from '../territory/territory.model';\r\nimport { User } from './user.model';\r\n/**\r\n * User position model\r\n */\r\nexport class UserPosition extends Resource {\r\n  /** name */\r\n  public name: string;\r\n  /** email */\r\n  public email: string;\r\n  /** organization name*/\r\n  public organization: string;\r\n  /** system created date*/\r\n  public createdDate: any;\r\n  /** system dated date*/\r\n  public datedDate: any;\r\n  /** position territory*/\r\n  public territory: Territory;\r\n  /** user*/\r\n  public user: User;\r\n}\r\n","import {RestService} from '../angular-hal/src/lib/rest.service';\r\nimport { UserPosition } from './user-position.model';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Injectable, Injector } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\n\r\n/** User position manager service */\r\n@Injectable()\r\nexport class UserPositionService  extends RestService<UserPosition> {\r\n  \r\n\r\n  /** API resource path */\r\n  public USER_POSITION_API = 'user-positions';\r\n\r\n  /** constructor */\r\n  constructor(injector: Injector,private http: HttpClient) {\r\n    super(UserPosition, \"user-positions\", injector);\r\n  }\r\n  \r\n  /** remove user position*/\r\n  remove(item: UserPosition) {\r\n    return this.http.delete(item._links.self.href);\r\n   \r\n  }\r\n  \r\n  /** save user position*/\r\n  save(item: any): Observable<any> {\r\n    let result: Observable<Object>;\r\n    if (item._links!=null) {\r\n      result = this.http.put(item._links.self.href, item);\r\n      if (item.user !=null){\r\n          item.substituteRelation('user',item.user).subscribe(result => {\r\n      \r\n      }, error => console.error(error));\r\n      }\r\n      if (item.territory !=null){\r\n          item.substituteRelation('territory',item.territory).subscribe(result => {\r\n      \r\n      }, error => console.error(error));\r\n      }\r\n    } else {\r\n      item.territory = item.territory._links.self.href;\r\n      item.user = item.user._links.self.href;\r\n  \r\n      result = this.http.post(this.resourceService.getResourceUrl(this.USER_POSITION_API) , item);\r\n    }\r\n    return result;\r\n  }\r\n  \r\n}\r\n","import {Resource} from '../angular-hal/src/lib/resource';\r\nimport { Role } from '../role/role.model';\r\nimport { Territory } from '../territory/territory.model';\r\nimport { User } from './user.model';\r\n\r\n/**\r\n * User permission model\r\n */\r\nexport class UserConfiguration extends Resource {\r\n  /** role */  \r\n  public role: Role;\r\n\r\n  /** role Children */  \r\n  public roleChildren: Role;\r\n  \r\n  /** territory */ \r\n  public territory: Territory;\r\n  /** user */\r\n  public user: User;\r\n}\r\n","import { RestService } from '../angular-hal/src/lib/rest.service';\r\nimport { UserConfiguration } from './user-configuration.model';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Injectable, Injector } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\n\r\n/** User configuration manager service */\r\n@Injectable()\r\nexport class UserConfigurationService extends RestService<UserConfiguration> {\r\n\r\n  /** API resource path */\r\n  public USER_CONFIGURATION_API = 'user-configurations';\r\n\r\n  /** constructor */\r\n  constructor(injector: Injector, private http: HttpClient) {\r\n    super(UserConfiguration, \"user-configurations\", injector);\r\n  }\r\n\r\n  /** remove user configuration*/\r\n  remove(item: UserConfiguration) {\r\n    return this.http.delete(item._links.self.href);\r\n\r\n  }\r\n\r\n  /** save user configuration*/\r\n  save(item: any): Observable<any> {\r\n    let result: Observable<Object>;\r\n    if (item._links != null) {\r\n      result = this.http.put(item._links.self.href, item);\r\n      if (item.user != null) {\r\n        item.substituteRelation('user', item.user).subscribe(result => {\r\n\r\n        }, error => console.error(error));\r\n      }\r\n      if (item.territory != null) {\r\n        item.substituteRelation('territory', item.territory).subscribe(result => {\r\n\r\n        }, error => console.error(error));\r\n      }\r\n      if (item.role != null) {\r\n        item.substituteRelation('role', item.role).subscribe(result => {\r\n\r\n        }, error => console.error(error));\r\n      }\r\n      if (item.roleChildren != null) {\r\n        item.substituteRelation('roleChildren', item.roleChildren).subscribe(result => {\r\n\r\n        }, error => console.error(error));\r\n      }\r\n    } else {\r\n      item.territory = item.territory._links.self.href;\r\n      item.role = item.role!=null?item.role._links.self.href:null;\r\n      item.user = item.user._links.self.href;\r\n      item.roleChildren = item.roleChildren!=null?item.roleChildren._links.self.href:null;\r\n      result = this.http.post(this.resourceService.getResourceUrl(this.USER_CONFIGURATION_API), item);\r\n    }\r\n    return result;\r\n  }\r\n\r\n}\r\n","import {Resource} from '../angular-hal/src/lib/resource';\r\nimport { TerritoryGroupType } from './territory-group-type.model';\r\nimport { TerritoryType } from './territory-type.model';\r\n\r\n/**\r\n * Territory model\r\n */\r\nexport class Territory extends Resource {\r\n  /** id */\r\n  public id: number;  \r\n  /** code */\r\n  public code: string;\r\n  /** name */\r\n  public name: string;\r\n  /** address*/\r\n  public territorialAuthorityAddress: string;\r\n  /** admin */\r\n  public territorialAuthorityName: string;\r\n  /** whether territory is blocked*/\r\n  public blocked: boolean;\r\n  /** comments*/\r\n  public note: string;\r\n  /** system created date*/\r\n  public createdDate: any;\r\n  /** contact email */  \r\n  public territorialAuthorityEmail: string;\r\n  /** extension */\r\n  public extent: string;\r\n  /** logo image URL */\r\n  public territorialAuthorityLogo: string;\r\n  /** contact organization name */\r\n  // public organizationName: string;\r\n  /** scope*/\r\n  public scope: string;\r\n  /** type */  \r\n  public type: TerritoryType;\r\n  /** group type */\r\n  public groupType: TerritoryGroupType;\r\n  /** territory members*/\r\n  public members: Territory[];\r\n\r\n}\r\n","import { Territory } from './territory.model';\r\nimport { Injectable, Injector } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport { RestService } from '../angular-hal/src/lib/rest.service';\r\n\r\n/** Territory manager service */\r\n@Injectable()\r\nexport class TerritoryService extends RestService<Territory> {\r\n\r\n  /** API resource path */\r\n  public TERRITORY_API = 'territories';\r\n\r\n  /** constructor */\r\n  constructor(injector: Injector, private http: HttpClient) {\r\n    super(Territory, \"territories\", injector);\r\n  }\r\n\r\n  /** remove territory*/\r\n  remove(item: Territory) {\r\n    return this.http.delete(item._links.self.href);\r\n\r\n  }\r\n\r\n  /** save territory*/\r\n  save(item: Territory): Observable<any> {\r\n    let result: Observable<Object>;\r\n\r\n    let territoryGroupType:any = {}\r\n    territoryGroupType._links = {};\r\n    territoryGroupType._links.self = {};\r\n    territoryGroupType._links.self.href = \"\";\r\n\r\n    if (item.groupType != null) {\r\n      territoryGroupType = item.groupType;\r\n      if (typeof item.groupType._links != 'undefined') {\r\n        item.groupType = item.groupType._links.self.href;\r\n      } \r\n    }\r\n\r\n    if (item._links != null) {\r\n      //update relations\r\n      delete item.groupType;\r\n\r\n      if (territoryGroupType._links.self.href == '') {\r\n        item.deleteRelation('groupType', territoryGroupType).subscribe(result => {\r\n        }, error => console.error(error));\r\n\r\n      } else {\r\n        item.substituteRelation('groupType', territoryGroupType).subscribe(result => {\r\n        }, error => console.error(error));\r\n      }\r\n\r\n      if (item.type != null)\r\n        item.type = item.type._links.self.href;\r\n\r\n      result = this.http.put(item._links.self.href, item);\r\n    } else {\r\n      result = this.http.post(this.resourceService.getResourceUrl(this.TERRITORY_API), item);\r\n    }\r\n    return result;\r\n  }\r\n\r\n}\r\n","import {Resource} from '../angular-hal/src/lib/resource';\r\n\r\n/**\r\n * Territory type model\r\n */\r\nexport class TerritoryType extends Resource {\r\n   /** id */\r\n   public id: number;  \r\n  /** name */\r\n  public name: string;\r\n}\r\n","import { Territory } from './territory.model';\r\nimport { Injectable, Injector } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport {RestService} from '../angular-hal/src/lib/rest.service';\r\nimport { TerritoryType } from './territory-type.model';\r\n\r\n/** TerritoryType manager service */\r\n@Injectable()\r\nexport class TerritoryTypeService extends RestService<TerritoryType> {\r\n  \r\n\r\n  /** API resource path */\r\n  public TERRITORYTYPE_API = 'territory-types';\r\n\r\n  /** constructor */\r\n  constructor(injector: Injector,private http: HttpClient) {\r\n    super(TerritoryType, \"territory-types\", injector);\r\n  }\r\n  \r\n  /** remove territory type*/\r\n  remove(item: TerritoryType) {\r\n    return this.http.delete(item._links.self.href);\r\n   \r\n  }\r\n  \r\n  /** save territory type*/\r\n  save(item: any): Observable<any> {\r\n    let result: Observable<Object>;\r\n    if (item._links!=null) {\r\n      result = this.http.put(item._links.self.href, item);\r\n    } else {\r\n      result = this.http.post(this.resourceService.getResourceUrl(this.TERRITORYTYPE_API) , item);\r\n    }\r\n    return result;\r\n  }\r\n  \r\n}\r\n","import {Resource} from '../angular-hal/src/lib/resource';\r\n\r\n/**\r\n * Territory type model\r\n */\r\nexport class TerritoryGroupType extends Resource {\r\n  /** id */\r\n  public id: number;  \r\n  /** name */\r\n  public name: string;\r\n}\r\n","import { TerritoryGroupType } from './territory-group-type.model';\r\nimport { Injectable, Injector } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport {RestService} from '../angular-hal/src/lib/rest.service';\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class TerritoryGroupTypeService extends RestService<TerritoryGroupType> {\r\n  \r\n  /** API resource path */\r\n  public TERRITORYGROUPTYPE_API = 'territory-group-types';\r\n\r\n  /** constructor */\r\n  constructor(injector: Injector,private http: HttpClient) {\r\n    super(TerritoryGroupType, \"territory-group-types\", injector);\r\n  }\r\n  \r\n  /** remove territory*/\r\n  remove(item: TerritoryGroupType) {\r\n    return this.http.delete(item._links.self.href);\r\n   \r\n  }\r\n  \r\n  /** save territory*/\r\n  save(item: any): Observable<any> {\r\n    let result: Observable<Object>;\r\n    if (item._links!=null) {\r\n      result = this.http.put(item._links.self.href, item);\r\n    } else {\r\n      result = this.http.post(this.resourceService.getResourceUrl(this.TERRITORYGROUPTYPE_API) , item);\r\n    }\r\n    return result;\r\n  }\r\n  \r\n}","import {Resource} from '../angular-hal/src/lib/resource';\r\n\r\n/**\r\n * Role model\r\n */\r\nexport class Role extends Resource {\r\n  /** id */\r\n  public id: number;\r\n  /** name*/\r\n  public name: string;\r\n  /** comments*/\r\n  public description: string;\r\n\r\n}\r\n","import { Role } from './role.model';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Injectable, Injector } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport {RestService} from '../angular-hal/src/lib/rest.service';\r\n\r\n/** Role manager service */\r\n@Injectable()\r\nexport class RoleService extends RestService<Role> {\r\n  \r\n  /** API resource path */\r\n  public ROLE_API = 'roles';\r\n\r\n  /** constructor */\r\n  constructor(injector: Injector,private http: HttpClient) {\r\n    super(Role, \"roles\", injector);\r\n  }\r\n  \r\n  /** remove role*/\r\n  remove(item: Role) {\r\n    return this.http.delete(item._links.self.href);\r\n   \r\n  }\r\n  \r\n  /** save role*/\r\n  save(item: any): Observable<any> {\r\n    let result: Observable<Object>;\r\n    if (item._links!=null) {\r\n      result = this.http.put(item._links.self.href, item);\r\n    } else {\r\n      result = this.http.post(this.resourceService.getResourceUrl(this.ROLE_API) , item);\r\n    }\r\n    return result;\r\n  }\r\n  \r\n}\r\n","import {Resource} from '../angular-hal/src/lib/resource';\r\n/**\r\n * Connection model\r\n */\r\nexport class Connection extends Resource {\r\n  /** id */\r\n  public id: number;\r\n  /** name*/\r\n  public name: string;\r\n  /** type*/\r\n  public type: string;\r\n  /** user*/\r\n  public user: string;\r\n  /** password*/\r\n  public password: string;\r\n  /** connection string*/\r\n  public connectionString: string;\r\n\r\n}\r\n","import { Connection } from './connection.model';\r\nimport { Injectable, Injector } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport {RestService} from '../angular-hal/src/lib/rest.service';\r\n\r\n/** Connection manager service */\r\n@Injectable()\r\nexport class ConnectionService extends RestService<Connection> {\r\n  \r\n\r\n  /** API resource path */\r\n  public CONNECTION_API = 'connections';\r\n\r\n  /** constructor */\r\n  constructor(injector: Injector,private http: HttpClient) {\r\n    super(Connection, \"connections\", injector);\r\n  }\r\n  \r\n  /** remove connection*/\r\n  remove(item: Connection) {\r\n    return this.http.delete(item._links.self.href);\r\n   \r\n  }\r\n  \r\n  /** save connection*/\r\n  save(item: Connection): Observable<any> {\r\n    let result: Observable<Object>;\r\n    if (item._links!=null) {\r\n      \r\n      result = this.http.put(item._links.self.href, item);\r\n    } else {\r\n      result = this.http.post(this.resourceService.getResourceUrl(this.CONNECTION_API) , item);\r\n    }\r\n    return result;\r\n  }\r\n\r\n  testConnection(item:any): Observable<any> {\r\n    let result: Observable<Object>;\r\n    result=this.http.post(this.resourceService.getResourceUrl(this.CONNECTION_API)+\"/test\" , item);\r\n    return result;\r\n  }\r\n  \r\n}\r\n","import {Resource} from '../angular-hal/src/lib/resource';\r\n\r\nimport { Connection } from '../connection/connection.model';\r\nimport { Role } from '../role/role.model';\r\nimport { TaskType } from './task-type.model';\r\nimport { TaskGroup } from './task-group.model';\r\nimport { TaskAvailability } from './task-availability.model';\r\nimport { TaskParameter } from './task-parameter.model';\r\n\r\n//FIXME ensure task creation in admin app upon initialization (as it is done with Roles and default Users)\r\n/** GEOADMIN_task id */\r\nexport const GEOADMIN_TREE_TASK_ID:string  = \"geoadmin\";\r\n\r\nimport { TaskUI } from './task-ui.model';\r\n/** Task model */\r\nexport class Task extends Resource {\r\n  /** id */\r\n  public id: number;\r\n  /** name */  \r\n  public name: string;\r\n  /** order*/\r\n  public order: Number;\r\n  /** system created date*/\r\n  public createdDate: any;\r\n  /** task group*/\r\n  public group: TaskGroup;\r\n  /** task type*/\r\n  public type: TaskType;\r\n  /** task UI*/\r\n  public ui: TaskUI;\r\n  /** parameters*/\r\n  public parameters: TaskParameter[];\r\n  /** connection*/\r\n  public connection: Connection;\r\n  /** roles*/\r\n  public roles: Role[];\r\n  /** availabilities*/\r\n  public availabilities: TaskAvailability[];\r\n}\r\n","import { Task } from './task.model';\r\nimport { Injectable, Injector } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport {RestService} from '../angular-hal/src/lib/rest.service';\r\n\r\n/** Task manager service */\r\n@Injectable()\r\nexport class TaskService extends RestService<Task> {\r\n\r\n    /** API resource path */\r\n    public CONNECTION_API = 'tasks';\r\n\r\n    /** constructor */\r\n    constructor(injector: Injector, private http: HttpClient) {\r\n        super(Task, \"tasks\", injector);\r\n    }\r\n\r\n    /** remove task*/\r\n    remove(item: Task) {\r\n        return this.http.delete(item._links.self.href);\r\n    }\r\n    \r\n    /** save task*/\r\n    save(item: Task): Observable<any> {\r\n        let result: Observable<Object>;\r\n        const taskType = item.type;\r\n        const taskGroup = item.group;\r\n        let taskConnection = item.connection;\r\n        let taskUI = item.ui;\r\n        if (item._links != null) {\r\n            result = this.http.put(item._links.self.href, item);\r\n        } else {\r\n            result = this.http.post(this.resourceService.getResourceUrl(this.CONNECTION_API), item);\r\n        }\r\n        return result;\r\n    }\r\n\r\n}\r\n","import {Resource} from '../angular-hal/src/lib/resource';\r\n/**\r\n * Task type model\r\n */\r\nexport class TaskType extends Resource {\r\n  /** name*/  \r\n  public name: string;\r\n\r\n}\r\n","import { TaskType } from './task-type.model';\r\nimport { Injectable, Injector } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport {RestService} from '../angular-hal/src/lib/rest.service';\r\n\r\n/** TaskType manager service */\r\n@Injectable()\r\nexport class TaskTypeService extends RestService<TaskType> {\r\n  \r\n\r\n  /** API resource path */\r\n  public CONNECTION_API = 'task-types';\r\n\r\n  /** constructor */\r\n  constructor(injector: Injector,private http: HttpClient) {\r\n    super(TaskType, \"task-types\", injector);\r\n  }\r\n  \r\n  /** remove task type*/\r\n  remove(item: TaskType) {\r\n    return this.http.delete(item._links.self.href);\r\n   \r\n  }\r\n  \r\n  /** save task type*/\r\n  save(item: TaskType): Observable<any> {\r\n    let result: Observable<Object>;\r\n    if (item._links!=null) {\r\n      \r\n      result = this.http.put(item._links.self.href, item);\r\n    } else {\r\n      result = this.http.post(this.resourceService.getResourceUrl(this.CONNECTION_API) , item);\r\n    }\r\n    return result;\r\n  }\r\n  \r\n}\r\n","import {Resource} from '../angular-hal/src/lib/resource';\r\n/**\r\n * Task group model\r\n */\r\nexport class TaskGroup extends Resource {\r\n  /** id */\r\n  public id: number;  \r\n  /** name*/  \r\n  public name: string;\r\n\r\n}\r\n","import { TaskGroup } from './task-group.model';\r\nimport { Injectable, Injector } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport {RestService} from '../angular-hal/src/lib/rest.service';\r\n\r\n/** Task group manager service */\r\n@Injectable()\r\nexport class TaskGroupService extends RestService<TaskGroup> {\r\n  \r\n\r\n  /** API resource path */\r\n  public CONNECTION_API = 'task-groups';\r\n\r\n  /** constructor */\r\n  constructor(injector: Injector,private http: HttpClient) {\r\n    super(TaskGroup, \"task-groups\", injector);\r\n  }\r\n  \r\n  /** remove task group*/\r\n  remove(item: TaskGroup) {\r\n    return this.http.delete(item._links.self.href);\r\n   \r\n  }\r\n  \r\n  /** save task group*/\r\n  save(item: TaskGroup): Observable<any> {\r\n    let result: Observable<Object>;\r\n    if (item._links!=null) {\r\n      \r\n      result = this.http.put(item._links.self.href, item);\r\n    } else {\r\n      result = this.http.post(this.resourceService.getResourceUrl(this.CONNECTION_API) , item);\r\n    }\r\n    return result;\r\n  }\r\n  \r\n}\r\n","import {Resource} from '../angular-hal/src/lib/resource';\r\nimport {Task} from './task.model';  \r\n/**\r\n * Task parameter model\r\n */\r\nexport class TaskParameter extends Resource {\r\n  /** name*/  \r\n  public name: string;\r\n  \r\n  /** type*/\r\n  public type: string;\r\n    \r\n  /** value*/\r\n  public value: string;\r\n  \r\n  /** order*/  \r\n  public order: Number;\r\n  \r\n  /** task*/  \r\n  public task:Task;\r\n\r\n}\r\n","import { TaskParameter } from './task-parameter.model';\r\nimport { Injectable, Injector } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport {RestService} from '../angular-hal/src/lib/rest.service';\r\n\r\n/** Task parameter manager service */\r\n@Injectable() \r\nexport class TaskParameterService extends RestService<TaskParameter> {\r\n  \r\n\r\n  /** API resource path */\r\n  public TASK_PARAMETER_API = 'task-parameters';\r\n\r\n  /** constructor */\r\n  constructor(injector: Injector,private http: HttpClient) {\r\n    super(TaskParameter, \"task-parameters\", injector);\r\n  }\r\n  \r\n  /** remove task parameter*/\r\n  remove(item: TaskParameter) {\r\n    return this.http.delete(item._links.self.href);\r\n   \r\n  }\r\n  \r\n  /** save task parameter*/\r\n  save(item: TaskParameter): Observable<any> {\r\n    let result: Observable<Object>;\r\n    if (item._links!=null) {\r\n      result = this.http.put(item._links.self.href, item);\r\n      if (item.task !=null){\r\n          item.substituteRelation('task',item.task).subscribe(result => {\r\n      \r\n      }, error => console.error(error));\r\n      }\r\n      \r\n    } else {\r\n      item.task = item.task._links.self.href;\r\n  \r\n      result = this.http.post(this.resourceService.getResourceUrl(this.TASK_PARAMETER_API) , item);\r\n    }\r\n    return result;\r\n  }\r\n  \r\n}\r\n","import {Resource} from '../angular-hal/src/lib/resource';\r\nimport { Territory } from '../territory/territory.model';\r\nimport { Task } from './task.model';\r\n/**\r\n * Task availability model\r\n */\r\nexport class TaskAvailability extends Resource {\r\n  /** territory*/\r\n  public territory: Territory;\r\n  /** task*/\r\n  public task: Task;\r\n}\r\n","import { TaskAvailability } from './task-availability.model';\r\nimport { Injectable, Injector } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport {RestService} from '../angular-hal/src/lib/rest.service';\r\n\r\n/** Task availability manager service */\r\n@Injectable() \r\nexport class TaskAvailabilityService extends RestService<TaskAvailability> {\r\n  \r\n\r\n  /** API resource path */\r\n  public TASK_AVAILABILITY_API = 'task-availabilities';\r\n\r\n  /** constructor */\r\n  constructor(injector: Injector,private http: HttpClient) {\r\n    super(TaskAvailability, \"task-availabilities\", injector);\r\n  }\r\n  \r\n  /** remove task availability*/\r\n  remove(item: TaskAvailability) {\r\n    return this.http.delete(item._links.self.href);\r\n   \r\n  }\r\n  \r\n  /** save task availability*/\r\n  save(item: TaskAvailability): Observable<any> {\r\n    let result: Observable<Object>;\r\n    if (item._links!=null) {\r\n      result = this.http.put(item._links.self.href, item);\r\n      if (item.task !=null){\r\n          item.substituteRelation('task',item.task).subscribe(result => {\r\n      \r\n      }, error => console.error(error));\r\n      }\r\n      if (item.territory !=null){\r\n          item.substituteRelation('territory',item.territory).subscribe(result => {\r\n      \r\n      }, error => console.error(error));\r\n      }\r\n    } else {\r\n      item.territory = item.territory._links.self.href;\r\n      item.task = item.task._links.self.href;\r\n  \r\n      result = this.http.post(this.resourceService.getResourceUrl(this.TASK_AVAILABILITY_API) , item);\r\n    }\r\n    return result;\r\n  }\r\n  \r\n}\r\n","import {Resource} from '../angular-hal/src/lib/resource';\r\n/**\r\n * Task UI model\r\n */\r\nexport class TaskUI extends Resource {\r\n  /** name*/\r\n  public name: string;\r\n  \r\n  /** tooltip*/  \r\n  public tooltip: string;\r\n    \r\n  /** order*/ \r\n  public order: number;\r\n\r\n}\r\n","import { TaskUI } from './task-ui.model';\r\nimport { Injectable, Injector } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport {RestService} from '../angular-hal/src/lib/rest.service';\r\n\r\n/** Task UI manager service */\r\n@Injectable()\r\nexport class TaskUIService extends RestService<TaskUI> {\r\n  \r\n\r\n  /** API resource path */\r\n  public CONNECTION_API = 'task-uis';\r\n\r\n  /** constructor */\r\n  constructor(injector: Injector,private http: HttpClient) {\r\n    super(TaskUI, \"task-uis\", injector);\r\n  }\r\n  \r\n  /** remove task UI*/\r\n  remove(item: TaskUI) {\r\n    return this.http.delete(item._links.self.href);\r\n   \r\n  }\r\n  \r\n  /** save task UI*/\r\n  save(item: TaskUI): Observable<any> {\r\n    let result: Observable<Object>;\r\n    if (item._links!=null) {      \r\n      result = this.http.put(item._links.self.href, item);\r\n    } else {\r\n      result = this.http.post(this.resourceService.getResourceUrl(this.CONNECTION_API) , item);\r\n    }\r\n    return result;\r\n  }\r\n  \r\n}\r\n","import {Resource} from '../angular-hal/src/lib/resource';\r\nimport { Language } from './language.model';\r\n\r\n\r\n/** Task model */\r\nexport class Translation extends Resource {\r\n  /** id */\r\n  public id: number;\r\n  /** id */\r\n  public element: number;\r\n  /** name */\r\n  public translation: string;\r\n  /** column */\r\n  public column: string;\r\n  /** name */\r\n  public language: Language;\r\n\r\n\r\n\r\n}\r\n","import { Injectable, Injector } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport {RestService} from '../angular-hal/src/lib/rest.service';\nimport { Translation } from './translation.model';\n\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class TranslationService extends RestService<Translation> {\n\n  /** API resource path */\n  public TRANSLATION_API = 'translations';\n\n  /** constructor */\n  constructor(injector: Injector,private http: HttpClient) {\n    super(Translation, \"translations\", injector);\n  }\n  \n  /** remove translation*/\n  remove(item: Translation) {\n    return this.http.delete(item._links.self.href);\n   \n  }\n  \n  /** save translation*/\n  save(item: Translation): Observable<any> {\n    let result: Observable<Object>;\n\n    let language:any = {}\n    language._links = {};\n    language._links.self = {};\n    language._links.self.href = \"\";\n\n    if (item.language != null) {\n      language = item.language;\n      if (typeof item.language._links != 'undefined') {\n        item.language = item.language._links.self.href;\n      } \n    }\n\n    if (item._links!=null) {\n      delete item.language;\n      // if (language._links.self.href == '') {\n      //   item.deleteRelation('language', language).subscribe(result => {\n      //   }, error => console.error(error));\n\n      // } else {\n      //   item.substituteRelation('language', language).subscribe(result => {\n      //   }, error => console.error(error));\n      // }\n      result = this.http.put(item._links.self.href, item);\n    } else {\n      result = this.http.post(this.resourceService.getResourceUrl(this.TRANSLATION_API) , item);\n    }\n    return result;\n  }\n}\n","import {Resource} from '../angular-hal/src/lib/resource';\r\n\r\n\r\n/** Task model */\r\nexport class Language extends Resource {\r\n  /** id */\r\n  public id: number;\r\n  /** name */\r\n  public shortname: string;\r\n  /** name */\r\n  public name: string;\r\n}\r\n","import { Injectable, Injector } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport {RestService} from '../angular-hal/src/lib/rest.service';\nimport { Language } from './language.model';\n\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class LanguageService extends RestService<Language> {\n\n  /** API resource path */\n  public LANGUAGES_API = 'languages';\n\n  /** constructor */\n  constructor(injector: Injector,private http: HttpClient) {\n    super(Language, \"languages\", injector);\n  }\n  \n  /** remove translation*/\n  remove(item: Language) {\n    return this.http.delete(item._links.self.href);\n   \n  }\n  \n  /** save translation*/\n  save(item: Language): Observable<any> {\n    let result: Observable<Object>;\n    if (item._links!=null) {\n      result = this.http.put(item._links.self.href, item);\n    } else {\n      result = this.http.post(this.resourceService.getResourceUrl(this.LANGUAGES_API) , item);\n    }\n    return result;\n  }\n}\n","import {Resource} from '../angular-hal/src/lib/resource';\r\nimport {Connection} from '../connection/connection.model';\r\nimport {ServiceParameter} from './service-parameter.model';\r\n/**\r\n * Service model\r\n */\r\nexport class Service extends Resource {\r\n  /** id */\r\n  public id: number;\r\n  /** name*/\r\n  public name: string;\r\n    \r\n  /** type*/\r\n  public type: string;\r\n\r\n  /** url*/  \r\n  public serviceURL: string;\r\n\r\n  /** projections*/  \r\n  public supportedSRS: string;\r\n  \r\n  /** legend*/\r\n  public legend: string;\r\n\r\n  /** infoUrl*/  \r\n  public infoUrl: string;\r\n  \r\n  /** system created date*/\r\n  public createdDate: any;\r\n\r\n  /** connection*/\r\n  public connection: Connection;\r\n  \r\n  /** parameters*/  \r\n  public parameters: ServiceParameter[];\r\n\r\n  /** whether service is blocked*/\r\n  public blocked: boolean;\r\n}\r\n","import { Service } from './service.model';\r\nimport { Injectable, Injector } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport {RestService} from '../angular-hal/src/lib/rest.service';\r\n\r\n/** Service manager service */\r\n@Injectable()\r\nexport class ServiceService extends RestService<Service> {\r\n\r\n  /** API resource path */\r\n  public SERVICE_API = 'services';\r\n\r\n  /** constructor */\r\n  constructor(injector: Injector,private http: HttpClient) {\r\n    super(Service, \"services\", injector);\r\n  }\r\n  \r\n  /** remove service*/\r\n  remove(item: Service) {\r\n    return this.http.delete(item._links.self.href);\r\n   \r\n  }\r\n  \r\n  /** save service*/\r\n  save(item: Service): Observable<any> {\r\n    let result: Observable<Object>;\r\n    let serviceConnection = item.connection;\r\n\r\n    if (item.connection!=null){\r\n        if (typeof item.connection._links!= 'undefined') { \r\n            item.connection = item.connection._links.self.href;\r\n        } else {\r\n            serviceConnection._links= {};\r\n            serviceConnection._links.self = {};\r\n            serviceConnection._links.self.href=\"\";\r\n        }        \r\n     }\r\n\r\n    if (item._links!=null) {\r\n      //update relations\r\n      /*delete item.connection;        \r\n      \r\n      if (serviceConnection._links.self.href==''){\r\n         item.deleteRelation('connection',serviceConnection).subscribe(result => {     \r\n\r\n          \r\n             }, error => console.error(error));\r\n          \r\n      } else {\r\n          item.substituteRelation('connection',serviceConnection).subscribe(result => {\r\n         \r\n\r\n      \r\n            }, error => console.error(error));           \r\n       } */\r\n       \r\n         \r\n      result = this.http.put(item._links.self.href, item);\r\n\r\n           \r\n    } else {\r\n      result = this.http.post(this.resourceService.getResourceUrl(this.SERVICE_API) , item);\r\n    }\r\n    return result;\r\n  }\r\n  \r\n}\r\n","import {Resource} from '../angular-hal/src/lib/resource';\r\nimport {Service} from './service.model'; \r\n/**\r\n * Service parameter model\r\n */\r\nexport class ServiceParameter extends Resource {\r\n  /** name*/\r\n  public name: string;\r\n  \r\n  /** type*/\r\n  public type: string;\r\n    \r\n  /** value*/  \r\n  public value: string;\r\n  \r\n  /** service*/\r\n  public service: Service;\r\n\r\n}\r\n","import { ServiceParameter } from './service-parameter.model';\r\nimport { Injectable, Injector } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport {RestService} from '../angular-hal/src/lib/rest.service';\r\n\r\n/** Service parameter manager service */\r\n@Injectable() \r\nexport class ServiceParameterService extends RestService<ServiceParameter> {\r\n\r\n  /** API resource path */\r\n  public SERVICE_PARAMETER_API = 'service-parameters';\r\n\r\n  /** constructor */\r\n  constructor(injector: Injector,private http: HttpClient) {\r\n    super(ServiceParameter, \"service-parameters\", injector);\r\n  }\r\n  \r\n  /** remove service parameter*/\r\n  remove(item: ServiceParameter) {\r\n    return this.http.delete(item._links.self.href);\r\n   \r\n  }\r\n  \r\n  /** save service parameter*/\r\n  save(item: ServiceParameter): Observable<any> {\r\n    let result: Observable<Object>;\r\n    if (item._links!=null) {\r\n      \r\n      \r\n      if (item.service !=null){\r\n          let service =  item.service;\r\n          delete item.service;\r\n          item.substituteRelation('service',service).subscribe(result => {            \r\n          \r\n      }, error => console.error(error));\r\n      }\r\n      result = this.http.put(item._links.self.href, item);\r\n      \r\n      \r\n    } else {\r\n      item.service = item.service._links.self.href;\r\n  \r\n      result = this.http.post(this.resourceService.getResourceUrl(this.SERVICE_PARAMETER_API) , item);\r\n    }\r\n    return result;\r\n  }\r\n  \r\n}\r\n","import {Resource} from '../angular-hal/src/lib/resource';\r\nimport {Service} from '../service/service.model';\r\nimport {Connection} from '../connection/connection.model';\r\nimport {CartographyAvailability} from './cartography-availability.model';\r\n/**\r\n * Cartography\r\n */\r\nexport class Cartography extends Resource {\r\n  /** id */\r\n  public id: number;  \r\n  /** name*/\r\n  public name: string;\r\n  \r\n  /** type*/\r\n  public type : string;\r\n\r\n  /** service*/\r\n  public service : Service;\r\n\r\n  /** order*/  \r\n  public order: Number; \r\n\r\n  /** description*/  \r\n  public description: String;\r\n\r\n  /** source*/  \r\n  public source: String;\r\n\r\n  /** whether cartography is blocked*/\r\n  public blocked: boolean;  \r\n\r\n  /** apply filter to get map*/\r\n  public applyFilterToGetMap: String;  \r\n\r\n  /** apply filter to get feature information*/\r\n  public applyFilterToGetFeatureInfo: boolean;  \r\n\r\n  /** apply filter to spatial selection*/\r\n  public applyFilterToSpatialSelection: boolean;  \r\n\r\n  /** selectable layers*/\r\n  public selectableLayers: string[];\r\n\r\n  /** transparency*/ \r\n  public transparency: Number;\r\n\r\n  /** whether layer is queryable*/  \r\n  public queryable: Boolean;\r\n\r\n  /** whether layer is queryable*/ \r\n  public queryAct: Boolean;\r\n\r\n  /** query layer*/\r\n  public queryLay: string;\r\n\r\n  /** system created date*/\r\n  public createdDate: any;\r\n\r\n  /** minimum scale*/\r\n  public minimumScale: Number;\r\n\r\n  /** maximum scale*/\r\n  public maximumScale: Number;\r\n\r\n  /** layers*/  \r\n  public layers: string;\r\n  \r\n  /** connection*/\r\n  public connection: Connection;\r\n\r\n  /** queryableFeatureEnabled */\r\n  public queryableFeatureEnabled: Boolean;\r\n\r\n    /** queryableLayers */\r\n  public queryableFeatureAvailable: Boolean;\r\n\r\n    /** queryableLayers */\r\n  public queryableLayers: string[];\r\n\r\n  /** availabilities*/\r\n  public availabilities : CartographyAvailability[];\r\n\r\n  /** whether layer is queryable*/ \r\n  public selectableFeatureEnabled: Boolean;\r\n\r\n  /** selection layer*/\r\n  public selectionLayer: string;\r\n\r\n  /** selection service*/  \r\n  public selectionService: Service;\r\n\r\n  /** legend tip*/  \r\n  public legendType: string;\r\n  \r\n  /** legend url*/\r\n  public legendURL: string;\r\n\r\n  /** whether layer is editable*/\r\n  public editable: Boolean;\r\n\r\n  /** metadata URL*/\r\n  public metadataURL: string;\r\n\r\n  /** metadata URL*/\r\n  public datasetURL: string;\r\n\r\n  /** whether layer is themable*/\r\n  public thematic: Boolean;\r\n  \r\n  /** geometry type*/\r\n  public geometryType: string;\r\n  \r\n\r\n}\r\n","import { Cartography } from './cartography.model';\r\nimport { Injectable, Injector } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport { RestService } from '../angular-hal/src/lib/rest.service';\r\nimport { Connection } from '../connection/connection.model';\r\nimport { Service } from '../service/service.model';\r\n\r\n/** Cartography manager service */\r\n@Injectable()\r\nexport class CartographyService extends RestService<Cartography> {\r\n\r\n  /** API resource path */\r\n  public CARTOGRAPHY_API = 'cartographies';\r\n\r\n  /** constructor */\r\n  constructor(injector: Injector, private http: HttpClient) {\r\n    super(Cartography, \"cartographies\", injector);\r\n  }\r\n\r\n  /** remove cartography*/\r\n  remove(item: Cartography) {\r\n    return this.http.delete(item._links.self.href);\r\n\r\n  }\r\n\r\n  /** save cartography*/\r\n  save(item: Cartography): Observable<any> {\r\n    let result: Observable<Object>;\r\n\r\n    let cartographyConnection:any={};\r\n    cartographyConnection._links = {};\r\n    cartographyConnection._links.self = {};\r\n    cartographyConnection._links.self.href = \"\";\r\n     \r\n    let cartographyService:any={};\r\n    cartographyService._links = {};\r\n    cartographyService._links.self = {};\r\n    cartographyService._links.self.href = \"\";\r\n    \r\n    let cartographySelectionService:any = {};\r\n    cartographySelectionService._links = {};\r\n    cartographySelectionService._links.self = {};\r\n    cartographySelectionService._links.self.href = \"\";\r\n\r\n    if (item.service != null) {\r\n      cartographyService=  item.service;\r\n      if (typeof item.service._links != 'undefined') {\r\n        item.service = item.service._links.self.href;\r\n      }\r\n    }\r\n\r\n    if (item.selectionService != null) {\r\n      cartographySelectionService = item.selectionService\r\n      if (typeof item.selectionService._links != 'undefined') {\r\n        item.selectionService = item.selectionService._links.self.href;\r\n      }\r\n    }\r\n\r\n    if (item.connection != null) {\r\n      cartographyConnection=  item.connection;\r\n      if (typeof item.connection._links != 'undefined') {\r\n        item.connection = item.connection._links.self.href;\r\n      }\r\n    }\r\n\r\n    if (item._links != null) {\r\n\r\n      //update relations\r\n      delete item.connection;\r\n      delete item.service;\r\n      delete item.selectionService;\r\n\r\n      if (cartographyConnection._links.self.href == '') {\r\n        item.deleteRelation('spatialSelectionConnection', cartographyConnection).subscribe(result => {\r\n        }, error => console.error(error));\r\n      } else {\r\n        item.substituteRelation('spatialSelectionConnection', cartographyConnection).subscribe(result => {\r\n        }, error => console.error(error));\r\n      }\r\n\r\n      if (cartographyService._links.self.href == '') {\r\n        item.deleteRelation('service', cartographyService).subscribe(result => {\r\n        }, error => console.error(error));\r\n      } else {\r\n        item.substituteRelation('service', cartographyService).subscribe(result => {\r\n        }, error => console.error(error));\r\n      }\r\n\r\n      if (cartographySelectionService._links.self.href == '') {\r\n        item.deleteRelation('spatialSelectionService', cartographySelectionService).subscribe(result => {\r\n        }, error => console.error(error));\r\n      } else {\r\n        item.substituteRelation('spatialSelectionService', cartographySelectionService).subscribe(result => {\r\n        }, error => console.error(error));\r\n      }\r\n\r\n      result = this.http.put(item._links.self.href, item);\r\n\r\n    } else {\r\n      result = this.http.post(this.resourceService.getResourceUrl(this.CARTOGRAPHY_API), item);\r\n    }\r\n    return result;\r\n  }\r\n\r\n}\r\n","import {Resource} from '../angular-hal/src/lib/resource';\r\nimport {Cartography} from './cartography.model';\r\nimport {Role} from '../role/role.model';\r\n/**\r\n * Cartography group\r\n */\r\nexport class CartographyGroup extends Resource {\r\n  /** id */\r\n  public id: number;  \r\n  /** name*/\r\n  public name: string;\r\n  /** type*/\r\n  public type: string;\r\n  /** members*/\r\n  public members: Cartography[];\r\n  /** roles*/\r\n  public roles: Role[];\r\n\r\n}\r\n","import { CartographyGroup } from './cartography-group.model';\r\nimport { Injectable, Injector } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport {RestService} from '../angular-hal/src/lib/rest.service';\r\n\r\n/** CartographyGroup manager service */\r\n@Injectable()\r\nexport class CartographyGroupService extends RestService<CartographyGroup> {\r\n  \r\n\r\n  /** API resource path */\r\n  public CARTOGRAPHY_GROUP_API ='cartography-groups';\r\n\r\n  /** constructor */\r\n  constructor(injector: Injector,private http: HttpClient) {\r\n    super(CartographyGroup, \"cartography-groups\", injector);\r\n  }\r\n  \r\n  /** remove cartography group*/\r\n  remove(item: CartographyGroup) {\r\n    return this.http.delete(item._links.self.href);\r\n   \r\n  }\r\n  \r\n  /** save cartography group*/\r\n  save(item: CartographyGroup): Observable<any> {\r\n    let result: Observable<Object>;\r\n    if (item._links!=null) {\r\n      result = this.http.put(item._links.self.href, item);\r\n    } else {\r\n      result = this.http.post(this.resourceService.getResourceUrl(this.CARTOGRAPHY_GROUP_API) , item);\r\n    }\r\n    return result;\r\n  }\r\n  \r\n}\r\n","import {Resource} from '../angular-hal/src/lib/resource';\r\nimport { Territory } from '../territory/territory.model';\r\nimport { Cartography } from './cartography.model';\r\n/**\r\n * Cartography availability model\r\n */\r\nexport class CartographyAvailability extends Resource {\r\n  /** territory*/\r\n  public territory: Territory;\r\n  \r\n  /** system created date*/\r\n  public createdDate: any;\r\n  \r\n  /** cartography*/\r\n  public cartography: Cartography;\r\n}\r\n","import { CartographyAvailability } from './cartography-availability.model';\r\nimport { Injectable, Injector } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport {RestService} from '../angular-hal/src/lib/rest.service';\r\n\r\n/** CartographyAvailability manager service */\r\n@Injectable() \r\nexport class CartographyAvailabilityService extends RestService<CartographyAvailability> {\r\n  \r\n\r\n  /** API resource path */\r\n  public CARTOGRAPHY_AVAILABILITY_API = 'cartography-availabilities';\r\n\r\n  /** constructor */\r\n  constructor(injector: Injector,private http: HttpClient) {\r\n    super(CartographyAvailability, \"cartography-availabilities\", injector);\r\n  }\r\n  \r\n  /** remove cartography availability*/\r\n  remove(item: CartographyAvailability) {\r\n    return this.http.delete(item._links.self.href);\r\n   \r\n  }\r\n  \r\n  /** save cartography availability*/\r\n  save(item: CartographyAvailability): Observable<any> {\r\n    let result: Observable<Object>;\r\n    if (item._links!=null) {\r\n      result = this.http.put(item._links.self.href, item);\r\n      if (item.cartography !=null){\r\n          item.substituteRelation('cartography',item.cartography).subscribe(result => {\r\n      \r\n      }, error => console.error(error));\r\n      }\r\n      if (item.territory !=null){\r\n          item.substituteRelation('territory',item.territory).subscribe(result => {\r\n      \r\n      }, error => console.error(error));\r\n      }\r\n    } else {\r\n      item.territory = item.territory._links.self.href;\r\n      item.cartography = item.cartography._links.self.href;\r\n  \r\n      result = this.http.post(this.resourceService.getResourceUrl(this.CARTOGRAPHY_AVAILABILITY_API) , item);\r\n    }\r\n    return result;\r\n  }\r\n  \r\n}\r\n","import {Resource} from '../angular-hal/src/lib/resource';\r\nimport { TerritoryType } from '../territory/territory-type.model';\r\nimport { Cartography } from './cartography.model';\r\n/**\r\n * Cartography availability model\r\n */\r\nexport class CartographyFilter extends Resource {\r\n \r\n  /** name*/\r\n  public name: string;\r\n\r\n  /** required */\r\n  public required: boolean;\r\n\r\n  /** type*/\r\n  public type: string;\r\n\r\n  /** Territorial level. */\r\n  public territorialLevel: TerritoryType;\r\n  \r\n  /** column */\r\n  public column: string;\r\n\r\n  /** values*/  \r\n  public values: string;\r\n\r\n  /** value*/  \r\n  public valueType: string;\r\n\r\n  /** cartography*/\r\n  public cartography: Cartography;\r\n\r\n\r\n}\r\n","import { CartographyFilter } from './cartography-filter.model';\r\nimport { Injectable, Injector } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport {RestService} from '../angular-hal/src/lib/rest.service';\r\n\r\n/** CartographyFilter manager service */\r\n@Injectable() \r\nexport class CartographyFilterService extends RestService<CartographyFilter> {\r\n  \r\n\r\n  /** API resource path */\r\n  public CARTOGRAPHY_FILTER_API = 'cartography-filters';\r\n\r\n  /** constructor */\r\n  constructor(injector: Injector,private http: HttpClient) {\r\n    super(CartographyFilter, \"cartography-filters\", injector);\r\n  }\r\n  \r\n  /** remove cartography filter*/\r\n  remove(item: CartographyFilter) {\r\n    return this.http.delete(item._links.self.href);\r\n   \r\n  }\r\n  \r\n  /** save cartography availability*/\r\n  save(item: CartographyFilter): Observable<any> {\r\n    let result: Observable<Object>;\r\n    if (item._links!=null) {\r\n      result = this.http.put(item._links.self.href, item);\r\n      if (item.cartography !=null){\r\n          item.substituteRelation('cartography',item.cartography).subscribe(result => {\r\n      }, error => console.error(error));\r\n      }\r\n\r\n      if(item.territorialLevel != null && item.territorialLevel != undefined ){\r\n        item.substituteRelation('territorialLevel',item.territorialLevel).subscribe(result => {\r\n        }, error => console.error(error));\r\n      }\r\n     \r\n    } else {\r\n      \r\n      item.cartography = item.cartography._links.self.href;\r\n      item.territorialLevel=item.territorialLevel._links.self.href;\r\n      \r\n      result = this.http.post(this.resourceService.getResourceUrl(this.CARTOGRAPHY_FILTER_API) , item);\r\n    }\r\n    return result;\r\n  }\r\n  \r\n}\r\n","import {Resource} from '../angular-hal/src/lib/resource';\r\nimport {Cartography} from './cartography.model'; \r\n/**\r\n * Service parameter model\r\n */\r\nexport class CartographyParameter extends Resource {\r\n  /** name*/\r\n  public name: string;\r\n  \r\n  /** type*/\r\n  public type: string;\r\n    \r\n  /** value*/  \r\n  public value: string;\r\n  \r\n  /** order*/  \r\n  public order: string;\r\n\r\n  /** cartography*/\r\n  public cartography: Cartography;\r\n\r\n}\r\n","import { CartographyParameter } from './cartography-parameter.model';\r\nimport { Injectable, Injector } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport {RestService} from '../angular-hal/src/lib/rest.service';\r\n\r\n/** Service parameter manager service */\r\n@Injectable() \r\nexport class CartographyParameterService extends RestService<CartographyParameter> {\r\n\r\n  /** API resource path */\r\n  public CARTOGRAPHY_PARAMETER_API = 'cartography-parameters';\r\n\r\n  /** constructor */\r\n  constructor(injector: Injector,private http: HttpClient) {\r\n    super(CartographyParameter, \"cartography-parameters\", injector);\r\n  }\r\n  \r\n  /** remove service parameter*/\r\n  remove(item: CartographyParameter) {\r\n    return this.http.delete(item._links.self.href);\r\n   \r\n  }\r\n  \r\n  /** save service parameter*/\r\n  save(item: CartographyParameter): Observable<any> {\r\n    let result: Observable<Object>;\r\n    if (item._links!=null) {\r\n      \r\n      \r\n      if (item.cartography !=null){\r\n          let cartography =  item.cartography;\r\n          delete item.cartography;\r\n          item.substituteRelation('cartography',cartography).subscribe(result => {            \r\n          \r\n      }, error => console.error(error));\r\n      }\r\n      result = this.http.put(item._links.self.href, item);\r\n      \r\n      \r\n    } else {\r\n      item.cartography = item.cartography._links.self.href;\r\n  \r\n      result = this.http.post(this.resourceService.getResourceUrl(this.CARTOGRAPHY_PARAMETER_API) , item);\r\n    }\r\n    return result;\r\n  }\r\n  \r\n}\r\n","import {Resource} from '../angular-hal/src/lib/resource';\r\nimport {CartographyGroup} from './cartography-group.model';\r\n/**\r\n * Background model\r\n */\r\nexport class Background extends Resource {\r\n  /** id */\r\n  public id: number;  \r\n  \r\n  /** name*/\r\n  public name: string;\r\n\r\n  /** description*/\r\n  public description: string;\r\n\r\n  /** image */\r\n  public image: string;\r\n\r\n  /** whether background is active*/\r\n  public active: Boolean;\r\n  \r\n  /** system created date*/\r\n  public createdDate: any;\r\n\r\n  /** cartography group*/\r\n  public cartographyGroup: CartographyGroup;\r\n}\r\n","import { Background } from './background.model';\r\nimport { Injectable, Injector } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport {RestService} from '../angular-hal/src/lib/rest.service';\r\n\r\n/** Background manager service */\r\n@Injectable()\r\nexport class BackgroundService extends RestService<Background> {\r\n\r\n  /** API resource path */\r\n  public BACKGROUND_API = 'backgrounds';\r\n\r\n  /** constructor */\r\n  constructor(injector: Injector,private http: HttpClient) {\r\n    super(Background, \"backgrounds\", injector);\r\n  }\r\n  \r\n  /** remove background*/\r\n  remove(item: Background) {\r\n    return this.http.delete(item._links.self.href);   \r\n  }\r\n  \r\n  /** save background*/\r\n  save(item: Background): Observable<any> {\r\n    let result: Observable<Object>;\r\n    let backgroundCartographyGroup:any = {}         \r\n    \r\n    backgroundCartographyGroup._links= {};\r\n    backgroundCartographyGroup._links.self = {};\r\n    backgroundCartographyGroup._links.self.href=\"\";\r\n    item.cartographyGroup;\r\n\r\n    if (item.cartographyGroup!=null){\r\n      backgroundCartographyGroup = item.cartographyGroup;\r\n        if (typeof item.cartographyGroup._links!= 'undefined') { \r\n            item.cartographyGroup = item.cartographyGroup._links.self.href;\r\n        }    \r\n     }\r\n\r\n    if (item._links!=null) {\r\n      //update relations\r\n      delete item.cartographyGroup;        \r\n      \r\n      if (backgroundCartographyGroup._links.self.href==''){\r\n         item.deleteRelation('cartographyGroup',backgroundCartographyGroup).subscribe(result => {     \r\n\r\n          \r\n             }, error => console.error(error));\r\n          \r\n      } else {\r\n          item.substituteRelation('cartographyGroup',backgroundCartographyGroup).subscribe(result => {\r\n         \r\n\r\n      \r\n            }, error => console.error(error));           \r\n       } \r\n       \r\n         \r\n      result = this.http.put(item._links.self.href, item);\r\n\r\n           \r\n    } else {\r\n      result = this.http.post(this.resourceService.getResourceUrl(this.BACKGROUND_API) , item);\r\n    }\r\n    return result;\r\n  }\r\n  \r\n}\r\n","import {Resource} from '../angular-hal/src/lib/resource';\r\nimport {TreeNode} from './tree-node.model';\r\nimport {Role} from '../role/role.model';    \r\n/**\r\n * Tree model\r\n */\r\nexport class Tree extends Resource {\r\n  /** id */\r\n  public id: number;\r\n  /** name */\r\n  public name: string;\r\n  /** description */\r\n  public description: string;\r\n  /** image */\r\n  public image: string;\r\n  /** nodes */\r\n  public nodes: TreeNode[];\r\n  /** available roles */\r\n  public availableRoles : Role[];\r\n\r\n}\r\n","import { Tree } from './tree.model';\r\nimport { Injectable, Injector } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport {RestService} from '../angular-hal/src/lib/rest.service';\r\n\r\n/** Tree manager service */\r\n@Injectable()\r\nexport class TreeService extends RestService<Tree> {\r\n  \r\n  /** API resource path */\r\n  public TREE_API = 'trees';\r\n\r\n  /** constructor */\r\n  constructor(injector: Injector,private http: HttpClient) {\r\n    super(Tree, \"trees\", injector);\r\n  }\r\n  \r\n  /** remove tree*/\r\n  remove(item: Tree) {\r\n    return this.http.delete(item._links.self.href);\r\n   \r\n  }\r\n  \r\n  /** save tree*/\r\n  save(item: Tree): Observable<any> {\r\n    let result: Observable<Object>;\r\n    if (item._links!=null) {\r\n      \r\n      result = this.http.put(item._links.self.href, item);\r\n    } else {\r\n      result = this.http.post(this.resourceService.getResourceUrl(this.TREE_API) , item);\r\n    }\r\n    return result;\r\n  }\r\n  \r\n}\r\n","import {Resource} from '../angular-hal/src/lib/resource';\r\nimport {Cartography} from '../cartography/cartography.model';\r\nimport {Tree} from './tree.model';\r\n/**\r\n * Tree node model\r\n */\r\nexport class TreeNode extends Resource {\r\n  /** name */\r\n  public name: string;\r\n  /** tooltip*/\r\n  public tooltip: string;\r\n  /** description*/\r\n  public description: string;\r\n  /** datasetURL*/\r\n  public datasetURL: string;\r\n  /** metadataURL*/\r\n  public metadataURL: string;\r\n  /** order*/\r\n  public order : number;\r\n  /** whether tree node is active*/\r\n  public active: boolean;\r\n  /** parent tree node */\r\n  public radio: boolean;\r\n  /** parent tree node */\r\n  public parent: TreeNode;\r\n  /** displayed cartography */  \r\n  public cartography: Cartography;\r\n  /** tree */  \r\n  public tree: Tree;\r\n\r\n}\r\n","import { TreeNode } from './tree-node.model';\r\nimport { Injectable, Injector } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport {RestService} from '../angular-hal/src/lib/rest.service';\r\n\r\n/** Tree node manager service */\r\n@Injectable() \r\nexport class TreeNodeService extends RestService<TreeNode> {\r\n  \r\n  /** API resource path */\r\n  public TREE_NODE_API = 'tree-nodes';\r\n\r\n  /** constructor */\r\n  constructor(injector: Injector,private http: HttpClient) {\r\n    super(TreeNode, \"tree-nodes\", injector);\r\n  }\r\n  \r\n  /** remove tree node*/\r\n  remove(item: TreeNode) {\r\n    return this.http.delete(item._links.self.href);\r\n   \r\n  }\r\n  \r\n  /** save tree node*/\r\n  save(item: TreeNode): Observable<any> {\r\n    let result: Observable<Object>;\r\n    if (item._links!=null) {\r\n      const itemTree = item.tree;\r\n      const itemCartography = item.cartography;\r\n      const itemParent = item.parent;\r\n        \r\n      delete item.tree;\r\n      delete item.cartography;\r\n      delete item.parent;\r\n        \r\n      result = this.http.put(item._links.self.href, item);\r\n      if (itemTree !=null){\r\n          item.substituteRelation('tree',itemTree).subscribe(result => {\r\n      \r\n          }, error => console.error(error));\r\n      }\r\n      if (itemCartography !=null){\r\n          item.substituteRelation('cartography',itemCartography).subscribe(result => {\r\n      \r\n          }, error => console.error(error));\r\n      }\r\n      if (itemParent !=null){\r\n          item.substituteRelation('parent',itemParent).subscribe(result => {\r\n      \r\n          }, error => console.error(error));\r\n      }\r\n      \r\n    } else {\r\n      if (item.tree && item.tree._links && item.tree._links.self) {\r\n        item.tree = item.tree._links.self.href;\r\n      }\r\n      if (item.cartography && item.cartography._links && item.cartography._links.self) {\r\n        item.cartography = item.cartography._links.self.href;\r\n      }      \r\n      result = this.http.post(this.resourceService.getResourceUrl(this.TREE_NODE_API) , item);\r\n    }\r\n    return result;\r\n  }\r\n  \r\n}\r\n","import {Resource} from '../angular-hal/src/lib/resource';\r\nimport {Tree} from '../tree/tree.model';\r\nimport {Role} from '../role/role.model';\r\nimport {CartographyGroup} from '../cartography/cartography-group.model';\r\nimport {ApplicationParameter} from './application-parameter.model';\r\nimport {ApplicationBackground} from './application-background.model';\r\n\r\n//FIXME ensure application creation in admin app upon initialization (as it is done with Roles and default Users)\r\n/** Territorial appliction name */\r\nexport const TERRITORIAL_APP_NAME:string  = \"AplicaciÃ³n Territorial\";\r\n\r\n/**\r\n * Application model\r\n */\r\nexport class Application extends Resource {\r\n  /** id */\r\n  public id: number;  \r\n  \r\n  /** name*/\r\n  public name: string;\r\n\r\n  /** type*/\r\n  public type: string;\r\n  \r\n  /** title*/\r\n  public title: string;\r\n  \r\n  /** theme*/\r\n  public theme: string;\r\n\r\n    \r\n  /** urlTemplate*/\r\n  public jspTemplate: string;\r\n  \r\n  \r\n  /** system created date*/\r\n  public createdDate: any;\r\n  \r\n  /** available roles*/\r\n  public availableRoles : Role[];\r\n  \r\n  /** trees*/\r\n  public trees : Tree[];\r\n  \r\n  /** scales (comma-separated values)*/\r\n  public scales: string[];\r\n  \r\n  /** projections(comma-separated EPSG codes)*/\r\n  public srs: string;\r\n  \r\n  /** whether application tree will auto refresh*/  \r\n  public treeAutoRefresh: Boolean;\r\n\r\n  /** backgrounds*/\r\n  public backgrounds: ApplicationBackground[];\r\n\r\n  /** situation map*/\r\n  public situationMap: CartographyGroup;    \r\n  \r\n  /** parameters*/\r\n  public parameters: ApplicationParameter[];\r\n}\r\n","import { Application } from './application.model';\r\nimport { Injectable, Injector } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport {RestService} from '../angular-hal/src/lib/rest.service';\r\nimport { CartographyGroup } from '../cartography/cartography-group.model';\r\n\r\n/** Application manager service */\r\n@Injectable()\r\nexport class ApplicationService extends RestService<Application> {\r\n  \r\n\r\n  /** API resource path */\r\n  public APPLICATION_API = 'applications';\r\n\r\n  /** constructor */\r\n  constructor(injector: Injector,private http: HttpClient) {\r\n    super(Application, \"applications\", injector);\r\n  }\r\n  \r\n  /** remove application*/\r\n  remove(item: Application) {\r\n    return this.http.delete(item._links.self.href);\r\n   \r\n  }\r\n  \r\n  /** save application*/\r\n  save(item: Application): Observable<any> {\r\n    let result: Observable<Object>;\r\n\r\n    let applicationSituationMap:any = {};\r\n    applicationSituationMap._links= {};\r\n    applicationSituationMap._links.self = {};\r\n    applicationSituationMap._links.self.href=\"\";\r\n     \r\n    if (item.situationMap!=null){\r\n        applicationSituationMap=item.situationMap;\r\n        if (typeof item.situationMap._links!= 'undefined') { \r\n            item.situationMap = item.situationMap._links.self.href;\r\n        }       \r\n     }\r\n\r\n    if (item._links!=null) {\r\n      //update relations\r\n      delete item.situationMap;        \r\n      \r\n      if (applicationSituationMap._links.self.href==''){\r\n         item.deleteRelation('situationMap',applicationSituationMap).subscribe(result => {     \r\n             \r\n             }, error => console.error(error));\r\n          \r\n      } else {\r\n          item.substituteRelation('situationMap',applicationSituationMap).subscribe(result => {\r\n         \r\n      \r\n            }, error => console.error(error));           \r\n       } \r\n       \r\n         \r\n      result = this.http.put(item._links.self.href, item);\r\n\r\n           \r\n    } else {\r\n      result = this.http.post(this.resourceService.getResourceUrl(this.APPLICATION_API) , item);\r\n    }\r\n    return result;\r\n  }\r\n    \r\n    \r\n  \r\n}\r\n","import {Resource} from '../angular-hal/src/lib/resource';\r\nimport {Background} from '../cartography/background.model';\r\nimport {Application} from './application.model'; \r\n\r\n/**\r\n * Application background model\r\n */\r\nexport class ApplicationBackground extends Resource {\r\n  /** order*/\r\n  public order: Number;\r\n  \r\n  /** background*/\r\n  public background: Background;\r\n  \r\n  /** application*/\r\n  public application: Application;\r\n\r\n}\r\n","import { ApplicationBackground } from './application-background.model';\r\nimport { Injectable, Injector } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport {RestService} from '../angular-hal/src/lib/rest.service';\r\n\r\n/** Application background manager service */\r\n@Injectable() \r\nexport class ApplicationBackgroundService extends RestService<ApplicationBackground> {\r\n  \r\n\r\n  /** API resource path */\r\n  public APPLICATION_BACKGROUND_API ='application-backgrounds';\r\n\r\n  /** constructor */\r\n  constructor(injector: Injector,private http: HttpClient) {\r\n    super(ApplicationBackground, \"application-backgrounds\", injector);\r\n  }\r\n  \r\n  /** remove application background*/\r\n  remove(item: ApplicationBackground) {\r\n    return this.http.delete(item._links.self.href);\r\n   \r\n  }\r\n  \r\n  /** save application background*/\r\n  save(item: ApplicationBackground): Observable<any> {\r\n    let result: Observable<Object>;\r\n    if (item._links!=null) {\r\n      result = this.http.put(item._links.self.href, item);\r\n      if (item.application !=null){\r\n          item.substituteRelation('application',item.application).subscribe(result => {\r\n      \r\n      }, error => console.error(error));\r\n      }\r\n      if (item.background !=null){\r\n          item.substituteRelation('background',item.background).subscribe(result => {\r\n      \r\n      }, error => console.error(error));\r\n      }\r\n      \r\n    } else {\r\n      item.application = item.application._links.self.href;\r\n      item.background = item.background._links.self.href;\r\n  \r\n      result = this.http.post(this.resourceService.getResourceUrl(this.APPLICATION_BACKGROUND_API) , item);\r\n    }\r\n    return result;\r\n  }\r\n  \r\n}\r\n","import {Resource} from '../angular-hal/src/lib/resource';\r\nimport {Application} from './application.model'; \r\n\r\n/**\r\n * Application parameter model \r\n */\r\nexport class ApplicationParameter extends Resource {\r\n  /** name*/\r\n  public name: string;\r\n  \r\n  /** type*/\r\n  public type: string;\r\n  \r\n  /** value*/    \r\n  public value: string;\r\n  \r\n  /** application*/\r\n  public application: Application;\r\n\r\n}\r\n","import { ApplicationParameter } from './application-parameter.model';\r\nimport { Injectable, Injector } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport {RestService} from '../angular-hal/src/lib/rest.service';\r\n\r\n/** Application parameter manager service */\r\n@Injectable() \r\nexport class ApplicationParameterService extends RestService<ApplicationParameter> {\r\n  \r\n\r\n  /** API resource path */\r\n  public APPLICATION_PARAMETER_API = 'application-parameters';\r\n\r\n  /** constructor */\r\n  constructor(injector: Injector,private http: HttpClient) {\r\n    super(ApplicationParameter, \"application-parameters\", injector);\r\n  }\r\n  \r\n  /** remove application*/\r\n  remove(item: ApplicationParameter) {\r\n    return this.http.delete(item._links.self.href);\r\n   \r\n  }\r\n  \r\n  /** save application*/\r\n  save(item: ApplicationParameter): Observable<any> {\r\n    let result: Observable<Object>;\r\n    if (item._links!=null) {\r\n      result = this.http.put(item._links.self.href, item);\r\n      if (item.application !=null){\r\n          item.substituteRelation('application',item.application).subscribe(result => {\r\n      \r\n      }, error => console.error(error));\r\n      }\r\n      \r\n    } else {\r\n      item.application = item.application._links.self.href;\r\n  \r\n      result = this.http.post(this.resourceService.getResourceUrl(this.APPLICATION_PARAMETER_API) , item);\r\n    }\r\n    return result;\r\n  }\r\n  \r\n}\r\n","import {Resource} from '../angular-hal/src/lib/resource';\r\n/**\r\n * Connection model\r\n */\r\nexport class CodeList extends Resource {\r\n  /** id */\r\n  public id: number;\r\n  /** name*/\r\n  public codeListName: string;\r\n  /** type*/\r\n  public value: string;\r\n  /** user*/\r\n  public description: string;\r\n\r\n\r\n}\r\n","import { CodeList } from './codelist.model';\r\nimport { Injectable, Injector } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport {RestService} from '../angular-hal/src/lib/rest.service';\r\n\r\n/** Connection manager service */\r\n@Injectable()\r\nexport class CodeListService extends RestService<CodeList> {\r\n  \r\n \r\n  /** API resource path */\r\n  public CODELIST_API = 'codelist-values';\r\n\r\n  /** constructor */\r\n  constructor(injector: Injector,private http: HttpClient) {\r\n    super(CodeList, \"codelist-values\", injector);\r\n  }\r\n  \r\n  /** remove connection*/\r\n  remove(item: CodeList) {\r\n    return this.http.delete(item._links.self.href);\r\n   \r\n  }\r\n  \r\n  /** save connection*/\r\n  save(item: CodeList): Observable<any> {\r\n    let result: Observable<Object>;\r\n    if (item._links!=null) {\r\n      \r\n      result = this.http.put(item._links.self.href, item);\r\n    } else {\r\n      result = this.http.post(this.resourceService.getResourceUrl(this.CODELIST_API ), item);\r\n    }\r\n    return result;\r\n  }\r\n  \r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { BehaviorSubject, Observable, of } from 'rxjs';\r\n\r\n/** Layer model: configure Layer data and displaying configuration */ \r\nexport class Layer {\r\n  // Display data\r\n  /** layer visibility*/  \r\n  visibility: boolean = false;\r\n  /** Transparency (Transparent) 0-1 (Opaque)*/\r\n  opacity: number = 1.0;\r\n\r\n  // Configuration data\r\n  /** title*/\r\n  title: string;\r\n  \r\n  /** Id to index*/\r\n  id: any;\r\n  \r\n  /** Service Name*/\r\n  serverName: string;\r\n\r\n  /** Service attributions*/\r\n  attributions: string = \"\";\r\n\r\n  /** Request format (image/jpg, ...)*/\r\n  format: string;\r\n  \r\n  /** Request service version*/\r\n  version:string;\r\n\r\n  /** Service url*/\r\n  url: string;\r\n\r\n  /** Is base layer?*/\r\n  isBaseLayer: boolean;\r\n\r\n  /** Request layer name*/\r\n  name: string;\r\n\r\n  /** Is tiled?*/\r\n  tiled: boolean;\r\n  \r\n  /** Description*/\r\n  desc: string = \"\";\r\n  \r\n  /**  Transparent request parameter?*/\r\n  url_transparent: string = \"true\";\r\n  \r\n  /** Request Background parameter color (Hexa)*/\r\n  url_bgcolor: string = \"0x000000\";\r\n  \r\n  /** Request Exception URL*/\r\n  url_exception: string;\r\n  \r\n  /** Extent for tiled services*/\r\n  extent: any = null;\r\n\r\n  /** Tile height (if not defined, the default map is taken)*/\r\n  tileHeight?:number;\r\n  \r\n  /** Tile width (if not defined, the default map is taken)*/\r\n  tileWidth?:number;\r\n  \r\n  /** Enabled for GetFeatureInfo requests (enabled to use the viewer features information tool)*/\r\n  queryable?:boolean = false;\r\n  \r\n  /** Minimum scale*/\r\n  minimumScale?:number;\r\n  \r\n  /** Maximum scale*/\r\n  maximumScale?:number;\r\n  \r\n  /** List of available CRS*/\r\n  projections?:string;\r\n  \r\n  /** Features information URL*/\r\n  infoUrl?:string;\r\n  \r\n  /** Metadata information URL*/\r\n  metadataUrl?:string;\r\n  \r\n  /** Legend URL*/\r\n  legendUrl?:string;\r\n  \r\n  /** Array of OptionalParameter object that defines other optional parameter-value pairs for the request (TIME ...)*/\r\n  optionalParameters?:Array<OptionalParameter>;\r\n}\r\n\r\n/** Optional parameter model: configure parameter-value pair to add to the request layer URL */\r\nexport class OptionalParameter {\r\n  /** key*/key:string;\r\n  /** value*/value:string;\r\n}\r\n\r\n/** Layer configuration model: modify the configuration of a layer when interacting with the map (make visible, move the layer ...) */\r\nexport class LayerConfiguration {\r\n  /** Identifier to index*/id: any;\r\n  /** Layer visibility*/visibility: boolean;\r\n  /** Layer transparency (Transparent) 0-1 (Opaque)*/opacity: number;\r\n  /** Layer position*/position: number;\r\n}\r\n\r\n/** Layer group model*/\r\nexport class LayerGroup {\r\n  /** initially activated (all visible layers)*/active?:boolean;\r\n  /** group name*/name?: String;\r\n  /** group id*/id: String;\r\n  /** array of child Layers*/layers: Array<Layer>;\r\n}\r\n\r\n/** Map options configuration model*/\r\nexport class MapOptionsConfiguration {\r\n  /** scales*/scales?: string;\r\n  /** projections*/projections?: string;\r\n  /** minimum scale*/minScale?:number;\r\n  /** maximum scale*/maxScale?:number;\r\n  /** extent*/extent?:any;\r\n  /** maximum extent*/maxExtent?:any;\r\n  /** tile width*/tileWidth?:number;\r\n  /** tile height*/tileHeight?:number;\r\n  /** parameters*/parameters?: Array<OptionalParameter>\r\n}\r\n\r\n/** Map component status model*/\r\nexport class MapComponentStatus {\r\n    /** loaded?*/loaded: boolean = false;\r\n}\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\n\r\n/** Map configuration manager service*/\r\nexport class MapConfigurationManagerService {\r\n  private layersSubject = new BehaviorSubject([]);\r\n  private layers: Array<Layer> = null;\r\n\r\n  private baseLayerGroupsSubject = new BehaviorSubject([]);\r\n  private baseLayerGroups: Array<LayerGroup> = null;\r\n\r\n  private layerConfigurationSubject = new BehaviorSubject([]);\r\n\r\n  private addLayersSubject = new BehaviorSubject([]);\r\n  private removeLayersSubject = new BehaviorSubject([]);\r\n\r\n  private situationMapConfigurationSubject = new BehaviorSubject([]);\r\n  private mapOptionsConfigurationSubject = new BehaviorSubject([]);\r\n\r\n  private mapComponentStatusSubject = new BehaviorSubject([]);\r\n\r\n  /** constructor*/\r\n  constructor() { \r\n   //\r\n  }\r\n  \r\n  /** layer count */\r\n  count = 0;\r\n\r\n  /** configure the overlay layers of the map, by passing as a parameter an array of objects of type Layer objects defining the layers to load.*/\r\n  loadLayersConfiguration(configuration) {\r\n    if (this.layers != null) {\r\n      this.clearLayers(false);\r\n    }\r\n    this.setLayers(configuration);\r\n  }\r\n  \r\n  /**configure the base layers of the map by passing as a parameter an array of objects of type LayerGroup each of them with the corresponding Layer objects defining the layers to load.*/\r\n  loadBaseLayersConfiguration(configuration) {\r\n    this.setBaseLayerGroups(configuration);\r\n  }\r\n\r\n  /** get base layer groups*/\r\n  getBaseLayerGroups(): Observable<LayerGroup[]> {\r\n    return this.baseLayerGroupsSubject.asObservable();\r\n  }\r\n\r\n  /** set base layer groups*/\r\n  setBaseLayerGroups(groups:Array<LayerGroup>) {\r\n    this.baseLayerGroups = groups;\r\n    this.refreshBaseLayerGroups();\r\n  }\r\n\r\n  private refreshBaseLayerGroups() {\r\n    // Send the new values so that all subscribers are updated\r\n    this.baseLayerGroupsSubject.next(this.baseLayerGroups);\r\n  }\r\n\r\n  /** get layers*/\r\n  getLayers(): Observable<Layer[]> {\r\n    return this.layersSubject.asObservable();\r\n  }\r\n\r\n  /** remove all layers from map*/\r\n  clearLayers(refresh:boolean) {\r\n    while(this.layers.length) {\r\n      this.layers.pop();\r\n    }\r\n    if (refresh) {\r\n      this.refreshLayers();\r\n    }\r\n  }\r\n\r\n  /** set layers*/\r\n  setLayers(layers:Array<Layer>) {\r\n    this.layers = layers;\r\n    this.refreshLayers();\r\n  }\r\n\r\n  /** add given layer to map*/\r\n  addLayer(layer:Layer) {\r\n    this.layers.push(layer);\r\n    this.refreshAddLayers(layer);\r\n  }\r\n\r\n  /** add given layer to map at given index*/\r\n  addLayerAt(layer:Layer, index:number) {\r\n    if (index == 0) {\r\n      this.layers = [layer].concat(this.layers);\r\n    } else if (index >= this.layers.length) {\r\n      this.layers.push(layer);\r\n    } else {\r\n      this.layers = this.layers.slice(0, index)\r\n                    .concat([layer])\r\n                    .concat(this.layers.slice(index, this.layers.length));\r\n    }\r\n    this.refreshAddLayers(layer);\r\n    this.refreshLayerConfiguration(layer.id, null, null, index);\r\n  }\r\n\r\n  /** remove given layer from map*/\r\n  removeLayer(layer:Layer) {\r\n    var index = this.layers.indexOf(layer);\r\n    this.removeLayerIndex(index);\r\n  }\r\n\r\n  /** remove layer with given id from map */\r\n  removeLayerId(id) {\r\n    var index = -1;\r\n    for (var i = 0, iLen = this.layers.length; i < iLen; i++) {\r\n      if (this.layers[i].id == id) {\r\n        index = i;\r\n        break;\r\n      }\r\n    }\r\n    this.removeLayerIndex(index);\r\n  }\r\n\r\n  /** remove layer at given index from map */\r\n  removeLayerIndex(index:number) {\r\n    var layer = this.layers[index];\r\n    this.layers.splice(index, 1);\r\n    this.refreshRemoveLayers(layer);\r\n  }\r\n\r\n  /** refresh layers */\r\n  private refreshLayers() {\r\n    // Send the new values so that all subscribers are updated\r\n    this.layersSubject.next(this.layers);\r\n  }\r\n\r\n  /** Observable for layers added */\r\n  getLayersAdded(): Observable<Layer[]> {\r\n    return this.addLayersSubject.asObservable();\r\n  }\r\n\r\n  private refreshAddLayers(layer:Layer) {\r\n    // Send the new values so that all subscribers are updated\r\n    this.addLayersSubject.next([layer]);\r\n  }\r\n\r\n  getLayersRemoved(): Observable<Layer[]> {\r\n    return this.removeLayersSubject.asObservable();\r\n  }\r\n\r\n  private refreshRemoveLayers(layer:Layer) {\r\n    // Send the new values so that all subscribers are updated\r\n    this.removeLayersSubject.next([layer]);\r\n  }\r\n\r\n  getLayerConfigurationListener(): Observable<LayerConfiguration[]> {\r\n    return this.layerConfigurationSubject.asObservable();\r\n  }\r\n\r\n  private getLayerIndexById(id:string):number{\r\n    var index = -1;\r\n    for (var i = 0, iLen = this.layers.length; i < iLen; i++) {\r\n      if (this.layers[i].id == id) {\r\n        index = i;\r\n        break;\r\n      }\r\n    }\r\n    return index;\r\n  }\r\n  \r\n  /** move layer with given id to the given index*/\r\n  moveLayer(id, index) {\r\n    var layerIndex = this.getLayerIndexById(id);\r\n    if (layerIndex != -1) {\r\n      var layer = this.layers.splice(layerIndex, 1);\r\n      this.layers = \r\n        this.layers.slice(0, index)\r\n        .concat(layer)\r\n        .concat(this.layers.slice(index, this.layers.length));\r\n    }\r\n    this.refreshLayerConfiguration(id, null, null, index);\r\n  }\r\n\r\n  /** change visibility of layer with given id to the given value*/\r\n  changeLayerVisibility(id, visibility) {\r\n    this.refreshLayerConfiguration(id, null, visibility, null);\r\n  }\r\n\r\n  /** change opacity of layer with given id to the given value*/\r\n  changeLayerOpacity(id, opacity) {\r\n    this.refreshLayerConfiguration(id, opacity, null, null);\r\n  }\r\n\r\n  private refreshLayerConfiguration(id, opacity, visibility, position) {\r\n    // Send the new values so that all subscribers are updated\r\n    var layer = new LayerConfiguration();\r\n    layer.id = id;\r\n    layer.opacity = opacity;\r\n    layer.visibility = visibility;\r\n    layer.position = position;\r\n    this.layerConfigurationSubject.next([layer]);\r\n  }\r\n\r\n  getSituationMapConfigurationListener(): Observable<Layer[]> {\r\n    return this.situationMapConfigurationSubject.asObservable();\r\n  }\r\n\r\n  /** configure the situation map of the map component by passing as a parameter an array of objects of type LayerGroup, each of them with the corresponding Layer objects defining the layers to load as situation map.*/\r\n  loadSituationMapConfiguration(layers:Array<Layer>) {\r\n    // Send the new values so that all subscribers are updated\r\n    this.situationMapConfigurationSubject.next(layers);\r\n  }\r\n\r\n  getMapOptionsConfigurationListener(): Observable<MapOptionsConfiguration[]> {\r\n    return this.mapOptionsConfigurationSubject.asObservable();\r\n  }\r\n\r\n  /** load map options configuration */\r\n  loadMapOptionsConfiguration(configuration:MapOptionsConfiguration) {\r\n    // Send the new values so that all subscribers are updated\r\n    this.mapOptionsConfigurationSubject.next([configuration]);\r\n  }\r\n\r\n  getMapComponentStatusListener(): Observable<MapComponentStatus[]> {\r\n    return this.mapComponentStatusSubject.asObservable();\r\n  }\r\n  \r\n  /** set map component status */\r\n  setMapComponentStatus(status:MapComponentStatus) {\r\n    //Notify the map component status\r\n    this.mapComponentStatusSubject.next([status]);\r\n  }\r\n\r\n}\r\n","import { Directive, Input, TemplateRef, ViewContainerRef } from '@angular/core';\r\nimport { Principal } from './principal.service';\r\n\r\n/**\r\n * @whatItDoes Conditionally includes an HTML element if current user has any\r\n * of the authorities passed as the `expression`.\r\n *\r\n * @howToUse\r\n * ```\r\n *     <some-element *sitmunHasAnyAuthority=\"'ROLE_ADMIN'\">...</some-element>\r\n *\r\n *     <some-element *sitmunHasAnyAuthority=\"['ROLE_ADMIN', 'ROLE_USER']\">...</some-element>\r\n * ```\r\n */\r\n@Directive({\r\n    selector: '[sitmunHasAnyAuthority]'\r\n})\r\nexport class HasAnyAuthorityDirective {\r\n    \r\n    /** authorities to check */\r\n    public authorities: string[]; \r\n    \r\n    /** constructor */\r\n    constructor(private principal: Principal, private templateRef: TemplateRef<any>, private viewContainerRef: ViewContainerRef) {\r\n    }\r\n    \r\n    /** territory to check authorities*/\r\n    @Input() territory: string;\r\n    \r\n    /** Set whether current user has any of the given authorities */\r\n    @Input()\r\n    set sitmunHasAnyAuthority(value: string|string[]) {\r\n        this.authorities = typeof value === 'string' ? [ <string> value ] : <string[]> value;\r\n        this.updateView();\r\n        // Get notified each time authentication state changes.\r\n        this.principal.getAuthenticationState().subscribe((identity) => this.updateView());\r\n    }\r\n    \r\n    /** update view */\r\n    private updateView(): void {\r\n        if (this.territory){\r\n        this.principal.hasAnyAuthorityOnTerritory(this.authorities,this.territory).then((result) => {\r\n            this.viewContainerRef.clear();\r\n            if (result) {\r\n                this.viewContainerRef.createEmbeddedView(this.templateRef);\r\n            }\r\n        });\r\n\r\n        } else {\r\n        this.principal.hasAnyAuthority(this.authorities).then((result) => {\r\n            this.viewContainerRef.clear();\r\n            if (result) {\r\n                this.viewContainerRef.createEmbeddedView(this.templateRef);\r\n            }\r\n        });\r\n        }\r\n    }\r\n}\r\n","import { Directive, Input, TemplateRef, ViewContainerRef } from '@angular/core';\r\nimport { Principal } from './principal.service';\r\n\r\n/**\r\n * @whatItDoes Conditionally includes an HTML element if current user has any\r\n * of the authorities passed as the `expression`.\r\n *\r\n * @howToUse\r\n * ```\r\n *     <some-element *sitmunHasAnyAuthority=\"'ROLE_ADMIN'\">...</some-element>\r\n *\r\n *     <some-element *sitmunHasAnyAuthority=\"['ROLE_ADMIN', 'ROLE_USER']\">...</some-element>\r\n * ```\r\n */\r\n@Directive({\r\n    selector: '[sitmunHasAnyAuthorityOnTerritory]'\r\n})\r\nexport class HasAnyAuthorityOnTerritoryDirective {\r\n\r\n    /** authorities to check */\r\n    public authorities: string[]; \r\n\r\n    /** territory to check authorities*/\r\n    public territory: string; \r\n\r\n    /** constructor */\r\n    constructor(private principal: Principal, private templateRef: TemplateRef<any>, private viewContainerRef: ViewContainerRef) {\r\n    }\r\n    \r\n    /** Set whether current user has any of the given authorities on territory */\r\n    @Input()\r\n    set sitmunHasAnyAuthorityOnTerritory(opts: any) {\r\n\r\n        this.authorities = typeof opts.authorities === 'string' ? [ <string> opts.authorities ] : <string[]> opts.authorities;\r\n        this.territory = opts.territory;\r\n        this.updateView();\r\n        // Get notified each time authentication state changes.\r\n        this.principal.getAuthenticationState().subscribe((identity) => this.updateView());\r\n    }\r\n    \r\n    /** update view */\r\n    private updateView(): void {\r\n        if (this.territory){\r\n        this.principal.hasAnyAuthorityOnTerritory(this.authorities,this.territory).then((result) => {\r\n            this.viewContainerRef.clear();\r\n            if (result) {\r\n                this.viewContainerRef.createEmbeddedView(this.templateRef);\r\n            }\r\n        });\r\n\r\n        } else {\r\n        this.principal.hasAnyAuthority(this.authorities).then((result) => {\r\n            this.viewContainerRef.clear();\r\n            if (result) {\r\n                this.viewContainerRef.createEmbeddedView(this.templateRef);\r\n            }\r\n        });\r\n        }\r\n    }\r\n}\r\n","import { NgModule, ModuleWithProviders } from '@angular/core';\r\n\r\nimport { CommonModule } from '@angular/common';\r\nimport {HttpClientModule, HTTP_INTERCEPTORS, HttpClient} from '@angular/common/http';\r\nimport { RouterModule } from '@angular/router';\r\n//import { AngularHalModule } from '../../lib/angular-hal';\r\nimport {CodeListService} from './codelist/codelist.service';\r\nimport {TerritoryService} from './territory/territory.service';\r\nimport {TerritoryTypeService} from './territory/territory-type.service';\r\nimport {TerritoryGroupTypeService} from './territory/territory-group-type.service';\r\nimport {UserPositionService} from './user/user-position.service';\r\nimport {UserConfigurationService} from './user/user-configuration.service';\r\nimport {RoleService} from './role/role.service';\r\nimport {UserService} from './user/user.service';\r\nimport {ConnectionService} from './connection/connection.service';\r\nimport {TaskService} from './task/task.service';\r\nimport {TaskTypeService} from './task/task-type.service';\r\nimport {TaskGroupService} from './task/task-group.service';\r\nimport {TaskParameterService} from './task/task-parameter.service';\r\nimport {TaskAvailabilityService} from './task/task-availability.service';\r\nimport {TaskUIService} from './task/task-ui.service';\r\nimport {ServiceService} from './service/service.service';\r\nimport {ServiceParameterService} from './service/service-parameter.service';\r\nimport {CartographyService} from './cartography/cartography.service';\r\nimport {CartographyAvailabilityService} from './cartography/cartography-availability.service';\r\nimport {CartographyFilterService} from './cartography/cartography-filter.service';\r\nimport {CartographyGroupService} from './cartography/cartography-group.service';\r\nimport {CartographyParameterService} from './cartography/cartography-parameter.service';\r\nimport {BackgroundService} from './cartography/background.service';\r\nimport {TreeService} from './tree/tree.service';\r\nimport {TreeNodeService} from './tree/tree-node.service';\r\nimport {ApplicationService} from './application/application.service';\r\nimport {ApplicationParameterService} from './application/application-parameter.service';\r\nimport {ApplicationBackgroundService} from './application/application-background.service';\r\nimport { MapConfigurationManagerService } from './map/map-configuration-manager.service';\r\nimport { AuthService } from './auth/auth.service';\r\nimport { Principal } from './auth/principal.service';\r\nimport { AuthInterceptor } from './auth/auth.interceptor';\r\nimport { AuthExpiredInterceptor } from './auth/auth-expired.interceptor';\r\nimport { HasAnyAuthorityDirective } from './auth/has-any-authority.directive';\r\nimport { HasAnyAuthorityOnTerritoryDirective } from './auth/has-any-authority-on-territory.directive';\r\nimport { LoginService } from './auth/login.service';\r\nimport { AccountService } from './account/account.service';\r\nimport {TranslateHttpLoader} from '@ngx-translate/http-loader';\r\nimport {TranslateLoader, TranslateModule} from '@ngx-translate/core';\r\nimport { TranslationService } from './translation/translation.service';\r\nimport { LanguageService } from './translation/language.service';\r\nimport { DashboardService } from './dashboard/dashboard.service';\r\n/** load i18n assets*/\r\nexport function createTranslateLoader(http: HttpClient) {\r\n  return new TranslateHttpLoader(http, './assets/i18n/', '.json');\r\n}\r\n\r\n\r\n/** SITMUN frontend core module */\r\n@NgModule({\r\n  imports: [\r\n    /*RouterModule,\r\n    HttpClientModule,\r\n    CommonModule,\r\n    AngularHalModule,*/\r\n    TranslateModule.forRoot({\r\n      loader: {\r\n        provide: TranslateLoader,\r\n        useFactory: (createTranslateLoader),\r\n        deps: [HttpClient]\r\n      }\r\n    }),\r\n  ],\r\n  declarations: [\r\n    HasAnyAuthorityDirective,\r\n    HasAnyAuthorityOnTerritoryDirective,\r\n  ],\r\n  exports: [\r\n    HasAnyAuthorityDirective,\r\n    HasAnyAuthorityOnTerritoryDirective,\r\n    TranslateModule\r\n  ]\r\n})\r\nexport class SitmunFrontendCoreModule {\r\n  static forRoot(): ModuleWithProviders {\r\n    return {\r\n      ngModule: SitmunFrontendCoreModule,\r\n      providers: [\r\n        CodeListService,\r\n        TerritoryService,\r\n        TerritoryTypeService,\r\n        TerritoryGroupTypeService,\r\n        RoleService,\r\n        AccountService,\r\n        AuthService,\r\n        UserService,\r\n        ConnectionService,\r\n        TaskService,\r\n        TaskTypeService,\r\n        TaskUIService,\r\n        TaskGroupService,\r\n        TaskParameterService,\r\n        TaskAvailabilityService,\r\n        ServiceService,\r\n        ServiceParameterService,\r\n        CartographyService,\r\n        CartographyGroupService,\r\n        CartographyAvailabilityService,\r\n        CartographyParameterService,\r\n        CartographyFilterService,\r\n        BackgroundService,\r\n        TreeService,\r\n        TreeNodeService,\r\n        ApplicationService,\r\n        ApplicationParameterService,\r\n        ApplicationBackgroundService,\r\n        AuthInterceptor,\r\n        AuthExpiredInterceptor,\r\n        Principal,\r\n        UserPositionService,\r\n        UserConfigurationService,\r\n        LoginService,\r\n        TranslationService,\r\n        LanguageService,\r\n        DashboardService,\r\n        MapConfigurationManagerService,\r\n        {\r\n          provide: HTTP_INTERCEPTORS,\r\n          useClass: AuthInterceptor,\r\n          multi: true\r\n        }\r\n        , {\r\n          provide: HTTP_INTERCEPTORS,\r\n          useClass: AuthExpiredInterceptor,\r\n          multi: true\r\n        }\r\n      ]\r\n    };\r\n  }\r\n}\r\n\r\n","import {ModuleWithProviders, NgModule} from '@angular/core';\r\nimport {HttpClient, HttpClientModule} from '@angular/common/http';\r\nimport {HalParam, RestService} from './rest.service';\r\nimport {ExternalService} from './external.service';\r\nimport {ResourceService} from './resource.service';\r\nimport {ExternalConfigurationHandlerInterface} from './external-configuration.handler';\r\n\r\nimport 'rxjs';\r\n\r\nimport {SubTypeBuilder} from './subtype-builder';\r\n\r\nexport {ExternalService} from './external.service';\r\nexport {RestService} from './rest.service';\r\nexport {Resource} from './resource';\r\nexport {ResourceArray} from './resource-array';\r\nexport {Sort} from './sort';\r\nexport {ResourceHelper} from './resource-helper';\r\nexport {ExternalConfiguration} from './ExternalConfiguration';\r\nexport {ExternalConfigurationHandlerInterface} from './external-configuration.handler';\r\nexport {HalOptions, HalParam} from './rest.service';\r\nexport {SubTypeBuilder} from './subtype-builder';\r\n\r\n\r\n/** Angular HAL module */\r\n@NgModule({\r\n    imports: [HttpClientModule],\r\n    declarations: [],\r\n    exports: [HttpClientModule],\r\n    providers: [\r\n        ExternalService,\r\n        HttpClient,\r\n        {\r\n            provide: ResourceService,\r\n            useClass: ResourceService,\r\n            deps: [ExternalService]\r\n        }]\r\n})\r\nexport class AngularHalModule {\r\n    static forRoot(): ModuleWithProviders {\r\n        return {\r\n            ngModule: AngularHalModule,\r\n            providers: [\r\n                ExternalService,\r\n                HttpClient,\r\n                {\r\n                    provide: ResourceService,\r\n                    useClass: ResourceService,\r\n                    deps: [ExternalService]\r\n                }\r\n            ]\r\n        };\r\n    }\r\n}"],"names":["observableThrowError","url.parse","tslib_1.__values","observableOf","tslib_1.__extends"],"mappings":"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"}
