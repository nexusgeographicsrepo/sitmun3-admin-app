{"version":3,"file":"map-configuration-manager.service.d.ts","sources":["map-configuration-manager.service.d.ts"],"names":[],"mappingssourcesContent":["import { Observable } from 'rxjs';\r\n/** Layer model: configure Layer data and displaying configuration */\r\nexport declare class Layer {\r\n    /** layer visibility*/\r\n    visibility: boolean;\r\n    /** Transparency (Transparent) 0-1 (Opaque)*/\r\n    opacity: number;\r\n    /** title*/\r\n    title: string;\r\n    /** Id to index*/\r\n    id: any;\r\n    /** Service Name*/\r\n    serverName: string;\r\n    /** Service attributions*/\r\n    attributions: string;\r\n    /** Request format (image/jpg, ...)*/\r\n    format: string;\r\n    /** Request service version*/\r\n    version: string;\r\n    /** Service url*/\r\n    url: string;\r\n    /** Is base layer?*/\r\n    isBaseLayer: boolean;\r\n    /** Request layer name*/\r\n    name: string;\r\n    /** Is tiled?*/\r\n    tiled: boolean;\r\n    /** Description*/\r\n    desc: string;\r\n    /**  Transparent request parameter?*/\r\n    url_transparent: string;\r\n    /** Request Background parameter color (Hexa)*/\r\n    url_bgcolor: string;\r\n    /** Request Exception URL*/\r\n    url_exception: string;\r\n    /** Extent for tiled services*/\r\n    extent: any;\r\n    /** Tile height (if not defined, the default map is taken)*/\r\n    tileHeight?: number;\r\n    /** Tile width (if not defined, the default map is taken)*/\r\n    tileWidth?: number;\r\n    /** Enabled for GetFeatureInfo requests (enabled to use the viewer features information tool)*/\r\n    queryable?: boolean;\r\n    /** Minimum scale*/\r\n    minimumScale?: number;\r\n    /** Maximum scale*/\r\n    maximumScale?: number;\r\n    /** List of available CRS*/\r\n    projections?: string;\r\n    /** Features information URL*/\r\n    infoUrl?: string;\r\n    /** Metadata information URL*/\r\n    metadataUrl?: string;\r\n    /** Legend URL*/\r\n    legendUrl?: string;\r\n    /** Array of OptionalParameter object that defines other optional parameter-value pairs for the request (TIME ...)*/\r\n    optionalParameters?: Array<OptionalParameter>;\r\n}\r\n/** Optional parameter model: configure parameter-value pair to add to the request layer URL */\r\nexport declare class OptionalParameter {\r\n    /** key*/ key: string;\r\n    /** value*/ value: string;\r\n}\r\n/** Layer configuration model: modify the configuration of a layer when interacting with the map (make visible, move the layer ...) */\r\nexport declare class LayerConfiguration {\r\n    /** Identifier to index*/ id: any;\r\n    /** Layer visibility*/ visibility: boolean;\r\n    /** Layer transparency (Transparent) 0-1 (Opaque)*/ opacity: number;\r\n    /** Layer position*/ position: number;\r\n}\r\n/** Layer group model*/\r\nexport declare class LayerGroup {\r\n    /** initially activated (all visible layers)*/ active?: boolean;\r\n    /** group name*/ name?: String;\r\n    /** group id*/ id: String;\r\n    /** array of child Layers*/ layers: Array<Layer>;\r\n}\r\n/** Map options configuration model*/\r\nexport declare class MapOptionsConfiguration {\r\n    /** scales*/ scales?: string;\r\n    /** projections*/ projections?: string;\r\n    /** minimum scale*/ minScale?: number;\r\n    /** maximum scale*/ maxScale?: number;\r\n    /** extent*/ extent?: any;\r\n    /** maximum extent*/ maxExtent?: any;\r\n    /** tile width*/ tileWidth?: number;\r\n    /** tile height*/ tileHeight?: number;\r\n    /** parameters*/ parameters?: Array<OptionalParameter>;\r\n}\r\n/** Map component status model*/\r\nexport declare class MapComponentStatus {\r\n    /** loaded?*/ loaded: boolean;\r\n}\r\nexport declare class MapConfigurationManagerService {\r\n    private layersSubject;\r\n    private layers;\r\n    private baseLayerGroupsSubject;\r\n    private baseLayerGroups;\r\n    private layerConfigurationSubject;\r\n    private addLayersSubject;\r\n    private removeLayersSubject;\r\n    private situationMapConfigurationSubject;\r\n    private mapOptionsConfigurationSubject;\r\n    private mapComponentStatusSubject;\r\n    /** constructor*/\r\n    constructor();\r\n    /** layer count */\r\n    count: number;\r\n    /** configure the overlay layers of the map, by passing as a parameter an array of objects of type Layer objects defining the layers to load.*/\r\n    loadLayersConfiguration(configuration: any): void;\r\n    /**configure the base layers of the map by passing as a parameter an array of objects of type LayerGroup each of them with the corresponding Layer objects defining the layers to load.*/\r\n    loadBaseLayersConfiguration(configuration: any): void;\r\n    /** get base layer groups*/\r\n    getBaseLayerGroups(): Observable<LayerGroup[]>;\r\n    /** set base layer groups*/\r\n    setBaseLayerGroups(groups: Array<LayerGroup>): void;\r\n    private refreshBaseLayerGroups();\r\n    /** get layers*/\r\n    getLayers(): Observable<Layer[]>;\r\n    /** remove all layers from map*/\r\n    clearLayers(refresh: boolean): void;\r\n    /** set layers*/\r\n    setLayers(layers: Array<Layer>): void;\r\n    /** add given layer to map*/\r\n    addLayer(layer: Layer): void;\r\n    /** add given layer to map at given index*/\r\n    addLayerAt(layer: Layer, index: number): void;\r\n    /** remove given layer from map*/\r\n    removeLayer(layer: Layer): void;\r\n    /** remove layer with given id from map */\r\n    removeLayerId(id: any): void;\r\n    /** remove layer at given index from map */\r\n    removeLayerIndex(index: number): void;\r\n    /** refresh layers */\r\n    private refreshLayers();\r\n    /** Observable for layers added */\r\n    getLayersAdded(): Observable<Layer[]>;\r\n    private refreshAddLayers(layer);\r\n    getLayersRemoved(): Observable<Layer[]>;\r\n    private refreshRemoveLayers(layer);\r\n    getLayerConfigurationListener(): Observable<LayerConfiguration[]>;\r\n    private getLayerIndexById(id);\r\n    /** move layer with given id to the given index*/\r\n    moveLayer(id: any, index: any): void;\r\n    /** change visibility of layer with given id to the given value*/\r\n    changeLayerVisibility(id: any, visibility: any): void;\r\n    /** change opacity of layer with given id to the given value*/\r\n    changeLayerOpacity(id: any, opacity: any): void;\r\n    private refreshLayerConfiguration(id, opacity, visibility, position);\r\n    getSituationMapConfigurationListener(): Observable<Layer[]>;\r\n    /** configure the situation map of the map component by passing as a parameter an array of objects of type LayerGroup, each of them with the corresponding Layer objects defining the layers to load as situation map.*/\r\n    loadSituationMapConfiguration(layers: Array<Layer>): void;\r\n    getMapOptionsConfigurationListener(): Observable<MapOptionsConfiguration[]>;\r\n    /** load map options configuration */\r\n    loadMapOptionsConfiguration(configuration: MapOptionsConfiguration): void;\r\n    getMapComponentStatusListener(): Observable<MapComponentStatus[]>;\r\n    /** set map component status */\r\n    setMapComponentStatus(status: MapComponentStatus): void;\r\n}\r\n"]}