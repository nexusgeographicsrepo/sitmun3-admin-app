{"version":3,"sources":["ng://@sitmun/frontend-gui/data-grid/data-grid.component.ts","ng://@sitmun/frontend-gui/sitmun-frontend-gui.module.ts"],"sourcesContent":["import { AgGridModule } from '@ag-grid-community/angular';\nimport { Component, OnInit, NgModule, Input, Output, EventEmitter } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { AllCommunityModules, Module } from '@ag-grid-community/all-modules';\n\n@Component({\n  selector: 'app-data-grid',\n  template: `\n\n\n    <div id=grup1 >\n        <button  mat-mini-fab *ngIf=\"botoDescartarCanvis\"  id=\"borrarCanvis\" type=\"button\"  (click)=\"deleteChanges()\" [disabled]=\"comptadorCanvis <= 0\">\n            <mat-icon fontSet=\"material-icons-round\" > close </mat-icon>\n        </button>\n        <button mat-mini-fab *ngIf=\"botoUndo\"  id=\"undo\"  (click)=\"undo()\" [disabled]=\"comptadorCanvis <= 0\" >\n            <mat-icon fontSet=\"material-icons-round\" > undo </mat-icon>\n        </button>\n        <button mat-mini-fab *ngIf=\"botoRedo\"  id=\"redo\"  (click)=\"redo()\" [disabled]=\"comptadorRedo <= 0\">\n            <mat-icon fontSet=\"material-icons-round\" > redo </mat-icon>\n        </button>\n        <button mat-mini-fab  *ngIf=\"botoAplicarCanvis\"  id=\"aplicarCanvis\"  (click)=\"applyChanges()\" [disabled]=\"comptadorCanvis <= 0\" >\n            <mat-icon fontSet=\"material-icons-round\" > check </mat-icon>\n        </button>\n    </div>\n\n    <div id=grup2 >\n        <label *ngIf=\"searchGeneral\" >Search </label>\n        <input *ngIf=\"searchGeneral\"type=\"text\" placeholder=\"\" (keyup)=\"quickSearch()\" [(ngModel)]=\"searchValue\" ml-2 >\n        <button *ngIf=\"botoElimina\"  mat-stroked-button id=\"botoElimina\"  (click)=\"removeData()\">\n            <mat-icon fontSet=\"material-icons-round\" > delete </mat-icon>\n            Elimina\n        </button>\n        <button  *ngIf=\"botoNou\" mat-stroked-button id=\"botoNou\"  (click)=\"newData()\">\n            <mat-icon fontSet=\"material-icons-round\"> add_circle_outline </mat-icon>                 \n            Nou\n        </button>\n\n\n        \n    </div>\n\n\n\n    <div class=\"row\" style=\" height: 100%\">\n        <div class=\"ag-theme-balham\" id=\"myGrid\" style=\" width:100%; height: 100%\" >\n            <ag-grid-angular\n            style=\" width: 100%; height: 100%;\"\n            class=\"ag-theme-balham\"\n            [floatingFilter]=\"true\"\n            [rowData]=\"rowData\"\n            [columnDefs]=\"columnDefs\"\n            [gridOptions]=\"gridOptions\"\n            [animateRows]=\"true\"\n            [pagination]=\"false\"\n            [modules]=\"modules\"     \n            [undoRedoCellEditing]=\"true\"    \n            [undoRedoCellEditingLimit]= 200\n            [suppressRowClickSelection]=true\n            [enableCellChangeFlash]=true\n            rowSelection=\"multiple\"\n            (filterModified)=\"onFilterModified()\"\n            (cellEditingStopped) =\"onCellEditingStopped($event)\"\n            (cellValueChanged)=\"onCellValueChanged($event)\"\n            (gridReady)=\"onGridReady($event)\">\n            \n            </ag-grid-angular>\n        </div>\n    </div>\n\n\n`,\n  styles: [`input,label{display:inline-block;margin:5px 5px 5px 10px}#botoNou{color:#fff;background:no-repeat padding-box #68a225;margin-left:3px}#botoElimina{background:no-repeat padding-box #fff;margin-left:3px}#aplicarCanvis{color:#fff!important;background:no-repeat padding-box #68a225;margin-left:3px}#aplicarCanvis[disabled]{background:no-repeat padding-box #83976c}#redo,#undo{color:#fff!important;background:#ff9300;margin-left:3px}#redo[disabled],#undo[disabled]{background:#ffc97f;margin-left:3px}#borrarCanvis{color:#fff!important;background:#df3133}#borrarCanvis[disabled]{color:#fff!important;background:#da8c8e}#grup1{text-align:start;width:40%}#grup2{text-align:end;width:60%}#grup1,#grup2{display:inline-block!important}`]\n})\nexport class DataGridComponent {\n \n\n\n\n  modules: Module[] = AllCommunityModules;\n  searchValue: string;\n  private gridApi;\n  private gridColumnApi;\n  columnaEstat = false;\n  map: Map<number, number> = new Map<number, number>(); // Guardaremos el id de las celas modificadas i el nÂº de ediciones hechas sobre estas\n  private params; //Parametros del grid en la ultima modificacion hecha (por si hacemos apply changes)\n  rowData: any[];\n  comptadorCanvis: number; // Numero de ediciones hechas sobre las celas\n  comptadorCanvisAnterior: number; //  Numero de ediciones que habia antes de hacer la ultima modificacion (comptadorCanvis)\n  comptadorRedo: number; // Numero de redo que podemos hacer\n  gridOptions;\n  @Input() columnDefs: any[];\n  @Input() getAll: () => Observable<any>;\n  @Input() botoDescartarCanvis: boolean;\n  @Input() botoUndo: boolean;\n  @Input() botoRedo: boolean;\n  @Input() botoAplicarCanvis: boolean;\n  @Input() botoElimina: boolean;\n  @Input() botoNou: boolean;\n  @Input() searchGeneral: boolean;\n\n\n\n  @Output() remove: EventEmitter<any[]>;\n  @Output() new: EventEmitter<boolean>;\n  @Output() sendChanges: EventEmitter<any[]>;\n\n\n  constructor() {\n\n    this.remove = new EventEmitter();\n    this.new = new EventEmitter();\n    this.sendChanges = new EventEmitter();\n    this.comptadorCanvis = 0;\n    this.comptadorCanvisAnterior = 0;\n    this.comptadorRedo = 0;\n    this.gridOptions = {\n      defaultColDef: {\n        flex: 1,\n        filter: true,\n        editable: true,\n        cellStyle: {backgroundColor: '#FFFFFF'},\n      },\n      rowSelection: 'multiple',\n      // suppressHorizontalScroll: true,\n\n    };\n\n  }\n\n\n\n  onGridReady(params): void{\n    this.params = params;\n    this.gridApi = params.api;\n    this.gridColumnApi = params.columnApi;\n    this.getElements();\n    this.gridApi.sizeColumnsToFit();\n    for (const col of this.columnDefs) {\n      if (col.field === 'estat') {\n        this.columnaEstat = true;\n      }\n    }\n \n   \n\n  }\n\n  quickSearch(): void{\n      this.gridApi.setQuickFilter(this.searchValue);\n  }\n\n  getElements(): void\n  {\n    this.getAll()\n    .subscribe((items) => {\n        console.log(items);\n        this.rowData = items;\n        setTimeout(()=>{this.gridApi.sizeColumnsToFit()}, 30);\n    });\n  }\n\n  removeData(): void {\n    this.gridApi.stopEditing(false);\n    const selectedNodes = this.gridApi.getSelectedNodes();\n    const selectedData = selectedNodes.map(node => node.data);\n    this.remove.emit(selectedData);\n\n    if(this.columnaEstat)\n    {\n      const selectedRows = selectedNodes.map(node => node.rowIndex);\n\n      for (const id of selectedRows){\n          this.gridApi.getRowNode(id).data.estat ='Eliminat';\n        }\n      this.gridOptions.api.refreshCells();\n    }\n  }\n\n\n\n\n\n  newData(): void\n  {\n    this.gridApi.stopEditing(false);\n    this.new.emit(true);\n  }\n\n  applyChanges(): void\n  {\n    const itemsChanged: any[] = [];\n    this.gridApi.stopEditing(false);\n    for (const key of this.map.keys())\n    {\n      itemsChanged.push(this.gridApi.getRowNode(key).data);\n    }\n    this.sendChanges.emit(itemsChanged);\n    this.map.clear();\n    this.comptadorCanvis = 0;\n    this.comptadorCanvisAnterior = 0;\n    this.comptadorRedo = 0;\n    this.params.colDef.cellStyle =  {backgroundColor: '#FFFFFF'};\n    this.gridApi.redrawRows();\n  }\n\n\n\n  deleteChanges(): void\n  {\n    for (let i = 0; i < this.comptadorCanvis; i++)\n    {\n      this.gridApi.undoCellEditing();\n    }\n    this.map.clear();\n    this.comptadorCanvisAnterior = 0;\n    this.comptadorCanvis = 0;\n    this.comptadorRedo = 0;\n    this.params.colDef.cellStyle =  {backgroundColor: '#FFFFFF'};\n    this.gridApi.redrawRows();\n  }\n\n\n  onFilterModified(): void{\n    this.deleteChanges();\n  }\n\n\n  undo(): void {\n    this.gridApi.stopEditing(false);\n    this.gridApi.undoCellEditing();\n    this.comptadorCanvis -= 1;\n    this.comptadorRedo += 1;\n  }\n\n  redo(): void {\n    this.gridApi.stopEditing(false);\n    this.gridApi.redoCellEditing();\n    this.comptadorCanvis += 1;\n    this.comptadorRedo -= 1;\n  }\n\n\n  onCellEditingStopped(e)\n  {\n    this.comptadorCanvis++;\n    this.comptadorRedo = 0;\n    this.onCellValueChanged(e);\n  }\n\n\n  onCellValueChanged(params): void{\n    this.params = params; // Guardaremos los parametros actuales por si luego hay que hacer un applyChanges\n\n    if (this.comptadorCanvis > this.comptadorCanvisAnterior)\n      //Esta condiciÃ³n serÃ¡ cierta si hemos editado o hecho un redo, pero no si hemos hecho un undo\n\n      {\n        if (! this.map.has(params.node.id)) //Si no hemos editado la cela anteriormente, la aÃ±adimos al map i canviamos el background a verde\n        {\n          this.map.set(params.node.id, 1);\n        }\n        else{\n           // Si ya la habÃ­amos modificado, sumamos 1 al numero de modificaciones en el map\n          const modificacionsActuals = this.map.get(params.node.id);\n          this.map.set(params.node.id, (modificacionsActuals + 1));\n        }\n        const row = this.gridApi.getDisplayedRowAtIndex(params.rowIndex); // Com hemos modificado la linia, la pintamos de verde\n        params.colDef.cellStyle = {backgroundColor: '#E8F1DE'};\n        this.gridApi.redrawRows({rowNodes: [row]});\n        params.colDef.cellStyle = {backgroundColor: '#FFFFFF'}; // Volveremos a definir el background blanco para futuras modificaciones de la tabla (ej: filtro)\n        this.comptadorCanvisAnterior++;\n\n      }\n    if (this.comptadorCanvis < this.comptadorCanvisAnterior){ // EntrarÃ¡ aquÃ­ si hemos hecho un undo\n        // Como venimos de undo, sabemos que la cela ya estaba modificada\n        const modificacionsActuals = this.map.get(params.node.id);\n\n        if (modificacionsActuals === 1) {\n          // Si solo tiene una modificaciÃ³n, quiere decir que la hemos dejado en su estado inicial, por lo que la pintaremos de blanco y la borraremos del map\n          this.map.delete(params.node.id);\n          const row = this.gridApi.getDisplayedRowAtIndex(params.rowIndex);\n          params.colDef.cellStyle = {backgroundColor: '#FFFFFF'}; \n          this.gridApi.redrawRows({rowNodes: [row]});\n        }\n        else // La cela aun no estÃ¡ en su estado inicial, asÃ­ que le restamos una modificacion en el map\n        {\n          this.map.set(params.node.id, (modificacionsActuals - 1));\n          const row = this.gridApi.getDisplayedRowAtIndex(params.rowIndex); // Como aun tiene modificaciones, el background verde\n          params.colDef.cellStyle = {backgroundColor: '#E8F1DE'};\n          this.gridApi.redrawRows({rowNodes: [row]});\n          params.colDef.cellStyle = {backgroundColor: '#FFFFFF'}; // Volveremos a definir el background blanco para futuras modificaciones de la tabla (ej: filtro)\n        }\n        this.comptadorCanvisAnterior--; // Como venimos de undo, hay que decrementar el contador de canvios anterior\n      }\n    }\n}\n","import { NgModule } from '@angular/core';\r\n\r\nimport { FormsModule } from '@angular/forms';\r\nimport { CommonModule } from '@angular/common';\r\nimport {HttpClientModule, HttpClient, HTTP_INTERCEPTORS} from '@angular/common/http';\r\nimport { BrowserAnimationsModule, NoopAnimationsModule } from '@angular/platform-browser/animations';\r\nimport { RouterModule, Routes } from '@angular/router';\r\n\r\n//import * as ol from 'openlayers';\r\nimport {TranslateModule, TranslateLoader,TranslateService} from '@ngx-translate/core';\r\n\r\n\r\nimport { AngularHalModule } from '@sitmun/frontend-core';\r\n\r\n\r\nimport { ReactiveFormsModule } from '@angular/forms';\r\n\r\nimport {SitmunFrontendCoreModule} from '@sitmun/frontend-core';\r\nimport { DataGridComponent } from './data-grid/data-grid.component';\r\nimport { AgGridModule } from '@ag-grid-community/angular';\r\nimport { MatButtonModule } from '@angular/material/button';\r\nimport {MatIconModule} from '@angular/material/icon';\r\n\r\n\r\n\r\n\r\n/** SITMUN plugin core module */\r\n@NgModule({\r\n  imports: [\r\n    RouterModule,\r\n    HttpClientModule,\r\n    CommonModule,\r\n    FormsModule,\r\n    NoopAnimationsModule,\r\n    AngularHalModule,\r\n    ReactiveFormsModule,\r\n    BrowserAnimationsModule,\r\n    AgGridModule.withComponents([]),\r\n    SitmunFrontendCoreModule,\r\n    MatButtonModule,\r\n    MatIconModule,\r\n \r\n  ],\r\n  declarations: [\r\n    DataGridComponent\r\n  ],\r\n  entryComponents: [\r\n  ],\r\n  providers: [\r\n  ],\r\n  exports: [\r\n    HttpClientModule,\r\n    CommonModule,\r\n    FormsModule,\r\n    NoopAnimationsModule,\r\n    AngularHalModule,\r\n    TranslateModule,\r\n    ReactiveFormsModule,\r\n    DataGridComponent,\r\n    SitmunFrontendCoreModule\r\n  ]\r\n})\r\nexport class SitmunFrontendGuiModule {\r\n}\r\n"],"names":["DataGridComponent","prototype","onGridReady","params","this","gridApi","api","gridColumnApi","columnApi","getElements","sizeColumnsToFit","_a","tslib_1.__values","columnDefs","_b","next","done","value","field","columnaEstat","quickSearch","setQuickFilter","searchValue","_this","getAll","subscribe","items","console","log","rowData","setTimeout","removeData","stopEditing","selectedNodes","getSelectedNodes","selectedData","map","node","data","remove","emit","selectedRows","rowIndex","selectedRows_1","selectedRows_1_1","id","getRowNode","estat","gridOptions","refreshCells","newData","new","applyChanges","itemsChanged","keys","key","push","sendChanges","clear","comptadorCanvis","comptadorCanvisAnterior","comptadorRedo","colDef","cellStyle","backgroundColor","redrawRows","deleteChanges","i","undoCellEditing","onFilterModified","undo","redo","redoCellEditing","onCellEditingStopped","e","onCellValueChanged","modificacionsActuals","row","has","get","set","getDisplayedRowAtIndex","rowNodes","delete","Component","args","selector","template","styles","Input","Output","AllCommunityModules","Map","EventEmitter","defaultColDef","flex","filter","editable","rowSelection","NgModule","imports","RouterModule","HttpClientModule","CommonModule","FormsModule","NoopAnimationsModule","AngularHalModule","ReactiveFormsModule","BrowserAnimationsModule","AgGridModule","withComponents","SitmunFrontendCoreModule","MatButtonModule","MatIconModule","declarations","entryComponents","providers","exports","TranslateModule"],"mappings":"2wCAqIEA,EAAAC,UAAAC,YAAA,SAAYC,GACVC,KAAKD,OAASA,EACdC,KAAKC,QAAUF,EAAOG,IACtBF,KAAKG,cAAgBJ,EAAOK,UAC5BJ,KAAKK,cACLL,KAAKC,QAAQK,mB,IACb,IAAkB,IAAAC,EAAAC,EAAAR,KAAKS,YAAUC,EAAAH,EAAAI,QAAAD,EAAAE,KAAAF,EAAAH,EAAAI,OACb,UADND,EAAAG,MACJC,QACNd,KAAKe,cAAe,G,6GAQ1BnB,EAAAC,UAAAmB,YAAA,WACIhB,KAAKC,QAAQgB,eAAejB,KAAKkB,cAGrCtB,EAAAC,UAAAQ,YAAA,WAAA,IAAAc,EAAAnB,KAEEA,KAAKoB,SACJC,UAAU,SAACC,GACRC,QAAQC,IAAIF,GACZH,EAAKM,QAAUH,EACfI,WAAW,WAAKP,EAAKlB,QAAQK,oBAAqB,OAIxDV,EAAAC,UAAA8B,WAAA,WACE3B,KAAKC,QAAQ2B,aAAY,GACzB,I,IAAMC,EAAgB7B,KAAKC,QAAQ6B,mBAC7BC,EAAeF,EAAcG,IAAI,SAAAC,GAAQ,OAAAA,EAAKC,OAGpD,GAFAlC,KAAKmC,OAAOC,KAAKL,GAEd/B,KAAKe,aACR,CACE,IAAMsB,EAAeR,EAAcG,IAAI,SAAAC,GAAQ,OAAAA,EAAKK,W,IAEpD,IAAiB,IAAAC,EAAA/B,EAAA6B,GAAYG,EAAAD,EAAA5B,QAAA6B,EAAA5B,KAAA4B,EAAAD,EAAA5B,OAAA,CAAxB,IAAM8B,EAAED,EAAA3B,MACTb,KAAKC,QAAQyC,WAAWD,GAAIP,KAAKS,MAAO,Y,oGAE5C3C,KAAK4C,YAAY1C,IAAI2C,iBAQzBjD,EAAAC,UAAAiD,QAAA,WAEE9C,KAAKC,QAAQ2B,aAAY,GACzB5B,KAAK+C,OAAIX,MAAK,IAGhBxC,EAAAC,UAAAmD,aAAA,WAEE,I,IAAMC,EAAsB,GAC5BjD,KAAKC,QAAQ2B,aAAY,G,IACzB,IAAkB,IAAArB,EAAAC,EAAAR,KAAKgC,IAAIkB,QAAMxC,EAAAH,EAAAI,QAAAD,EAAAE,KAAAF,EAAAH,EAAAI,OAAA,CAA5B,IAAMwC,EAAGzC,EAAAG,MAEZoC,EAAaG,KAAKpD,KAAKC,QAAQyC,WAAWS,GAAKjB,O,oGAEjDlC,KAAKqD,YAAYjB,KAAKa,GACtBjD,KAAKgC,IAAIsB,QACTtD,KAAKuD,gBAAkB,EACvBvD,KAAKwD,wBAA0B,EAC/BxD,KAAKyD,cAAgB,EACrBzD,KAAKD,OAAO2D,OAAOC,UAAa,CAACC,gBAAiB,WAClD5D,KAAKC,QAAQ4D,cAKfjE,EAAAC,UAAAiE,cAAA,WAEE,IAAK,IAAIC,EAAI,EAAGA,EAAI/D,KAAKuD,gBAAiBQ,IAExC/D,KAAKC,QAAQ+D,kBAEfhE,KAAKgC,IAAIsB,QACTtD,KAAKwD,wBAA0B,EAC/BxD,KAAKuD,gBAAkB,EACvBvD,KAAKyD,cAAgB,EACrBzD,KAAKD,OAAO2D,OAAOC,UAAa,CAACC,gBAAiB,WAClD5D,KAAKC,QAAQ4D,cAIfjE,EAAAC,UAAAoE,iBAAA,WACEjE,KAAK8D,iBAIPlE,EAAAC,UAAAqE,KAAA,WACElE,KAAKC,QAAQ2B,aAAY,GACzB5B,KAAKC,QAAQ+D,oBACbhE,KAAKuD,gBACLvD,KAAKyD,eAAiB,GAGxB7D,EAAAC,UAAAsE,KAAA,WACEnE,KAAKC,QAAQ2B,aAAY,GACzB5B,KAAKC,QAAQmE,kBACbpE,KAAKuD,iBAAmB,IACxBvD,KAAKyD,eAIP7D,EAAAC,UAAAwE,qBAAA,SAAqBC,GAEnBtE,KAAKuD,kBACLvD,KAAKyD,cAAgB,EACrBzD,KAAKuE,mBAAmBD,IAI1B1E,EAAAC,UAAA0E,mBAAA,SAAmBxE,GAGjB,IAsBUyE,EAYEC,EApCZzE,KAAKD,OAASA,EAEVC,KAAKuD,gBAAkBvD,KAAKwD,0BAItBxD,KAAKgC,IAAI0C,IAAI3E,EAAOkC,KAAKQ,KAMvB+B,EAAuBxE,KAAKgC,IAAI2C,IAAI5E,EAAOkC,KAAKQ,IACtDzC,KAAKgC,IAAI4C,IAAI7E,EAAOkC,KAAKQ,GAAK+B,EAAuB,IALrDxE,KAAKgC,IAAI4C,IAAI7E,EAAOkC,KAAKQ,GAAI,GAOzBgC,EAAMzE,KAAKC,QAAQ4E,uBAAuB9E,EAAOuC,UACvDvC,EAAO2D,OAAOC,UAAY,CAACC,gBAAiB,WAC5C5D,KAAKC,QAAQ4D,WAAW,CAACiB,SAAU,CAACL,KACpC1E,EAAO2D,OAAOC,UAAY,CAACC,gBAAiB,WAC5C5D,KAAKwD,2BAGLxD,KAAKuD,gBAAkBvD,KAAKwD,0BAIC,KAFvBgB,EAAuBxE,KAAKgC,IAAI2C,IAAI5E,EAAOkC,KAAKQ,MAIpDzC,KAAKgC,IAAI+C,UAAOhF,EAAOkC,KAAKQ,IACtBgC,EAAMzE,KAAKC,QAAQ4E,uBAAuB9E,EAAOuC,UACvDvC,EAAO2D,OAAOC,UAAY,CAACC,gBAAiB,WAC5C5D,KAAKC,QAAQ4D,WAAW,CAACiB,SAAU,CAACL,OAIpCzE,KAAKgC,IAAI4C,IAAI7E,EAAOkC,KAAKQ,GAAK+B,EAAuB,GAC/CC,EAAMzE,KAAKC,QAAQ4E,uBAAuB9E,EAAOuC,UACvDvC,EAAO2D,OAAOC,UAAY,CAACC,gBAAiB,WAC5C5D,KAAKC,QAAQ4D,WAAW,CAACiB,SAAU,CAACL,KACpC1E,EAAO2D,OAAOC,UAAY,CAACC,gBAAiB,YAE9C5D,KAAKwD,4B,oBA/RZwB,EAAAA,UAASC,KAAA,CAAC,CACTC,SAAU,gBACVC,SAAU,6jFAgEVC,OAAQ,CAAC,4tB,0EAmBRC,EAAAA,Q,cACAA,EAAAA,Q,2BACAA,EAAAA,Q,gBACAA,EAAAA,Q,gBACAA,EAAAA,Q,yBACAA,EAAAA,Q,mBACAA,EAAAA,Q,eACAA,EAAAA,Q,qBACAA,EAAAA,Q,cAIAC,EAAAA,S,aACAA,EAAAA,S,mBACAA,EAAAA,U,GAGD,SAAA1F,I,aA7BoB2F,EAAAA,oB,mBAIL,E,SACY,IAAIC,IA0B7BxF,KAAKmC,OAAS,IAAIsD,EAAAA,aAClBzF,KAAK+C,OAAM,IAAI0C,EAAAA,aACfzF,KAAKqD,YAAc,IAAIoC,EAAAA,aACvBzF,KAAKuD,gBAAkB,EACvBvD,KAAKwD,wBAA0B,EAC/BxD,KAAKyD,cAAgB,EACrBzD,KAAK4C,YAAc,CACjB8C,cAAe,CACbC,KAAM,EACNC,QAAQ,EACRC,UAAU,EACVlC,UAAW,CAACC,gBAAiB,YAE/BkC,aAAc,Y,oBCjGnBC,EAAAA,SAAQd,KAAA,CAAC,CACRe,QAAS,CACPC,EAAAA,aACAC,EAAAA,iBACAC,EAAAA,aACAC,EAAAA,YACAC,EAAAA,qBACAC,EAAAA,iBACAC,EAAAA,oBACAC,EAAAA,wBACAC,EAAAA,aAAaC,eAAe,IAC5BC,EAAAA,yBACAC,EAAAA,gBACAC,EAAAA,eAGFC,aAAc,CACZlH,GAEFmH,gBAAiB,GAEjBC,UAAW,GAEXC,QAAS,CACPf,EAAAA,iBACAC,EAAAA,aACAC,EAAAA,YACAC,EAAAA,qBACAC,EAAAA,iBACAY,EAAAA,gBACAX,EAAAA,oBACA3G,EACA+G,EAAAA,8B"}