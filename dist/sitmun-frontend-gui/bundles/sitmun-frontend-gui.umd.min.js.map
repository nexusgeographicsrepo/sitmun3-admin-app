{"version":3,"sources":["ng://@sitmun/frontend-gui/data-grid/data-grid.component.ts","ng://@sitmun/frontend-gui/btn-edit-rendered/btn-edit-rendered.component.ts","ng://@sitmun/frontend-gui/sitmun-frontend-gui.module.ts"],"sourcesContent":["import { AgGridModule } from '@ag-grid-community/angular';\r\nimport { Component, OnInit, NgModule, Input, Output, EventEmitter } from '@angular/core';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { Observable } from 'rxjs';\r\nimport { map } from 'rxjs/operators';\r\nimport { AllCommunityModules, ColumnApi, Module } from '@ag-grid-community/all-modules';\r\n\r\n@Component({\r\n  selector: 'app-data-grid',\r\n  template: `    <div id=grup1 class=\"editDivBtns\">\r\n        <button  mat-mini-fab class=\"editBtn\"  *ngIf=\"discardChangesButton\"  id=\"deleteChangesButton\" type=\"button\"  (click)=\"deleteChanges()\" [disabled]=\"changeCounter <= 0\">\r\n            <mat-icon  fontSet=\"material-icons-round\" > close </mat-icon>\r\n        </button>\r\n        <button mat-mini-fab class=\"editBtn\" *ngIf=\"undoButton\"  id=\"undo\"  (click)=\"undo()\" [disabled]=\"changeCounter <= 0\" >\r\n            <mat-icon fontSet=\"material-icons-round\" > undo </mat-icon>\r\n        </button>\r\n        <button mat-mini-fab class=\"editBtn\" *ngIf=\"redoButton\"  id=\"redo\"  (click)=\"redo()\" [disabled]=\"redoCounter <= 0\">\r\n            <mat-icon fontSet=\"material-icons-round\" > redo </mat-icon>\r\n        </button>\r\n        <button mat-mini-fab class=\"editBtn\" *ngIf=\"applyChangesButton\"  id=\"applyChangesButton\"  (click)=\"applyChanges()\" [disabled]=\"changeCounter <= 0\" >\r\n            <mat-icon fontSet=\"material-icons-round\" > check </mat-icon>\r\n        </button>\r\n    </div>\r\n\r\n    <div id=grup2 class=\"actionsDivBtns\" >\r\n        <label *ngIf=\"globalSearch\" [translate]=\"'Search'\"> </label>\r\n        <input *ngIf=\"globalSearch\"type=\"text\" class=\"searchGenericInput\" placeholder=\"\" (keyup)=\"quickSearch()\" [(ngModel)]=\"searchValue\" ml-2 >\r\n        <button *ngIf=\"deleteButton\"  mat-stroked-button id=\"deleteButton\"  (click)=\"removeData()\">\r\n            <mat-icon fontSet=\"material-icons-round\" > delete </mat-icon>\r\n            <span  [translate]=\"'Remove'\"> </span>\r\n            \r\n        </button>\r\n\r\n        \r\n        <button  mat-stroked-button [matMenuTriggerFor]=\"menu\" id=\"actionButton\">\r\n            <span  [translate]=\"'Actions'\"> </span>    \r\n            <mat-icon fontSet=\"material-icons-round\" > keyboard_arrow_down </mat-icon>     \r\n        </button>\r\n        <mat-menu #menu=\"matMenu\">\r\n            <button mat-menu-item (click)=\"exportData()\" > {{\"Export\" | translate}} </button>\r\n            <button mat-menu-item (click)=\"duplicateSelectedRows()\"> {{\"Duplicate\" | translate}}</button>\r\n            <button mat-menu-item> {{\"Search/Replace\" | translate}}</button>\r\n        </mat-menu>  \r\n            \r\n\r\n        <button  *ngIf=\"newButton\" mat-stroked-button id=\"newButton\"  (click)=\"newData()\">\r\n            <mat-icon fontSet=\"material-icons-round\"> add_circle_outline </mat-icon>      \r\n            <span  [translate]=\"'New'\"> </span>           \r\n        </button>\r\n\r\n        <button  *ngIf=\"!newButton\" mat-stroked-button id=\"newButton\"  (click)=\"newData()\">\r\n            <mat-icon fontSet=\"material-icons-round\"> add_circle_outline </mat-icon>      \r\n            <span  [translate]=\"'Add'\"> </span>           \r\n        </button>\r\n        \r\n\r\n        \r\n    </div>\r\n\r\n\r\n\r\n    <div class=\"row\" style=\" height: 100%\">\r\n        <div id=\"myGrid\" style=\" width:100%; height: 100%\" >\r\n            <ag-grid-angular\r\n            style=\" width: 100%; height: 100%;\"\r\n            [class]=\"themeGrid\"\r\n            [floatingFilter]=\"true\"\r\n            [rowData]=\"rowData\"\r\n            [columnDefs]=\"columnDefs\"\r\n            [gridOptions]=\"gridOptions\"\r\n            [animateRows]=\"true\"\r\n            [pagination]=\"false\"\r\n            [modules]=\"modules\"     \r\n            [undoRedoCellEditing]=\"true\"    \r\n            [undoRedoCellEditingLimit]= 200\r\n            [suppressRowClickSelection]=true\r\n            [enableCellChangeFlash]=true\r\n            [frameworkComponents]=\"frameworkComponents\"\r\n            rowSelection=\"multiple\"\r\n            (filterModified)=\"onFilterModified()\"\r\n            (cellEditingStopped) =\"onCellEditingStopped($event)\"\r\n            (cellValueChanged)=\"onCellValueChanged($event)\"\r\n            (gridReady)=\"onGridReady($event)\">\r\n            \r\n            </ag-grid-angular>\r\n        </div>\r\n    </div>\r\n\r\n\r\n`,\r\n  styles: [`input,label{display:inline-block;margin:5px 5px 5px 10px}#newButton{color:#fff;background:no-repeat padding-box #68a225;margin-left:3px}#deleteButton{background:no-repeat padding-box #fff;margin-left:3px}#actionButton{background:no-repeat padding-box #fff;margin-left:3px;text-align:center!important}#applyChangesButton{color:#fff!important;background:no-repeat padding-box #68a225;margin-left:3px}#applyChangesButton[disabled]{background:no-repeat padding-box #83976c}#redo,#undo{color:#fff!important;background:#ff9300;margin-left:3px}#redo[disabled],#undo[disabled]{background:#ffc97f;margin-left:3px}#deleteChangesButton{color:#fff!important;background:#df3133}#deleteChangesButton[disabled]{color:#fff!important;background:#da8c8e}.editDivBtns{margin-left:10px;text-align:start;width:130px;height:30px!important;line-height:30px!important}.actionsDivBtns{text-align:end;width:calc(100% - 140px);height:60px}.actionsDivBtns,.editDivBtns{display:inline-block!important}.actionsDivBtns .mat-stroked-button{padding:5px 20px!important}.editDivBtns .mat-mini-fab .mat-button-wrapper{padding:inherit!important;display:inherit!important}.editDivBtns .mat-icon{height:30px!important;bottom:5px;position:relative}.editDivBtns .mat-mini-fab{width:30px;height:30px}.actionsDivBtns .searchGenericInput{height:45px!important;width:45%!important}.ag-body-viewport.ag-layout-normal ::-webkit-scrollbar-thumb{background:#eee}â .ag-body-viewport.ag-layout-normal ::-webkit-scrollbar{width:2em;height:2em}.ag-body-viewport.ag-layout-normal ::-webkit-scrollbar-button{background:#ccc}.ag-body-viewport.ag-layout-normal::-webkit-scrollbar-track-piece{background:#888}`]\r\n})\r\nexport class DataGridComponent implements OnInit {\r\n \r\n  private _eventRefreshSubscription: any;\r\n  modules: Module[] = AllCommunityModules;\r\n  searchValue: string;\r\n  private gridApi;\r\n  private gridColumnApi;\r\n  statusColumn = false;\r\n  changesMap: Map<number, Map<string, number>> = new Map<number, Map<string, number>>();\r\n   // We will save the id of edited cells and the number of editions done.\r\n  private params; // Last parameters of the grid (in case we do apply changes we will need it) \r\n  rowData: any[];\r\n  changeCounter: number; // Number of editions done above any cell \r\n  previousChangeCounter: number; // Number of ditions done after the last modification(changeCounter)\r\n  redoCounter: number; // Number of redo we can do\r\n  modificationChange = false;\r\n  undoNoChanges = false; // Boolean that indicates if an undo hasn't modifications\r\n  gridOptions;\r\n\r\n  @Input() eventRefreshSubscription: Observable <boolean> ;\r\n  @Input() frameworkComponents: any;\r\n  @Input() columnDefs: any[];\r\n  @Input() getAll: () => Observable<any>;\r\n  @Input() discardChangesButton: boolean;\r\n  @Input() undoButton: boolean;\r\n  @Input() redoButton: boolean;\r\n  @Input() applyChangesButton: boolean;\r\n  @Input() deleteButton: boolean;\r\n  @Input() newButton: boolean;\r\n  @Input() globalSearch: boolean;\r\n  @Input() themeGrid: any;\r\n  @Input() singleSelection: boolean;\r\n\r\n\r\n  @Output() remove: EventEmitter<any[]>;\r\n  @Output() new: EventEmitter<number>;\r\n  @Output() sendChanges: EventEmitter<any[]>;\r\n  @Output() duplicate: EventEmitter<any[]>;\r\n\r\n\r\n  constructor() {\r\n\r\n    this.remove = new EventEmitter();\r\n    this.new = new EventEmitter();\r\n    this.sendChanges = new EventEmitter();\r\n    this.duplicate = new EventEmitter();\r\n    this.changeCounter = 0;\r\n    this.previousChangeCounter = 0;\r\n    this.redoCounter = 0;\r\n    this.gridOptions = {\r\n      defaultColDef: {\r\n        sortable: true,\r\n        flex: 1,\r\n        filter: true,\r\n        editable: true,\r\n        cellStyle: {backgroundColor: '#FFFFFF'},\r\n      },\r\n      columnTypes: {\r\n        dateColumn: {\r\n            filter: 'agDateColumnFilter',\r\n            filterParams: {\r\n              comparator(filterLocalDateAtMidnight, cellValue) {\r\n                const dateCellValue = new Date(cellValue);\r\n                const dateFilter = new Date(filterLocalDateAtMidnight);\r\n\r\n                if (dateCellValue.getTime() < dateFilter.getTime()) {\r\n                  return -1;\r\n                } else if (dateCellValue.getTime()  > dateFilter.getTime()) {\r\n                  return 1;\r\n                } else {\r\n                  return 0;\r\n                }\r\n              },\r\n            },\r\n            suppressMenu: true\r\n        }\r\n    },\r\n      rowSelection: 'multiple',\r\n      singleClickEdit: true,\r\n      // suppressHorizontalScroll: true,\r\n\r\n    };\r\n\r\n  }\r\n\r\n\r\n  ngOnInit(){\r\n\r\n    if (this.eventRefreshSubscription) {\r\n      this._eventRefreshSubscription = this.eventRefreshSubscription.subscribe(() => {\r\n        this.getElements();\r\n      });\r\n    }\r\n\r\n\r\n  }\r\n\r\n\r\n\r\n  onGridReady(params): void{\r\n    if (this.singleSelection) {this.gridOptions.rowSelection = 'single'}\r\n    this.params = params;\r\n    this.gridApi = params.api;\r\n    this.gridColumnApi = params.columnApi;\r\n    this.getElements();\r\n    this.gridApi.sizeColumnsToFit();\r\n    for (const col of this.columnDefs) {\r\n      if (col.field === 'estat') {\r\n        this.statusColumn = true;\r\n      }\r\n    }\r\n  }\r\n\r\n  \r\n  duplicateSelectedRows(): void{\r\n    const selectedNodes = this.gridApi.getSelectedNodes();\r\n    const selectedData = selectedNodes.map(node => node.data);\r\n    this.duplicate.emit(selectedData);\r\n  }\r\n\r\n  getColumnKeysAndHeaders(columnkeys: Array<any>): String{    \r\n    let header:Array<any> = [];\r\n    if (this.columnDefs.length == 0) {return ''};\r\n\r\n    let allColumnKeys=this.gridOptions.columnApi.getAllDisplayedColumns();\r\n    console.log(allColumnKeys);\r\n    allColumnKeys.forEach(element => {\r\n        if (element.userProvidedColDef.headerName !== '')\r\n        {\r\n          columnkeys.push(element.userProvidedColDef.field);\r\n          header.push(element.userProvidedColDef.headerName);\r\n        }\r\n  \r\n      \r\n    });\r\n    \r\n    return header.join(\",\");\r\n  }\r\n\r\n\r\n  exportData(): void{\r\n    let columnkeys:Array<any> = [];\r\n    let customHeader:String = '';\r\n    customHeader = this.getColumnKeysAndHeaders(columnkeys)\r\n    console.log(this.gridApi);\r\n    let params = {\r\n        onlySelected: true,\r\n        columnKeys: columnkeys,\r\n        customHeader: customHeader,\r\n        skipHeader: true\r\n    };\r\n    this.gridApi.exportDataAsCsv(params);\r\n  }\r\n\r\n  quickSearch(): void{\r\n    this.gridApi.setQuickFilter(this.searchValue);\r\n}\r\n\r\n  getElements(): void\r\n  {\r\n    this.getAll()\r\n    .subscribe((items) => {\r\n        this.rowData = items;\r\n        setTimeout(()=>{this.gridApi.sizeColumnsToFit()}, 30);\r\n        this.gridApi.setRowData(this.rowData);\r\n        console.log(this.rowData);\r\n    });\r\n  }\r\n\r\n  removeData(): void {\r\n    this.gridApi.stopEditing(false);\r\n    const selectedNodes = this.gridApi.getSelectedNodes();\r\n    const selectedData = selectedNodes.map(node => node.data);\r\n    this.remove.emit(selectedData);\r\n\r\n    if(this.statusColumn)\r\n    {\r\n      const selectedRows = selectedNodes.map(node => node.rowIndex);\r\n\r\n      for (const id of selectedRows){\r\n          this.gridApi.getRowNode(id).data.estat ='Eliminat';\r\n        }\r\n      this.gridOptions.api.refreshCells();\r\n    }\r\n    this.gridOptions.api.deselectAll();\r\n  }\r\n\r\n  newData(): void\r\n  {\r\n    this.gridApi.stopEditing(false);\r\n    this.new.emit(-1);\r\n  }\r\n\r\n\r\n  applyChanges(): void\r\n  {\r\n    const itemsChanged: any[] = [];\r\n    this.gridApi.stopEditing(false);\r\n    for (const key of this.changesMap.keys())\r\n    {\r\n      itemsChanged.push(this.gridApi.getRowNode(key).data);\r\n    }\r\n    this.sendChanges.emit(itemsChanged);\r\n    this.changesMap.clear();\r\n    this.changeCounter = 0;\r\n    this.previousChangeCounter = 0;\r\n    this.redoCounter = 0;\r\n    this.params.colDef.cellStyle =  {backgroundColor: '#FFFFFF'};\r\n    this.gridApi.redrawRows();\r\n  }\r\n\r\n\r\n\r\n  deleteChanges(): void\r\n  {\r\n    for (let i = 0; i < this.changeCounter; i++)\r\n    {\r\n      this.gridApi.undoCellEditing();\r\n    }\r\n    this.changesMap.clear();\r\n    this.previousChangeCounter = 0;\r\n    this.changeCounter = 0;\r\n    this.redoCounter = 0;\r\n    this.params.colDef.cellStyle =  {backgroundColor: '#FFFFFF'};\r\n    this.gridApi.redrawRows();\r\n  }\r\n\r\n\r\n  onFilterModified(): void{\r\n    this.deleteChanges();\r\n  }\r\n\r\n\r\n  undo(): void {\r\n    this.gridApi.stopEditing(false);\r\n    this.gridApi.undoCellEditing();\r\n    this.changeCounter -= 1;\r\n    this.redoCounter += 1;\r\n  }\r\n\r\n  redo(): void {\r\n    this.gridApi.stopEditing(false);\r\n    this.gridApi.redoCellEditing();\r\n    this.changeCounter += 1;\r\n    this.redoCounter -= 1;\r\n  }\r\n\r\n\r\n  onCellEditingStopped(e)\r\n  {\r\n      if (this.modificationChange)\r\n      {\r\n        this.changeCounter++;\r\n        this.redoCounter = 0;\r\n        this.onCellValueChanged(e);\r\n        this.modificationChange = false;\r\n      }\r\n  }\r\n\r\n\r\n  onCellValueChanged(params): void{\r\n\r\n    this.params = params; \r\n    if (this.changeCounter > this.previousChangeCounter)\r\n      // True if we have edited some cell or we have done a redo \r\n      {\r\n\r\n        if (params.oldValue !== params.value && !(params.oldValue == null && params.value === ''))\r\n        {\r\n          \r\n          if (! this.changesMap.has(params.node.id)) // If it's firts edit of a cell, we add it to the map and we paint it\r\n          {\r\n            const addMap: Map<string, number> = new Map<string, number>();\r\n            addMap.set(params.colDef.field, 1)\r\n            this.changesMap.set(params.node.id, addMap);\r\n          }\r\n          else{\r\n            if (! this.changesMap.get(params.node.id).has(params.colDef.field))\r\n            {\r\n\r\n              this.changesMap.get(params.node.id).set(params.colDef.field, 1);\r\n            }\r\n\r\n            else{\r\n              // We already had edited this cell, so we only increment number of changes of it on the map \r\n             const currentChanges = this.changesMap.get(params.node.id).get(params.colDef.field);\r\n             this.changesMap.get(params.node.id).set(params.colDef.field, (currentChanges + 1));\r\n           }\r\n\r\n          }\r\n          this.paintCells(params, this.changesMap); //We paint the row of the edited cell \r\n          this.previousChangeCounter++; //We match the current previousChangeCounter with changeCounter\r\n        }\r\n\r\n      }\r\n    else if (this.changeCounter < this.previousChangeCounter){ // True if we have done an undo\r\n        let currentChanges = -1;\r\n        if (this.changesMap.has(params.node.id)) {currentChanges = this.changesMap.get(params.node.id).get(params.colDef.field);}\r\n        \r\n        if (currentChanges === 1) { //Once the undo it's done, cell is in his initial status\r\n\r\n          this.changesMap.get(params.node.id).delete(params.colDef.field);\r\n          if(this.changesMap.get(params.node.id).size === 0) { // No more modifications in this row\r\n            this.changesMap.delete(params.node.id);\r\n            const row = this.gridApi.getDisplayedRowAtIndex(params.rowIndex);\r\n\r\n            // We paint it white\r\n            this.gridApi.redrawRows({rowNodes: [row]});\r\n\r\n           }\r\n           else\r\n           {\r\n              this.paintCells(params, this.changesMap);\r\n           }\r\n\r\n        }\r\n        else if (currentChanges >1) // The cell isn't in his initial state yet\r\n        {                                 //We can't do else because we can be doing an undo without changes \r\n          this.changesMap.get(params.node.id).set(params.colDef.field, (currentChanges - 1));\r\n\r\n          this.paintCells(params, this.changesMap);//Not initial state -> green background\r\n\r\n        }\r\n        this.previousChangeCounter--;  //We decrement previousChangeCounter because we have done undo\r\n    }\r\n    else{ // Control of modifications without changes\r\n      if(params.oldValue !== params.value && !(params.oldValue == null && params.value === '') ) //Isn't a modification without changes\r\n      {\r\n        this.modificationChange = true;\r\n      }\r\n      else{ \r\n        if ( this.changesMap.has(params.node.id)) //Modification without changes in en edited cell\r\n        {\r\n          if(!this.undoNoChanges)\r\n          {\r\n            this.gridApi.undoCellEditing(); // Undo to delete the change without changes internally \r\n            this.undoNoChanges = true;\r\n            this.paintCells(params, this.changesMap);  //The cell has modifications yet -> green background \r\n          }\r\n          else { this.undoNoChanges = false; }\r\n\r\n\r\n        }\r\n        else {\r\n          //With the internally undo will enter at this function, so we have to control when done the undo or not \r\n          if(!this.undoNoChanges)\r\n          {\r\n            this.gridApi.undoCellEditing(); // Undo to delete the change internally\r\n            this.undoNoChanges = true;\r\n          }\r\n          else { this.undoNoChanges = false; }\r\n        }\r\n\r\n      }\r\n\r\n    }\r\n  }\r\n\r\n  getColumnIndexByColId(api: ColumnApi, colId: string): number {\r\n    return api.getAllColumns().findIndex(col => col.getColId() === colId);\r\n  }\r\n  paintCells(params: any,  changesMap: Map<number, Map<string, number>>, )\r\n  {\r\n    const row = this.gridApi.getDisplayedRowAtIndex(params.rowIndex);\r\n\r\n    this.changeCellStyleColumns(params,changesMap,'#E8F1DE');\r\n    this.gridApi.redrawRows({rowNodes: [row]});\r\n    this.changeCellStyleColumns(params,changesMap,'#FFFFFF'); \r\n    // We will define cellStyle white to future modifications (like filter)\r\n  }\r\n\r\n  changeCellStyleColumns(params: any, changesMap: Map<number, Map<string, number>>, color: string){\r\n\r\n    for (const key of changesMap.get(params.node.id).keys())\r\n    {\r\n      const columnNumber = this.getColumnIndexByColId(this.gridColumnApi, key);\r\n      this.gridColumnApi.columnController.gridColumns[columnNumber].colDef.cellStyle = {backgroundColor: color};\r\n    }\r\n\r\n\r\n  }\r\n\r\n}\r\n","import { ICellRendererAngularComp } from '@ag-grid-community/angular';\nimport { Component, OnDestroy } from '@angular/core';\n\n@Component({\n  selector: 'app-btn-edit-rendered',\n  template: `<button mat-mini-fab class=\"buttonEdit\"  type=\"button\"  (click)=\"btnClickedHandler($event)\" >\n  <mat-icon class=\"iconEdit\"   fontSet=\"material-icons-round\" > edit </mat-icon>\n</button> `,\n  styles: [`.buttonEdit{color:#000;background-color:#ddd;width:20px;margin-top:3px;height:20px;box-shadow:none}.iconEdit{font-size:13px;margin-top:-10px;margin-left:-2px}`]\n})\nexport class BtnEditRenderedComponent implements ICellRendererAngularComp, OnDestroy {\n\n  public params: any;\n\n  agInit(params: any): void {\n    this.params = params;\n  }\n\n  refresh(params: any): boolean {\n    return true;\n  }\n\n  btnClickedHandler($event) {\n    this.params.clicked(this.params.value);\n  }\n\n  getParams(){\n    return this.params;\n  }\n\n  ngOnDestroy() {\n    // no need to remove the button click handler \n  }\n\n}\n","import { NgModule } from '@angular/core';\r\n\r\nimport { FormsModule } from '@angular/forms';\r\nimport { CommonModule } from '@angular/common';\r\nimport {HttpClientModule, HttpClient, HTTP_INTERCEPTORS} from '@angular/common/http';\r\nimport { BrowserAnimationsModule, NoopAnimationsModule } from '@angular/platform-browser/animations';\r\nimport { RouterModule, Routes } from '@angular/router';\r\n\r\n//import * as ol from 'openlayers';\r\nimport {TranslateModule, TranslateLoader,TranslateService} from '@ngx-translate/core';\r\n\r\n\r\nimport { AngularHalModule } from '@sitmun/frontend-core';\r\n\r\n\r\nimport { ReactiveFormsModule } from '@angular/forms';\r\n\r\nimport {SitmunFrontendCoreModule} from '@sitmun/frontend-core';\r\nimport { DataGridComponent } from './data-grid/data-grid.component';\r\nimport { AgGridModule } from '@ag-grid-community/angular';\r\nimport { MatButtonModule } from '@angular/material/button';\r\nimport {MatIconModule} from '@angular/material/icon';\r\nimport {MatMenuModule} from '@angular/material/menu';\r\nimport { BtnEditRenderedComponent } from './btn-edit-rendered/btn-edit-rendered.component';\r\n\r\n\r\n\r\n\r\n/** SITMUN plugin core module */\r\n@NgModule({\r\n  imports: [\r\n    RouterModule,\r\n    HttpClientModule,\r\n    CommonModule,\r\n    FormsModule,\r\n    NoopAnimationsModule,\r\n    AngularHalModule,\r\n    ReactiveFormsModule,\r\n    BrowserAnimationsModule,\r\n    AgGridModule.withComponents([]),\r\n    SitmunFrontendCoreModule,\r\n    MatButtonModule,\r\n    MatIconModule,\r\n    MatMenuModule\r\n \r\n  ],\r\n  declarations: [\r\n    DataGridComponent,\r\n    BtnEditRenderedComponent,\r\n  ],\r\n  entryComponents: [\r\n  ],\r\n  providers: [\r\n  ],\r\n  exports: [\r\n    HttpClientModule,\r\n    CommonModule,\r\n    FormsModule,\r\n    NoopAnimationsModule,\r\n    AngularHalModule,\r\n    TranslateModule,\r\n    ReactiveFormsModule,\r\n    DataGridComponent,\r\n    SitmunFrontendCoreModule\r\n  ]\r\n})\r\nexport class SitmunFrontendGuiModule {\r\n}\r\n"],"names":["DataGridComponent","prototype","ngOnInit","_this","this","eventRefreshSubscription","_eventRefreshSubscription","subscribe","getElements","onGridReady","params","singleSelection","gridOptions","rowSelection","gridApi","api","gridColumnApi","columnApi","sizeColumnsToFit","_a","tslib_1.__values","columnDefs","_b","next","done","value","field","statusColumn","duplicateSelectedRows","selectedData","getSelectedNodes","map","node","data","duplicate","emit","getColumnKeysAndHeaders","columnkeys","header","length","allColumnKeys","getAllDisplayedColumns","console","log","forEach","element","userProvidedColDef","headerName","push","join","exportData","customHeader","onlySelected","columnKeys","skipHeader","exportDataAsCsv","quickSearch","setQuickFilter","searchValue","getAll","items","rowData","setTimeout","setRowData","removeData","stopEditing","selectedNodes","remove","selectedRows","rowIndex","selectedRows_1","selectedRows_1_1","id","getRowNode","estat","refreshCells","deselectAll","newData","new","applyChanges","itemsChanged","changesMap","keys","key","sendChanges","clear","changeCounter","previousChangeCounter","redoCounter","colDef","cellStyle","backgroundColor","redrawRows","deleteChanges","i","undoCellEditing","onFilterModified","undo","redo","redoCellEditing","onCellEditingStopped","e","modificationChange","onCellValueChanged","currentChanges","row","oldValue","has","get","set","addMap","Map","paintCells","delete","size","getDisplayedRowAtIndex","rowNodes","undoNoChanges","getColumnIndexByColId","colId","getAllColumns","findIndex","col","getColId","changeCellStyleColumns","color","columnNumber","columnController","gridColumns","Component","args","selector","template","styles","Input","Output","AllCommunityModules","EventEmitter","defaultColDef","sortable","flex","filter","editable","columnTypes","dateColumn","filterParams","comparator","filterLocalDateAtMidnight","cellValue","dateCellValue","Date","dateFilter","getTime","suppressMenu","singleClickEdit","BtnEditRenderedComponent","agInit","refresh","btnClickedHandler","$event","clicked","getParams","ngOnDestroy","NgModule","imports","RouterModule","HttpClientModule","CommonModule","FormsModule","NoopAnimationsModule","AngularHalModule","ReactiveFormsModule","BrowserAnimationsModule","AgGridModule","withComponents","SitmunFrontendCoreModule","MatButtonModule","MatIconModule","MatMenuModule","declarations","entryComponents","providers","exports","TranslateModule"],"mappings":"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"}