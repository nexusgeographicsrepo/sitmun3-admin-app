{"version":3,"sources":["ng://@sitmun/frontend-gui/data-grid/data-grid.component.ts","ng://@sitmun/frontend-gui/btn-edit-rendered/btn-edit-rendered.component.ts","ng://@sitmun/frontend-gui/sitmun-frontend-gui.module.ts"],"sourcesContent":["import { AgGridModule } from '@ag-grid-community/angular';\nimport { Component, OnInit, NgModule, Input, Output, EventEmitter } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { AllCommunityModules, Module } from '@ag-grid-community/all-modules';\n\n@Component({\n  selector: 'app-data-grid',\n  template: `    <div id=grup1 class=\"editDivBtns\">\r\n        <button  mat-mini-fab class=\"editBtn\"  *ngIf=\"discardChangesButton\"  id=\"borrarCanvis\" type=\"button\"  (click)=\"deleteChanges()\" [disabled]=\"changeCounter <= 0\">\r\n            <mat-icon  fontSet=\"material-icons-round\" > close </mat-icon>\r\n        </button>\r\n        <button mat-mini-fab class=\"editBtn\" *ngIf=\"undoButton\"  id=\"undo\"  (click)=\"undo()\" [disabled]=\"changeCounter <= 0\" >\r\n            <mat-icon fontSet=\"material-icons-round\" > undo </mat-icon>\r\n        </button>\r\n        <button mat-mini-fab class=\"editBtn\" *ngIf=\"redoButton\"  id=\"redo\"  (click)=\"redo()\" [disabled]=\"redoCounter <= 0\">\r\n            <mat-icon fontSet=\"material-icons-round\" > redo </mat-icon>\r\n        </button>\r\n        <button mat-mini-fab class=\"editBtn\" *ngIf=\"applyChangesButton\"  id=\"aplicarCanvis\"  (click)=\"applyChanges()\" [disabled]=\"changeCounter <= 0\" >\r\n            <mat-icon fontSet=\"material-icons-round\" > check </mat-icon>\r\n        </button>\r\n    </div>\r\n\r\n    <div id=grup2 class=\"actionsDivBtns\" >\r\n        <label *ngIf=\"globalSearch\" [translate]=\"'Search'\"> </label>\r\n        <input *ngIf=\"globalSearch\"type=\"text\" class=\"searchGenericInput\" placeholder=\"\" (keyup)=\"quickSearch()\" [(ngModel)]=\"searchValue\" ml-2 >\r\n        <button *ngIf=\"deleteButton\"  mat-stroked-button id=\"botoElimina\"  (click)=\"removeData()\">\r\n            <mat-icon fontSet=\"material-icons-round\" > delete </mat-icon>\r\n            <span  [translate]=\"'Remove'\"> </span>\r\n            \r\n        </button>\r\n        <button  *ngIf=\"newButton\" mat-stroked-button id=\"botoNou\"  (click)=\"newData()\">\r\n            <mat-icon fontSet=\"material-icons-round\"> add_circle_outline </mat-icon>      \r\n            <span  [translate]=\"'New'\"> </span>           \r\n        </button>\r\n\r\n\r\n        \r\n    </div>\r\n\r\n\r\n\r\n    <div class=\"row\" style=\" height: 100%\">\r\n        <div class=\"ag-theme-alpine\" id=\"myGrid\" style=\" width:100%; height: 100%\" >\r\n            <ag-grid-angular\r\n            style=\" width: 100%; height: 100%;\"\r\n            class=\"ag-theme-alpine\"\r\n            [floatingFilter]=\"true\"\r\n            [rowData]=\"rowData\"\r\n            [columnDefs]=\"columnDefs\"\r\n            [gridOptions]=\"gridOptions\"\r\n            [animateRows]=\"true\"\r\n            [pagination]=\"false\"\r\n            [modules]=\"modules\"     \r\n            [undoRedoCellEditing]=\"true\"    \r\n            [undoRedoCellEditingLimit]= 200\r\n            [suppressRowClickSelection]=true\r\n            [enableCellChangeFlash]=true\r\n            [frameworkComponents]=\"frameworkComponents\"\r\n            rowSelection=\"multiple\"\r\n            (filterModified)=\"onFilterModified()\"\r\n            (cellEditingStopped) =\"onCellEditingStopped($event)\"\r\n            (cellValueChanged)=\"onCellValueChanged($event)\"\r\n            (gridReady)=\"onGridReady($event)\">\r\n            \r\n            </ag-grid-angular>\r\n        </div>\r\n    </div>\r\n\r\n\r\n`,\n  styles: [`input,label{display:inline-block;margin:5px 5px 5px 10px}#botoNou{color:#fff;background:no-repeat padding-box #68a225;margin-left:3px}#botoElimina{background:no-repeat padding-box #fff;margin-left:3px}#aplicarCanvis{color:#fff!important;background:no-repeat padding-box #68a225;margin-left:3px}#aplicarCanvis[disabled]{background:no-repeat padding-box #83976c}#redo,#undo{color:#fff!important;background:#ff9300;margin-left:3px}#redo[disabled],#undo[disabled]{background:#ffc97f;margin-left:3px}#borrarCanvis{color:#fff!important;background:#df3133}#borrarCanvis[disabled]{color:#fff!important;background:#da8c8e}.editDivBtns{text-align:start;width:20%;height:30px!important;line-height:30px!important}.actionsDivBtns{text-align:end;width:80%;height:60px}.actionsDivBtns,.editDivBtns{display:inline-block!important}.actionsDivBtns .mat-stroked-button{padding:5px 20px!important}.editDivBtns .mat-mini-fab .mat-button-wrapper{padding:inherit!important;display:inherit!important}.editDivBtns .mat-icon{height:30px!important;bottom:5px;position:relative}.editDivBtns .mat-mini-fab{width:30px;height:30px}.actionsDivBtns .searchGenericInput{height:45px!important;width:50%!important}`]\n})\nexport class DataGridComponent {\n \n\n\n\n  modules: Module[] = AllCommunityModules;\n  searchValue: string;\n  private gridApi;\n  private gridColumnApi;\n  statusColumn = false;\n  map: Map<number, number> = new Map<number, number>(); // Guardaremos el id de las celas modificadas i el nÂº de ediciones hechas sobre estas\n  private params; //Parametros del grid en la ultima modificacion hecha (por si hacemos apply changes)\n  rowData: any[];\n  changeCounter: number; // Numero de ediciones hechas sobre las celas\n  previousChangeCounter: number; //  Numero de ediciones que habia antes de hacer la ultima modificacion (changeCounter)\n  redoCounter: number; // Numero de redo que podemos hacer\n  modificationChange = false;\n  gridOptions;\n  @Input() frameworkComponents: any;\n  @Input() columnDefs: any[];\n  @Input() getAll: () => Observable<any>;\n  @Input() discardChangesButton: boolean;\n  @Input() undoButton: boolean;\n  @Input() redoButton: boolean;\n  @Input() applyChangesButton: boolean;\n  @Input() deleteButton: boolean;\n  @Input() newButton: boolean;\n  @Input() globalSearch: boolean;\n\n\n\n  @Output() remove: EventEmitter<any[]>;\n  @Output() new: EventEmitter<number>;\n  @Output() sendChanges: EventEmitter<any[]>;\n\n\n  constructor() {\n\n    this.remove = new EventEmitter();\n    this.new = new EventEmitter();\n    this.sendChanges = new EventEmitter();\n    this.changeCounter = 0;\n    this.previousChangeCounter = 0;\n    this.redoCounter = 0;\n    this.gridOptions = {\n      defaultColDef: {\n        sortable: true,\n        flex: 1,\n        filter: true,\n        editable: true,\n        cellStyle: {backgroundColor: '#FFFFFF'},\n      },\n      rowSelection: 'multiple',\n      // suppressHorizontalScroll: true,\n\n    };\n\n  }\n\n\n\n  onGridReady(params): void{\n    this.params = params;\n    this.gridApi = params.api;\n    this.gridColumnApi = params.columnApi;\n    this.getElements();\n    this.gridApi.sizeColumnsToFit();\n    for (const col of this.columnDefs) {\n      if (col.field === 'estat') {\n        this.statusColumn = true;\n      }\n    }\n \n   \n\n  }\n\n  quickSearch(): void{\n      this.gridApi.setQuickFilter(this.searchValue);\n  }\n\n  getElements(): void\n  {\n    this.getAll()\n    .subscribe((items) => {\n        console.log(items);\n        this.rowData = items;\n        setTimeout(()=>{this.gridApi.sizeColumnsToFit()}, 30);\n    });\n  }\n\n  removeData(): void {\n    this.gridApi.stopEditing(false);\n    const selectedNodes = this.gridApi.getSelectedNodes();\n    const selectedData = selectedNodes.map(node => node.data);\n    this.remove.emit(selectedData);\n\n    if(this.statusColumn)\n    {\n      const selectedRows = selectedNodes.map(node => node.rowIndex);\n\n      for (const id of selectedRows){\n          this.gridApi.getRowNode(id).data.estat ='Eliminat';\n        }\n      this.gridOptions.api.refreshCells();\n    }\n    this.gridOptions.api.deselectAll();\n  }\n\n\n\n\n\n  newData(): void\n  {\n    this.gridApi.stopEditing(false);\n    this.new.emit(-1);\n  }\n\n  applyChanges(): void\n  {\n    const itemsChanged: any[] = [];\n    this.gridApi.stopEditing(false);\n    for (const key of this.map.keys())\n    {\n      itemsChanged.push(this.gridApi.getRowNode(key).data);\n    }\n    this.sendChanges.emit(itemsChanged);\n    this.map.clear();\n    this.changeCounter = 0;\n    this.previousChangeCounter = 0;\n    this.redoCounter = 0;\n    this.params.colDef.cellStyle =  {backgroundColor: '#FFFFFF'};\n    this.gridApi.redrawRows();\n  }\n\n\n\n  deleteChanges(): void\n  {\n    for (let i = 0; i < this.changeCounter; i++)\n    {\n      this.gridApi.undoCellEditing();\n    }\n    this.map.clear();\n    this.previousChangeCounter = 0;\n    this.changeCounter = 0;\n    this.redoCounter = 0;\n    this.params.colDef.cellStyle =  {backgroundColor: '#FFFFFF'};\n    this.gridApi.redrawRows();\n  }\n\n\n  onFilterModified(): void{\n    this.deleteChanges();\n  }\n\n\n  undo(): void {\n    this.gridApi.stopEditing(false);\n    this.gridApi.undoCellEditing();\n    this.changeCounter -= 1;\n    this.redoCounter += 1;\n  }\n\n  redo(): void {\n    this.gridApi.stopEditing(false);\n    this.gridApi.redoCellEditing();\n    this.changeCounter += 1;\n    this.redoCounter -= 1;\n  }\n\n\n  onCellEditingStopped(e)\n  {\n      if (this.modificationChange)\n      {\n        this.changeCounter++;\n        this.redoCounter = 0;\n        this.onCellValueChanged(e);\n        this.modificationChange = false;\n      }\n  }\n\n\n\n  onCellValueChanged(params): void{\n    this.params = params; // Guardaremos los parametros por si hay que hacer un apply changes\n\n    if (this.changeCounter > this.previousChangeCounter)\n      // Esta condiciÃ³n serÃ¡ cierta si venimos de editar la cela o de hacer un redo\n      {\n        if (params.oldValue !== params.value && !(params.oldValue == null && params.value === ''))\n        {\n          if (! this.map.has(params.node.id)) // Si no habiamos editado la cela con anterioridad, la aÃ±adimos al map y la pintamos de verde\n          {\n            this.map.set(params.node.id, 1);\n          }\n          else{\n             // Si ya habÃ­amos modificado la cela, aumentamos el numero de cambios en esta\n            const currentChanges = this.map.get(params.node.id);\n            this.map.set(params.node.id, (currentChanges + 1));\n          }\n          const row = this.gridApi.getDisplayedRowAtIndex(params.rowIndex); // Com ha estado modificada la linia, la pintamos de verde\n          params.colDef.cellStyle = {backgroundColor: '#E8F1DE'};\n          this.gridApi.redrawRows({rowNodes: [row]});\n          params.colDef.cellStyle = {backgroundColor: '#FFFFFF'}; // Definiremos el cellStyle blanco para futuras modificaciones internas (ej: filtro)\n          this.previousChangeCounter++;\n        }\n\n      }\n    else if (this.changeCounter < this.previousChangeCounter){ // EntrarÃ¡ aquÃ­ si hemos hecho un undo\n        \n        const currentChanges = this.map.get(params.node.id);\n        \n        if (currentChanges === 1) {\n          // Si solo tiene una modificacion, quiere decir que la cela estÃ¡ en su estado inicial, por lo que la pintamos de blanco\n          this.map.delete(params.node.id);\n          const row = this.gridApi.getDisplayedRowAtIndex(params.rowIndex);\n          params.colDef.cellStyle = {backgroundColor: '#FFFFFF'}; // Li posarem un altre cop el background blanc\n          this.gridApi.redrawRows({rowNodes: [row]});\n        }\n        else if (currentChanges >1) // La cela aÃºn no estÃ¡ en su estado inicial, por lo que segguirÃ¡ verde\n        {                                 // No podemos hacer else por si hacemos un undo de una cela sin cambios\n          this.map.set(params.node.id, (currentChanges - 1));\n          const row = this.gridApi.getDisplayedRowAtIndex(params.rowIndex); // Como aun tiene cambios, el background tiene que seguir verde\n          params.colDef.cellStyle = {backgroundColor: '#E8F1DE'};\n          this.gridApi.redrawRows({rowNodes: [row]});\n          params.colDef.cellStyle = {backgroundColor: '#FFFFFF'}; // Definirem el cellStyle blanc per proximes celes\n        }\n        this.previousChangeCounter--;  // Com veniem d'undo, hem de decrementar el comptador de canvisAnterior\n    }\n    else{\n      console.log(params);\n      if(params.oldValue !== params.value && !(params.oldValue == null && params.value === '') )\n      {\n        this.modificationChange = true;\n      }\n      else{\n        if ( this.map.has(params.node.id))\n        {\n          const row = this.gridApi.getDisplayedRowAtIndex(params.rowIndex); // Com encara te modificacions, ha de tenir el background verd\n          params.colDef.cellStyle = {backgroundColor: '#E8F1DE'};\n          this.gridApi.redrawRows({rowNodes: [row]});\n          params.colDef.cellStyle = {backgroundColor: '#FFFFFF'}; // Definiremos el cellStyle blanco para futuras modificaciones internas (ej: filtro)\n\n        }\n        else {\n          this.previousChangeCounter++; // Como al hacer undo volverÃ¡ a entrar a esta misma funciÃ³n, hay que enviarlo a su if correspondiente\n          this.gridApi.undoCellEditing(); //Undo para deshacer el cambio sin modificaciones internamente\n        }\n\n      }\n\n    }\n  }\n}\n","import { ICellRendererAngularComp } from '@ag-grid-community/angular';\nimport { Component, OnDestroy } from '@angular/core';\n\n@Component({\n  selector: 'app-btn-edit-rendered',\n  template: `<button mat-mini-fab class=\"buttonEdit\"  type=\"button\"  (click)=\"btnClickedHandler($event)\" >\n  <mat-icon class=\"iconEdit\"   fontSet=\"material-icons-round\" > edit </mat-icon>\n</button> `,\n  styles: [`.buttonEdit{color:#000;background-color:#ddd;width:24px;height:24px}.iconEdit{font-size:16px;margin-top:-8px}`]\n})\nexport class BtnEditRenderedComponent implements ICellRendererAngularComp, OnDestroy {\n\n  public params: any;\n\n  agInit(params: any): void {\n    this.params = params;\n  }\n\n  refresh(params: any): boolean {\n    return true;\n  }\n\n  btnClickedHandler($event) {\n    this.params.clicked(this.params.value);\n  }\n\n  getParams(){\n    return this.params;\n  }\n\n  ngOnDestroy() {\n    // no need to remove the button click handler \n  }\n\n}\n","import { NgModule } from '@angular/core';\r\n\r\nimport { FormsModule } from '@angular/forms';\r\nimport { CommonModule } from '@angular/common';\r\nimport {HttpClientModule, HttpClient, HTTP_INTERCEPTORS} from '@angular/common/http';\r\nimport { BrowserAnimationsModule, NoopAnimationsModule } from '@angular/platform-browser/animations';\r\nimport { RouterModule, Routes } from '@angular/router';\r\n\r\n//import * as ol from 'openlayers';\r\nimport {TranslateModule, TranslateLoader,TranslateService} from '@ngx-translate/core';\r\n\r\n\r\nimport { AngularHalModule } from '@sitmun/frontend-core';\r\n\r\n\r\nimport { ReactiveFormsModule } from '@angular/forms';\r\n\r\nimport {SitmunFrontendCoreModule} from '@sitmun/frontend-core';\r\nimport { DataGridComponent } from './data-grid/data-grid.component';\r\nimport { AgGridModule } from '@ag-grid-community/angular';\r\nimport { MatButtonModule } from '@angular/material/button';\r\nimport {MatIconModule} from '@angular/material/icon';\r\nimport { BtnEditRenderedComponent } from './btn-edit-rendered/btn-edit-rendered.component';\r\n\r\n\r\n\r\n\r\n/** SITMUN plugin core module */\r\n@NgModule({\r\n  imports: [\r\n    RouterModule,\r\n    HttpClientModule,\r\n    CommonModule,\r\n    FormsModule,\r\n    NoopAnimationsModule,\r\n    AngularHalModule,\r\n    ReactiveFormsModule,\r\n    BrowserAnimationsModule,\r\n    AgGridModule.withComponents([]),\r\n    SitmunFrontendCoreModule,\r\n    MatButtonModule,\r\n    MatIconModule,\r\n \r\n  ],\r\n  declarations: [\r\n    DataGridComponent,\r\n    BtnEditRenderedComponent,\r\n  ],\r\n  entryComponents: [\r\n  ],\r\n  providers: [\r\n  ],\r\n  exports: [\r\n    HttpClientModule,\r\n    CommonModule,\r\n    FormsModule,\r\n    NoopAnimationsModule,\r\n    AngularHalModule,\r\n    TranslateModule,\r\n    ReactiveFormsModule,\r\n    DataGridComponent,\r\n    SitmunFrontendCoreModule\r\n  ]\r\n})\r\nexport class SitmunFrontendGuiModule {\r\n}\r\n"],"names":["DataGridComponent","prototype","onGridReady","params","this","gridApi","api","gridColumnApi","columnApi","getElements","sizeColumnsToFit","_a","tslib_1.__values","columnDefs","_b","next","done","value","field","statusColumn","quickSearch","setQuickFilter","searchValue","_this","getAll","subscribe","items","console","log","rowData","setTimeout","removeData","stopEditing","selectedNodes","getSelectedNodes","selectedData","map","node","data","remove","emit","selectedRows","rowIndex","selectedRows_1","selectedRows_1_1","id","getRowNode","estat","gridOptions","refreshCells","deselectAll","newData","new","applyChanges","itemsChanged","keys","key","push","sendChanges","clear","changeCounter","previousChangeCounter","redoCounter","colDef","cellStyle","backgroundColor","redrawRows","deleteChanges","i","undoCellEditing","onFilterModified","undo","redo","redoCellEditing","onCellEditingStopped","e","modificationChange","onCellValueChanged","currentChanges","row","oldValue","has","get","set","getDisplayedRowAtIndex","rowNodes","delete","Component","args","selector","template","styles","Input","Output","AllCommunityModules","Map","EventEmitter","defaultColDef","sortable","flex","filter","editable","rowSelection","BtnEditRenderedComponent","agInit","refresh","btnClickedHandler","$event","clicked","getParams","ngOnDestroy","NgModule","imports","RouterModule","HttpClientModule","CommonModule","FormsModule","NoopAnimationsModule","AngularHalModule","ReactiveFormsModule","BrowserAnimationsModule","AgGridModule","withComponents","SitmunFrontendCoreModule","MatButtonModule","MatIconModule","declarations","entryComponents","providers","exports","TranslateModule"],"mappings":"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"}