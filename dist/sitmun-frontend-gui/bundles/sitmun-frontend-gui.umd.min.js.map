{"version":3,"sources":["ng://@sitmun/frontend-gui/data-grid/data-grid.component.ts","ng://@sitmun/frontend-gui/btn-edit-rendered/btn-edit-rendered.component.ts","ng://@sitmun/frontend-gui/sitmun-frontend-gui.module.ts"],"sourcesContent":["import { AgGridModule } from '@ag-grid-community/angular';\r\nimport { Component, OnInit, NgModule, Input, Output, EventEmitter } from '@angular/core';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { Observable } from 'rxjs';\r\nimport { map } from 'rxjs/operators';\r\nimport { AllCommunityModules, ColumnApi, Module } from '@ag-grid-community/all-modules';\r\n\r\n@Component({\r\n  selector: 'app-data-grid',\r\n  template: `    <div id=grup1 class=\"editDivBtns\">\r\n        <button  mat-mini-fab class=\"editBtn\"  *ngIf=\"discardChangesButton\"  id=\"deleteChangesButton\" type=\"button\"  (click)=\"deleteChanges()\" [disabled]=\"changeCounter <= 0\">\r\n            <mat-icon  fontSet=\"material-icons-round\" > close </mat-icon>\r\n        </button>\r\n        <button mat-mini-fab class=\"editBtn\" *ngIf=\"undoButton\"  id=\"undo\"  (click)=\"undo()\" [disabled]=\"changeCounter <= 0\" >\r\n            <mat-icon fontSet=\"material-icons-round\" > undo </mat-icon>\r\n        </button>\r\n        <button mat-mini-fab class=\"editBtn\" *ngIf=\"redoButton\"  id=\"redo\"  (click)=\"redo()\" [disabled]=\"redoCounter <= 0\">\r\n            <mat-icon fontSet=\"material-icons-round\" > redo </mat-icon>\r\n        </button>\r\n        <button mat-mini-fab class=\"editBtn\" *ngIf=\"applyChangesButton\"  id=\"applyChangesButton\"  (click)=\"applyChanges()\" [disabled]=\"changeCounter <= 0\" >\r\n            <mat-icon fontSet=\"material-icons-round\" > check </mat-icon>\r\n        </button>\r\n    </div>\r\n\r\n    <div id=grup2 class=\"actionsDivBtns\" >\r\n        <label *ngIf=\"globalSearch\" [translate]=\"'Search'\"> </label>\r\n        <input *ngIf=\"globalSearch\"type=\"text\" class=\"searchGenericInput\" placeholder=\"\" (keyup)=\"quickSearch()\" [(ngModel)]=\"searchValue\" ml-2 >\r\n        <button *ngIf=\"deleteButton\"  mat-stroked-button id=\"deleteButton\"  (click)=\"removeData()\">\r\n            <mat-icon fontSet=\"material-icons-round\" > delete </mat-icon>\r\n            <span  [translate]=\"'Remove'\"> </span>\r\n            \r\n        </button>\r\n\r\n        \r\n        <button  mat-stroked-button [matMenuTriggerFor]=\"menu\" id=\"actionButton\">\r\n            <span  [translate]=\"'Actions'\"> </span>    \r\n            <mat-icon fontSet=\"material-icons-round\" > keyboard_arrow_down </mat-icon>     \r\n        </button>\r\n        <mat-menu #menu=\"matMenu\">\r\n            <button mat-menu-item (click)=\"exportData()\" > {{\"Export\" | translate}} </button>\r\n            <button mat-menu-item> {{\"Duplicate\" | translate}}</button>\r\n            <button mat-menu-item> {{\"Search/Replace\" | translate}}</button>\r\n        </mat-menu>  \r\n            \r\n\r\n        <button  *ngIf=\"newButton\" mat-stroked-button id=\"newButton\"  (click)=\"newData()\">\r\n            <mat-icon fontSet=\"material-icons-round\"> add_circle_outline </mat-icon>      \r\n            <span  [translate]=\"'New'\"> </span>           \r\n        </button>\r\n\r\n        <button  *ngIf=\"!newButton\" mat-stroked-button id=\"newButton\"  (click)=\"newData()\">\r\n            <mat-icon fontSet=\"material-icons-round\"> add_circle_outline </mat-icon>      \r\n            <span  [translate]=\"'Add'\"> </span>           \r\n        </button>\r\n        \r\n\r\n        \r\n    </div>\r\n\r\n\r\n\r\n    <div class=\"row\" style=\" height: 100%\">\r\n        <div id=\"myGrid\" style=\" width:100%; height: 100%\" >\r\n            <ag-grid-angular\r\n            style=\" width: 100%; height: 100%;\"\r\n            [class]=\"themeGrid\"\r\n            [floatingFilter]=\"true\"\r\n            [rowData]=\"rowData\"\r\n            [columnDefs]=\"columnDefs\"\r\n            [gridOptions]=\"gridOptions\"\r\n            [animateRows]=\"true\"\r\n            [pagination]=\"false\"\r\n            [modules]=\"modules\"     \r\n            [undoRedoCellEditing]=\"true\"    \r\n            [undoRedoCellEditingLimit]= 200\r\n            [suppressRowClickSelection]=true\r\n            [enableCellChangeFlash]=true\r\n            [frameworkComponents]=\"frameworkComponents\"\r\n            rowSelection=\"multiple\"\r\n            (filterModified)=\"onFilterModified()\"\r\n            (cellEditingStopped) =\"onCellEditingStopped($event)\"\r\n            (cellValueChanged)=\"onCellValueChanged($event)\"\r\n            (gridReady)=\"onGridReady($event)\">\r\n            \r\n            </ag-grid-angular>\r\n        </div>\r\n    </div>\r\n\r\n\r\n`,\r\n  styles: [`input,label{display:inline-block;margin:5px 5px 5px 10px}#newButton{color:#fff;background:no-repeat padding-box #68a225;margin-left:3px}#deleteButton{background:no-repeat padding-box #fff;margin-left:3px}#actionButton{background:no-repeat padding-box #fff;margin-left:3px;text-align:center!important}#applyChangesButton{color:#fff!important;background:no-repeat padding-box #68a225;margin-left:3px}#applyChangesButton[disabled]{background:no-repeat padding-box #83976c}#redo,#undo{color:#fff!important;background:#ff9300;margin-left:3px}#redo[disabled],#undo[disabled]{background:#ffc97f;margin-left:3px}#deleteChangesButton{color:#fff!important;background:#df3133}#deleteChangesButton[disabled]{color:#fff!important;background:#da8c8e}.editDivBtns{text-align:start;width:20%;height:30px!important;line-height:30px!important}.actionsDivBtns{text-align:end;width:80%;height:60px}.actionsDivBtns,.editDivBtns{display:inline-block!important}.actionsDivBtns .mat-stroked-button{padding:5px 20px!important}.editDivBtns .mat-mini-fab .mat-button-wrapper{padding:inherit!important;display:inherit!important}.editDivBtns .mat-icon{height:30px!important;bottom:5px;position:relative}.editDivBtns .mat-mini-fab{width:30px;height:30px}.actionsDivBtns .searchGenericInput{height:45px!important;width:45%!important}.ag-body-viewport.ag-layout-normal ::-webkit-scrollbar-thumb{background:#eee}â .ag-body-viewport.ag-layout-normal ::-webkit-scrollbar{width:2em;height:2em}.ag-body-viewport.ag-layout-normal ::-webkit-scrollbar-button{background:#ccc}.ag-body-viewport.ag-layout-normal::-webkit-scrollbar-track-piece{background:#888}`]\r\n})\r\nexport class DataGridComponent {\r\n \r\n\r\n  modules: Module[] = AllCommunityModules;\r\n  searchValue: string;\r\n  private gridApi;\r\n  private gridColumnApi;\r\n  statusColumn = false;\r\n  changesMap: Map<number, Map<string, number>> = new Map<number, Map<string, number>>();\r\n   // Guardaremos id de las celas modificadas i el nÂº de ediciones hechas sobre estas\r\n  private params; // Parametros del grid en la ultima modificacion hecha (por si hacemos apply changes)\r\n  rowData: any[];\r\n  changeCounter: number; // Numero de ediciones hechas sobre las celas\r\n  previousChangeCounter: number; //  Numero de ediciones que habia antes de hacer la ultima modificacion (changeCounter)\r\n  redoCounter: number; // Numero de redo que podemos hacer\r\n  modificationChange = false;\r\n  undoNoChanges = false; // Booleano para saber si es un undo provocado por un cambio sin modificaciones\r\n  gridOptions;\r\n  @Input() frameworkComponents: any;\r\n  @Input() columnDefs: any[];\r\n  @Input() getAll: () => Observable<any>;\r\n  @Input() discardChangesButton: boolean;\r\n  @Input() undoButton: boolean;\r\n  @Input() redoButton: boolean;\r\n  @Input() applyChangesButton: boolean;\r\n  @Input() deleteButton: boolean;\r\n  @Input() newButton: boolean;\r\n  @Input() globalSearch: boolean;\r\n  @Input() themeGrid: any;\r\n\r\n\r\n  @Output() remove: EventEmitter<any[]>;\r\n  @Output() new: EventEmitter<number>;\r\n  @Output() sendChanges: EventEmitter<any[]>;\r\n\r\n\r\n  constructor() {\r\n\r\n    this.remove = new EventEmitter();\r\n    this.new = new EventEmitter();\r\n    this.sendChanges = new EventEmitter();\r\n    this.changeCounter = 0;\r\n    this.previousChangeCounter = 0;\r\n    this.redoCounter = 0;\r\n    this.gridOptions = {\r\n      defaultColDef: {\r\n        sortable: true,\r\n        flex: 1,\r\n        filter: true,\r\n        editable: true,\r\n        cellStyle: {backgroundColor: '#FFFFFF'},\r\n      },\r\n      columnTypes: {\r\n        dateColumn: {\r\n            filter: 'agDateColumnFilter',\r\n            filterParams: {\r\n              comparator(filterLocalDateAtMidnight, cellValue) {\r\n                const dateCellValue = new Date(cellValue);\r\n                const dateFilter = new Date(filterLocalDateAtMidnight);\r\n\r\n                if (dateCellValue.getTime() < dateFilter.getTime()) {\r\n                  return -1;\r\n                } else if (dateCellValue.getTime()  > dateFilter.getTime()) {\r\n                  return 1;\r\n                } else {\r\n                  return 0;\r\n                }\r\n              },\r\n            },\r\n            suppressMenu: true\r\n        }\r\n    },\r\n      rowSelection: 'multiple',\r\n      singleClickEdit: true,\r\n      // suppressHorizontalScroll: true,\r\n\r\n    };\r\n\r\n  }\r\n\r\n\r\n\r\n  onGridReady(params): void{\r\n    this.params = params;\r\n    this.gridApi = params.api;\r\n    this.gridColumnApi = params.columnApi;\r\n    this.getElements();\r\n    this.gridApi.sizeColumnsToFit();\r\n    for (const col of this.columnDefs) {\r\n      if (col.field === 'estat') {\r\n        this.statusColumn = true;\r\n      }\r\n    }\r\n \r\n   \r\n\r\n  }\r\n\r\n  exportData(): void{\r\n    let params = {\r\n      onlySelected: true\r\n    };\r\n    this.gridApi.exportDataAsCsv(params);\r\n  }\r\n\r\n  quickSearch(): void{\r\n      this.gridApi.setQuickFilter(this.searchValue);\r\n  }\r\n\r\n  getElements(): void\r\n  {\r\n    this.getAll()\r\n    .subscribe((items) => {\r\n        console.log(items);\r\n        this.rowData = items;\r\n        setTimeout(()=>{this.gridApi.sizeColumnsToFit()}, 30);\r\n    });\r\n  }\r\n\r\n  removeData(): void {\r\n    this.gridApi.stopEditing(false);\r\n    const selectedNodes = this.gridApi.getSelectedNodes();\r\n    const selectedData = selectedNodes.map(node => node.data);\r\n    this.remove.emit(selectedData);\r\n\r\n    if(this.statusColumn)\r\n    {\r\n      const selectedRows = selectedNodes.map(node => node.rowIndex);\r\n\r\n      for (const id of selectedRows){\r\n          this.gridApi.getRowNode(id).data.estat ='Eliminat';\r\n        }\r\n      this.gridOptions.api.refreshCells();\r\n    }\r\n    this.gridOptions.api.deselectAll();\r\n  }\r\n\r\n  newData(): void\r\n  {\r\n    this.gridApi.stopEditing(false);\r\n    this.new.emit(-1);\r\n  }\r\n\r\n\r\n  applyChanges(): void\r\n  {\r\n    const itemsChanged: any[] = [];\r\n    this.gridApi.stopEditing(false);\r\n    for (const key of this.changesMap.keys())\r\n    {\r\n      itemsChanged.push(this.gridApi.getRowNode(key).data);\r\n    }\r\n    this.sendChanges.emit(itemsChanged);\r\n    this.changesMap.clear();\r\n    this.changeCounter = 0;\r\n    this.previousChangeCounter = 0;\r\n    this.redoCounter = 0;\r\n    this.params.colDef.cellStyle =  {backgroundColor: '#FFFFFF'};\r\n    this.gridApi.redrawRows();\r\n  }\r\n\r\n\r\n\r\n  deleteChanges(): void\r\n  {\r\n    for (let i = 0; i < this.changeCounter; i++)\r\n    {\r\n      this.gridApi.undoCellEditing();\r\n    }\r\n    this.changesMap.clear();\r\n    this.previousChangeCounter = 0;\r\n    this.changeCounter = 0;\r\n    this.redoCounter = 0;\r\n    this.params.colDef.cellStyle =  {backgroundColor: '#FFFFFF'};\r\n    this.gridApi.redrawRows();\r\n  }\r\n\r\n\r\n  onFilterModified(): void{\r\n    this.deleteChanges();\r\n  }\r\n\r\n\r\n  undo(): void {\r\n    this.gridApi.stopEditing(false);\r\n    this.gridApi.undoCellEditing();\r\n    this.changeCounter -= 1;\r\n    this.redoCounter += 1;\r\n  }\r\n\r\n  redo(): void {\r\n    this.gridApi.stopEditing(false);\r\n    this.gridApi.redoCellEditing();\r\n    this.changeCounter += 1;\r\n    this.redoCounter -= 1;\r\n  }\r\n\r\n\r\n  onCellEditingStopped(e)\r\n  {\r\n      if (this.modificationChange)\r\n      {\r\n        this.changeCounter++;\r\n        this.redoCounter = 0;\r\n        this.onCellValueChanged(e);\r\n        this.modificationChange = false;\r\n      }\r\n  }\r\n\r\n\r\n  onCellValueChanged(params): void{\r\n\r\n    this.params = params; // Guardaremos los parametros por si hay que hacer un apply changes\r\n    if (this.changeCounter > this.previousChangeCounter)\r\n      // Esta condiciÃ³n serÃ¡ cierta si venimos de editar la cela o de hacer un redo\r\n      {\r\n\r\n        if (params.oldValue !== params.value && !(params.oldValue == null && params.value === ''))\r\n        {\r\n          \r\n          if (! this.changesMap.has(params.node.id)) // Si no habiamos editado la cela con anterioridad, la aÃ±adimos al map y la pintamos de verde\r\n          {\r\n            const addMap: Map<string, number> = new Map<string, number>();\r\n            addMap.set(params.colDef.field, 1)\r\n            this.changesMap.set(params.node.id, addMap);\r\n          }\r\n          else{\r\n            if (! this.changesMap.get(params.node.id).has(params.colDef.field))\r\n            {\r\n\r\n              this.changesMap.get(params.node.id).set(params.colDef.field, 1);\r\n            }\r\n\r\n            else{\r\n              // Si ya habÃ­amos modificado la cela, aumentamos el numero de cambios en esta\r\n             const currentChanges = this.changesMap.get(params.node.id).get(params.colDef.field);\r\n             this.changesMap.get(params.node.id).set(params.colDef.field, (currentChanges + 1));\r\n           }\r\n\r\n          }\r\n          this.paintCells(params, this.changesMap); // Com ha estado modificada la linia, la pintamos de verde\r\n          this.previousChangeCounter++; //Igualamos el contador de cambios anterior al actual\r\n        }\r\n\r\n      }\r\n    else if (this.changeCounter < this.previousChangeCounter){ // EntrarÃ¡ aquÃ­ si hemos hecho un undo\r\n        let currentChanges = -1;\r\n        if (this.changesMap.has(params.node.id)) {currentChanges = this.changesMap.get(params.node.id).get(params.colDef.field);}\r\n        \r\n        if (currentChanges === 1) { //Al deshacer el cambio, la dejaremos en su estado inicial\r\n\r\n          this.changesMap.get(params.node.id).delete(params.colDef.field);\r\n          if(this.changesMap.get(params.node.id).size === 0) { // No hay mas modificaciones en eta fila\r\n            this.changesMap.delete(params.node.id);\r\n            const row = this.gridApi.getDisplayedRowAtIndex(params.rowIndex);\r\n\r\n            // Si solo tiene una modificacion, quiere decir que la cela estÃ¡ en su estado inicial, por lo que la pintamos de blanco\r\n            this.gridApi.redrawRows({rowNodes: [row]});\r\n\r\n           }\r\n           else\r\n           {\r\n              this.paintCells(params, this.changesMap);\r\n           }\r\n\r\n        }\r\n        else if (currentChanges >1) // La cela aÃºn no estÃ¡ en su estado inicial, por lo que segguirÃ¡ verde\r\n        {                                 // No podemos hacer else por si hacemos un undo de una cela sin cambios\r\n          this.changesMap.get(params.node.id).set(params.colDef.field, (currentChanges - 1));\r\n\r\n          this.paintCells(params, this.changesMap);// Como aun tiene cambios, el background tiene que seguir verde\r\n\r\n        }\r\n        this.previousChangeCounter--;  // Com veniem d'undo, hem de decrementar el comptador de canvisAnterior\r\n    }\r\n    else{ // Control de modificaciones en blanco\r\n      if(params.oldValue !== params.value && !(params.oldValue == null && params.value === '') ) // No es modificacion en blanco\r\n      {\r\n        this.modificationChange = true;\r\n      }\r\n      else{ \r\n        if ( this.changesMap.has(params.node.id)) // Modificacion en blanco sobre una cela modificada\r\n        {\r\n          if(!this.undoNoChanges)\r\n          {\r\n            this.gridApi.undoCellEditing(); // Undo para deshacer el cambio sin modificaciones internamente\r\n            this.undoNoChanges = true;\r\n            this.paintCells(params, this.changesMap);  // Como aun tiene modificaciones, el background sigue siendo verde\r\n          }\r\n          else { this.undoNoChanges = false; }\r\n\r\n\r\n        }\r\n        else {\r\n          // Como al hacer undo volverÃ¡ a entrar a esta misma funciÃ³n, hay que enviarlo a su if correspondiente\r\n          if(!this.undoNoChanges)\r\n          {\r\n            this.gridApi.undoCellEditing(); // Undo para deshacer el cambio sin modificaciones internamente\r\n            this.undoNoChanges = true;\r\n          }\r\n          else { this.undoNoChanges = false; }\r\n        }\r\n\r\n      }\r\n\r\n    }\r\n  }\r\n\r\n  getColumnIndexByColId(api: ColumnApi, colId: string): number {\r\n    return api.getAllColumns().findIndex(col => col.getColId() === colId);\r\n  }\r\n  paintCells(params: any,  changesMap: Map<number, Map<string, number>>, )\r\n  {\r\n    const row = this.gridApi.getDisplayedRowAtIndex(params.rowIndex);\r\n\r\n    this.changeCellStyleColumns(params,changesMap,'#E8F1DE');\r\n    this.gridApi.redrawRows({rowNodes: [row]});\r\n    this.changeCellStyleColumns(params,changesMap,'#FFFFFF'); \r\n    // Definiremos el cellStyle blanco para futuras modificaciones internas (ej: filtro)\r\n  }\r\n\r\n  changeCellStyleColumns(params: any, changesMap: Map<number, Map<string, number>>, color: string){\r\n\r\n    for (const key of changesMap.get(params.node.id).keys())\r\n    {\r\n      const columnNumber = this.getColumnIndexByColId(this.gridColumnApi, key);\r\n      this.gridColumnApi.columnController.gridColumns[columnNumber].colDef.cellStyle = {backgroundColor: color};\r\n    }\r\n\r\n\r\n  }\r\n\r\n}\r\n","import { ICellRendererAngularComp } from '@ag-grid-community/angular';\nimport { Component, OnDestroy } from '@angular/core';\n\n@Component({\n  selector: 'app-btn-edit-rendered',\n  template: `<button mat-mini-fab class=\"buttonEdit\"  type=\"button\"  (click)=\"btnClickedHandler($event)\" >\n  <mat-icon class=\"iconEdit\"   fontSet=\"material-icons-round\" > edit </mat-icon>\n</button> `,\n  styles: [`.buttonEdit{color:#000;background-color:#ddd;width:20px;margin-top:3px;height:20px;box-shadow:none}.iconEdit{font-size:13px;margin-top:-10px;margin-left:-2px}`]\n})\nexport class BtnEditRenderedComponent implements ICellRendererAngularComp, OnDestroy {\n\n  public params: any;\n\n  agInit(params: any): void {\n    this.params = params;\n  }\n\n  refresh(params: any): boolean {\n    return true;\n  }\n\n  btnClickedHandler($event) {\n    this.params.clicked(this.params.value);\n  }\n\n  getParams(){\n    return this.params;\n  }\n\n  ngOnDestroy() {\n    // no need to remove the button click handler \n  }\n\n}\n","import { NgModule } from '@angular/core';\r\n\r\nimport { FormsModule } from '@angular/forms';\r\nimport { CommonModule } from '@angular/common';\r\nimport {HttpClientModule, HttpClient, HTTP_INTERCEPTORS} from '@angular/common/http';\r\nimport { BrowserAnimationsModule, NoopAnimationsModule } from '@angular/platform-browser/animations';\r\nimport { RouterModule, Routes } from '@angular/router';\r\n\r\n//import * as ol from 'openlayers';\r\nimport {TranslateModule, TranslateLoader,TranslateService} from '@ngx-translate/core';\r\n\r\n\r\nimport { AngularHalModule } from '@sitmun/frontend-core';\r\n\r\n\r\nimport { ReactiveFormsModule } from '@angular/forms';\r\n\r\nimport {SitmunFrontendCoreModule} from '@sitmun/frontend-core';\r\nimport { DataGridComponent } from './data-grid/data-grid.component';\r\nimport { AgGridModule } from '@ag-grid-community/angular';\r\nimport { MatButtonModule } from '@angular/material/button';\r\nimport {MatIconModule} from '@angular/material/icon';\r\nimport {MatMenuModule} from '@angular/material/menu';\r\nimport { BtnEditRenderedComponent } from './btn-edit-rendered/btn-edit-rendered.component';\r\n\r\n\r\n\r\n\r\n/** SITMUN plugin core module */\r\n@NgModule({\r\n  imports: [\r\n    RouterModule,\r\n    HttpClientModule,\r\n    CommonModule,\r\n    FormsModule,\r\n    NoopAnimationsModule,\r\n    AngularHalModule,\r\n    ReactiveFormsModule,\r\n    BrowserAnimationsModule,\r\n    AgGridModule.withComponents([]),\r\n    SitmunFrontendCoreModule,\r\n    MatButtonModule,\r\n    MatIconModule,\r\n    MatMenuModule\r\n \r\n  ],\r\n  declarations: [\r\n    DataGridComponent,\r\n    BtnEditRenderedComponent,\r\n  ],\r\n  entryComponents: [\r\n  ],\r\n  providers: [\r\n  ],\r\n  exports: [\r\n    HttpClientModule,\r\n    CommonModule,\r\n    FormsModule,\r\n    NoopAnimationsModule,\r\n    AngularHalModule,\r\n    TranslateModule,\r\n    ReactiveFormsModule,\r\n    DataGridComponent,\r\n    SitmunFrontendCoreModule\r\n  ]\r\n})\r\nexport class SitmunFrontendGuiModule {\r\n}\r\n"],"names":["DataGridComponent","prototype","onGridReady","params","this","gridApi","api","gridColumnApi","columnApi","getElements","sizeColumnsToFit","_a","tslib_1.__values","columnDefs","_b","next","done","value","field","statusColumn","exportData","exportDataAsCsv","onlySelected","quickSearch","setQuickFilter","searchValue","_this","getAll","subscribe","items","console","log","rowData","setTimeout","removeData","stopEditing","selectedNodes","getSelectedNodes","selectedData","map","node","data","remove","emit","selectedRows","rowIndex","selectedRows_1","selectedRows_1_1","id","getRowNode","estat","gridOptions","refreshCells","deselectAll","newData","new","applyChanges","itemsChanged","changesMap","keys","key","push","sendChanges","clear","changeCounter","previousChangeCounter","redoCounter","colDef","cellStyle","backgroundColor","redrawRows","deleteChanges","i","undoCellEditing","onFilterModified","undo","redo","redoCellEditing","onCellEditingStopped","e","modificationChange","onCellValueChanged","currentChanges","row","oldValue","has","get","set","addMap","Map","paintCells","delete","size","getDisplayedRowAtIndex","rowNodes","undoNoChanges","getColumnIndexByColId","colId","getAllColumns","findIndex","col","getColId","changeCellStyleColumns","color","columnNumber","columnController","gridColumns","Component","args","selector","template","styles","Input","Output","AllCommunityModules","EventEmitter","defaultColDef","sortable","flex","filter","editable","columnTypes","dateColumn","filterParams","comparator","filterLocalDateAtMidnight","cellValue","dateCellValue","Date","dateFilter","getTime","suppressMenu","rowSelection","singleClickEdit","BtnEditRenderedComponent","agInit","refresh","btnClickedHandler","$event","clicked","getParams","ngOnDestroy","NgModule","imports","RouterModule","HttpClientModule","CommonModule","FormsModule","NoopAnimationsModule","AngularHalModule","ReactiveFormsModule","BrowserAnimationsModule","AgGridModule","withComponents","SitmunFrontendCoreModule","MatButtonModule","MatIconModule","MatMenuModule","declarations","entryComponents","providers","exports","TranslateModule"],"mappings":"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"}