{"version":3,"sources":["ng://@sitmun/frontend-gui/btn-edit-rendered/btn-edit-rendered.component.ts","ng://@sitmun/frontend-gui/data-grid/data-grid.component.ts","ng://@sitmun/frontend-gui/dialog-grid/dialog-grid.component.ts","ng://@sitmun/frontend-gui/sitmun-frontend-gui.module.ts"],"sourcesContent":["import { ICellRendererAngularComp } from '@ag-grid-community/angular';\r\nimport { Component, OnDestroy } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-btn-edit-rendered',\r\n  template: `<button mat-mini-fab class=\"buttonEdit\"  type=\"button\"  (click)=\"btnClickedHandler($event)\" >\r\n  <mat-icon class=\"iconEdit\"   fontSet=\"material-icons-round\" > edit </mat-icon>\r\n</button> `,\r\n  styles: [`.buttonEdit{color:#000;background-color:#ddd;width:20px;margin-top:3px;height:20px;box-shadow:none}.iconEdit{font-size:13px;margin-top:-10px;margin-left:-2px}`]\r\n})\r\nexport class BtnEditRenderedComponent implements ICellRendererAngularComp, OnDestroy {\r\n\r\n  public params: any;\r\n\r\n  agInit(params: any): void {\r\n    this.params = params;\r\n  }\r\n\r\n  refresh(params: any): boolean {\r\n    return true;\r\n  }\r\n\r\n  btnClickedHandler($event) {\r\n    this.params.clicked(this.params.value);\r\n  }\r\n\r\n  getParams(){\r\n    return this.params;\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    // no need to remove the button click handler \r\n  }\r\n\r\n}\r\n","import { AgGridModule } from '@ag-grid-community/angular';\r\nimport { Component, OnInit, NgModule, Input, Output, EventEmitter } from '@angular/core';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { Observable } from 'rxjs';\r\nimport { map } from 'rxjs/operators';\r\nimport { AllCommunityModules, ColumnApi, Module } from '@ag-grid-community/all-modules';\r\nimport {TranslateService} from '@ngx-translate/core';\r\nimport {BtnEditRenderedComponent} from '../btn-edit-rendered/btn-edit-rendered.component';\r\n\r\n@Component({\r\n  selector: 'app-data-grid',\r\n  template: `    <div id=grup1 class=\"editDivBtns\">\r\n        <span *ngIf=\"title\"  [translate]=\"title\"> </span>\r\n        <button  mat-mini-fab class=\"editBtn\"  *ngIf=\"discardChangesButton\"  id=\"deleteChangesButton\" type=\"button\"  (click)=\"deleteChanges()\" [disabled]=\"changeCounter <= 0\">\r\n            <mat-icon  fontSet=\"material-icons-round\" > close </mat-icon>\r\n        </button>\r\n        <button mat-mini-fab class=\"editBtn\" *ngIf=\"undoButton\"  id=\"undo\"  (click)=\"undo()\" [disabled]=\"changeCounter <= 0\" >\r\n            <mat-icon fontSet=\"material-icons-round\" > undo </mat-icon>\r\n        </button>\r\n        <button mat-mini-fab class=\"editBtn\" *ngIf=\"redoButton\"  id=\"redo\"  (click)=\"redo()\" [disabled]=\"redoCounter <= 0\">\r\n            <mat-icon fontSet=\"material-icons-round\" > redo </mat-icon>\r\n        </button>\r\n        <button mat-mini-fab class=\"editBtn\" *ngIf=\"applyChangesButton\"  id=\"applyChangesButton\"  (click)=\"applyChanges()\" [disabled]=\"changeCounter <= 0\" >\r\n            <mat-icon fontSet=\"material-icons-round\" > check </mat-icon>\r\n        </button>\r\n    </div>\r\n\r\n    <div id=grup2 class=\"actionsDivBtns\" >\r\n        <label *ngIf=\"globalSearch\" [translate]=\"'Search'\"> </label>\r\n        <input *ngIf=\"globalSearch\"type=\"text\" class=\"searchGenericInput\" placeholder=\"\" (keyup)=\"quickSearch()\" [(ngModel)]=\"searchValue\" ml-2 >\r\n        <button *ngIf=\"deleteButton\"  mat-stroked-button id=\"deleteButton\"  (click)=\"removeData()\">\r\n            <mat-icon fontSet=\"material-icons-round\" > delete </mat-icon>\r\n            <span  [translate]=\"'Remove'\"> </span>\r\n            \r\n        </button>\r\n\r\n        \r\n        <button *ngIf=\"actionButton\"  mat-stroked-button [matMenuTriggerFor]=\"menu\" id=\"actionButton\">\r\n            <span  [translate]=\"'Actions'\"> </span>    \r\n            <mat-icon fontSet=\"material-icons-round\" > keyboard_arrow_down </mat-icon>     \r\n        </button>\r\n        <mat-menu #menu=\"matMenu\">\r\n            <button mat-menu-item *ngIf=\"!hideExportButton\" (click)=\"exportData()\" > {{\"Export\" | translate}} </button>\r\n            <button mat-menu-item *ngIf=\"!hideDuplicateButton\" (click)=\"onDuplicateButtonClicked()\"> {{\"Duplicate\" | translate}}</button>\r\n            <button mat-menu-item *ngIf=\"!hideSearchReplaceButton\"> {{\"Search/Replace\" | translate}}</button>\r\n        </mat-menu>  \r\n            \r\n\r\n        <button  *ngIf=\"newButton\" mat-stroked-button id=\"newButton\"  (click)=\"newData()\">\r\n            <mat-icon fontSet=\"material-icons-round\"> add_circle_outline </mat-icon>      \r\n            <span  [translate]=\"'New'\"> </span>           \r\n        </button>\r\n\r\n        <button  *ngIf=\"addButton\" mat-stroked-button id=\"newButton\"  (click)=\"onAddButtonClicked()\">\r\n            <mat-icon fontSet=\"material-icons-round\"> add_circle_outline </mat-icon>      \r\n            <span  [translate]=\"'Add'\"> </span>           \r\n        </button>\r\n        \r\n\r\n        \r\n    </div>\r\n\r\n\r\n\r\n    <div class=\"row\" style=\" height: 100%\">\r\n        <div id=\"myGrid\" style=\" width:100%; height: 100%\" >\r\n            <ag-grid-angular\r\n            style=\" width: 100%; height: 100%;\"\r\n            [class]=\"themeGrid\"\r\n            [floatingFilter]=\"true\"\r\n            [rowData]=\"rowData\"\r\n            [columnDefs]=\"columnDefs\"\r\n            [gridOptions]=\"gridOptions\"\r\n            [animateRows]=\"true\"\r\n            [pagination]=\"false\"\r\n            [modules]=\"modules\"     \r\n            [undoRedoCellEditing]=\"true\"    \r\n            [undoRedoCellEditingLimit]= 200\r\n            [suppressRowClickSelection]=true\r\n            [enableCellChangeFlash]=true\r\n            [frameworkComponents]=\"frameworkComponents\"\r\n            rowSelection=\"multiple\"\r\n            (filterModified)=\"onFilterModified()\"\r\n            (cellEditingStopped) =\"onCellEditingStopped($event)\"\r\n            (cellValueChanged)=\"onCellValueChanged($event)\"\r\n            (gridReady)=\"onGridReady($event)\">\r\n            \r\n            </ag-grid-angular>\r\n        </div>\r\n    </div>\r\n\r\n\r\n`,\r\n  styles: [`input,label{display:inline-block;margin:5px 5px 5px 10px}#newButton{color:#fff;background:no-repeat padding-box #68a225;margin-left:3px}#deleteButton{background:no-repeat padding-box #fff;margin-left:3px}#actionButton{background:no-repeat padding-box #fff;margin-left:3px;text-align:center!important}#applyChangesButton{color:#fff!important;background:no-repeat padding-box #68a225;margin-left:3px}#applyChangesButton[disabled]{background:no-repeat padding-box #83976c}#redo,#undo{color:#fff!important;background:#ff9300;margin-left:3px}#redo[disabled],#undo[disabled]{background:#ffc97f;margin-left:3px}#deleteChangesButton{color:#fff!important;background:#df3133}#deleteChangesButton[disabled]{color:#fff!important;background:#da8c8e}.editDivBtns{margin-left:10px;text-align:start;width:130px;height:30px!important;line-height:30px!important}.actionsDivBtns{text-align:end;width:calc(100% - 140px);height:60px}.actionsDivBtns,.editDivBtns{display:inline-block!important}.actionsDivBtns .mat-stroked-button{padding:5px 20px!important}.editDivBtns .mat-mini-fab .mat-button-wrapper{padding:inherit!important;display:inherit!important}.editDivBtns .mat-icon{height:30px!important;bottom:5px;position:relative}.editDivBtns .mat-mini-fab{width:30px;height:30px}.actionsDivBtns .searchGenericInput{height:45px!important;width:45%!important}.ag-body-viewport.ag-layout-normal ::-webkit-scrollbar-thumb{background:#eee}â .ag-body-viewport.ag-layout-normal ::-webkit-scrollbar{width:2em;height:2em}.ag-body-viewport.ag-layout-normal ::-webkit-scrollbar-button{background:#ccc}.ag-body-viewport.ag-layout-normal::-webkit-scrollbar-track-piece{background:#888}`]\r\n})\r\nexport class DataGridComponent implements OnInit {\r\n \r\n  private _eventRefreshSubscription: any;\r\n  private _eventGetSelectedRowsSubscription: any;\r\n  private _eventGetAllRowsSubscription: any;\r\n  modules: Module[] = AllCommunityModules;\r\n  searchValue: string;\r\n  private gridApi;\r\n  private gridColumnApi;\r\n  statusColumn = false;\r\n  changesMap: Map<number, Map<string, number>> = new Map<number, Map<string, number>>();\r\n   // We will save the id of edited cells and the number of editions done.\r\n  private params; // Last parameters of the grid (in case we do apply changes we will need it) \r\n  rowData: any[];\r\n  changeCounter: number; // Number of editions done above any cell \r\n  previousChangeCounter: number; // Number of ditions done after the last modification(changeCounter)\r\n  redoCounter: number; // Number of redo we can do\r\n  modificationChange = false;\r\n  undoNoChanges = false; // Boolean that indicates if an undo hasn't modifications\r\n  gridOptions;\r\n\r\n\r\n  @Input() eventRefreshSubscription: Observable <boolean> ;\r\n  @Input() eventGetSelectedRowsSubscription: Observable <boolean> ;\r\n  @Input() eventGetAllRowsSubscription: Observable <boolean> ;\r\n  @Input() eventAddItemsSubscription: Observable <any[]> ;\r\n  @Input() frameworkComponents: any;\r\n  @Input() columnDefs: any[];\r\n  @Input() getAll: () => Observable<any>;\r\n  @Input() discardChangesButton: boolean;\r\n  @Input() undoButton: boolean;\r\n  @Input() redoButton: boolean;\r\n  @Input() applyChangesButton: boolean;\r\n  @Input() deleteButton: boolean;\r\n  @Input() newButton: boolean;\r\n  @Input() actionButton: boolean;\r\n  @Input() addButton: boolean;\r\n  @Input() globalSearch: boolean;\r\n  @Input() themeGrid: any;\r\n  @Input() singleSelection: boolean;\r\n  @Input() nonEditable: boolean;\r\n  @Input() title: string;\r\n  @Input() hideExportButton: boolean;\r\n  @Input() hideDuplicateButton: boolean;\r\n  @Input() hideSearchReplaceButton: boolean;\r\n\r\n\r\n  @Output() remove: EventEmitter<any[]>;\r\n  @Output() new: EventEmitter<number>;\r\n  @Output() add: EventEmitter<number>;\r\n  @Output() sendChanges: EventEmitter<any[]>;\r\n  @Output() duplicate: EventEmitter<any[]>;\r\n  @Output() getSelectedRows: EventEmitter<any[]>;\r\n  @Output() getAllRows: EventEmitter<any[]>;\r\n\r\n\r\n  constructor(public translate: TranslateService) {\r\n    this.translate = translate;\r\n\r\n    this.frameworkComponents = {\r\n      btnEditRendererComponent: BtnEditRenderedComponent\r\n    };\r\n\r\n    this.remove = new EventEmitter();\r\n    this.new = new EventEmitter();\r\n    this.add = new EventEmitter();\r\n    this.sendChanges = new EventEmitter();\r\n    this.getSelectedRows = new EventEmitter();\r\n    this.duplicate = new EventEmitter();\r\n    this.getAllRows = new EventEmitter();\r\n    this.changeCounter = 0;\r\n    this.previousChangeCounter = 0;\r\n    this.redoCounter = 0;\r\n    this.gridOptions = {\r\n      defaultColDef: {\r\n        sortable: true,\r\n        flex: 1,\r\n        filter: true,\r\n        editable: !this.nonEditable,\r\n        cellStyle: {backgroundColor: '#FFFFFF'},\r\n      },\r\n      columnTypes: {\r\n        dateColumn: {\r\n            filter: 'agDateColumnFilter',\r\n            filterParams: {\r\n              comparator(filterLocalDateAtMidnight, cellValue) {\r\n                const dateCellValue = new Date(cellValue);\r\n                const dateFilter = new Date(filterLocalDateAtMidnight);\r\n\r\n                if (dateCellValue.getTime() < dateFilter.getTime()) {\r\n                  return -1;\r\n                } else if (dateCellValue.getTime()  > dateFilter.getTime()) {\r\n                  return 1;\r\n                } else {\r\n                  return 0;\r\n                }\r\n              },\r\n            },\r\n            suppressMenu: true\r\n        }\r\n    },\r\n      rowSelection: 'multiple',\r\n      singleClickEdit: true,\r\n      // suppressHorizontalScroll: true,\r\n      localeTextFunc: (key: string, defaultValue: string) => {\r\n        const data = this.translate.instant(key);\r\n        return data === key ? defaultValue : data;\r\n    }\r\n    };\r\n\r\n  }\r\n\r\n\r\n  ngOnInit(){\r\n\r\n    if (this.eventRefreshSubscription) {\r\n      this._eventRefreshSubscription = this.eventRefreshSubscription.subscribe(() => {\r\n        this.getElements();\r\n      });\r\n    }\r\n    if (this.eventGetSelectedRowsSubscription) {\r\n      this._eventGetSelectedRowsSubscription = this.eventGetSelectedRowsSubscription.subscribe(() => {\r\n        this.emitSelectedRows();\r\n      });\r\n    }\r\n    if (this.eventGetAllRowsSubscription) {\r\n      this._eventGetAllRowsSubscription = this.eventGetAllRowsSubscription.subscribe(() => {\r\n        this.emitAllRows();\r\n      });\r\n    }\r\n\r\n    if(this.eventAddItemsSubscription)\r\n    {\r\n      this.eventAddItemsSubscription.subscribe(\r\n        (items) => {\r\n          this.addItems(items);\r\n        }\r\n      )\r\n    }\r\n\r\n    \r\n\r\n\r\n  }\r\n\r\n\r\n\r\n  onGridReady(params): void{\r\n    if (this.singleSelection) {this.gridOptions.rowSelection = 'single'}\r\n    // if (this.nonEditable) {this.gridOptions.defaultColDef.editable = false}\r\n    this.params = params;\r\n    this.gridApi = params.api;\r\n    this.gridColumnApi = params.columnApi;\r\n    this.getElements();\r\n    this.gridApi.sizeColumnsToFit();\r\n    for (const col of this.columnDefs) {\r\n      if (col.field === 'estat') {\r\n        this.statusColumn = true;\r\n      }\r\n    }\r\n  }\r\n\r\n  \r\n  emitSelectedRows(): void{\r\n    const selectedNodes = this.gridApi.getSelectedNodes();\r\n    const selectedData = selectedNodes.map(node => node.data);\r\n    this.getSelectedRows.emit(selectedData);\r\n  }\r\n\r\n  emitAllRows(): void{\r\n    let rowData = [];\r\n    this.gridApi.forEachNode(node => rowData.push(node.data));\r\n    this.getSelectedRows.emit(rowData);\r\n  }\r\n\r\n  getColumnKeysAndHeaders(columnkeys: Array<any>): String{    \r\n    let header:Array<any> = [];\r\n    if (this.columnDefs.length == 0) {return ''};\r\n\r\n    let allColumnKeys=this.gridOptions.columnApi.getAllDisplayedColumns();\r\n    // console.log(allColumnKeys);\r\n    allColumnKeys.forEach(element => {\r\n        if (element.userProvidedColDef.headerName !== '')\r\n        {\r\n          columnkeys.push(element.userProvidedColDef.field);\r\n          header.push(element.userProvidedColDef.headerName);\r\n        }\r\n  \r\n      \r\n    });\r\n    \r\n    return header.join(\",\");\r\n  }\r\n\r\n\r\n  exportData(): void{\r\n    let columnkeys:Array<any> = [];\r\n    let customHeader:String = '';\r\n    customHeader = this.getColumnKeysAndHeaders(columnkeys)\r\n    let params = {\r\n        onlySelected: true,\r\n        columnKeys: columnkeys,\r\n        customHeader: customHeader,\r\n        skipHeader: true\r\n    };\r\n    this.gridApi.exportDataAsCsv(params);\r\n  }\r\n\r\n  quickSearch(): void{\r\n    this.gridApi.setQuickFilter(this.searchValue);\r\n}\r\n\r\n  getElements(): void\r\n  {\r\n    this.getAll()\r\n    .subscribe((items) => {\r\n        this.rowData = items;\r\n        setTimeout(()=>{this.gridApi.sizeColumnsToFit()}, 30);\r\n        this.gridApi.setRowData(this.rowData);\r\n        console.log(this.rowData);\r\n    });\r\n  }\r\n\r\n   addItems(newItems: any[]): void {\r\n    console.log(newItems);\r\n\r\n    this.gridApi.updateRowData({ add: newItems });\r\n    console.log(this.columnDefs);\r\n\r\n  }\r\n\r\n  removeData(): void {\r\n    this.gridApi.stopEditing(false);\r\n    const selectedNodes = this.gridApi.getSelectedNodes();\r\n    const selectedData = selectedNodes.map(node => node.data);\r\n    this.remove.emit(selectedData);\r\n\r\n    if(this.statusColumn)\r\n    {\r\n      const selectedRows = selectedNodes.map(node => node.rowIndex);\r\n\r\n      for (const id of selectedRows){\r\n          this.gridApi.getRowNode(id).data.estat ='Eliminat';\r\n        }\r\n      this.gridOptions.api.refreshCells();\r\n    }\r\n    this.gridOptions.api.deselectAll();\r\n  }\r\n\r\n  newData(): void\r\n  {\r\n    this.gridApi.stopEditing(false);\r\n    this.new.emit(-1);\r\n  }\r\n\r\n  onAddButtonClicked(): void\r\n  {\r\n    this.gridApi.stopEditing(false);\r\n    this.add.emit(-1);\r\n  }\r\n\r\n  onDuplicateButtonClicked(): void\r\n  {\r\n    this.gridApi.stopEditing(false);\r\n    const selectedNodes = this.gridApi.getSelectedNodes();\r\n    const selectedData = selectedNodes.map(node => node.data);\r\n    this.duplicate.emit(selectedData);\r\n  }\r\n\r\n\r\n  applyChanges(): void\r\n  {\r\n    const itemsChanged: any[] = [];\r\n    this.gridApi.stopEditing(false);\r\n    for (const key of this.changesMap.keys())\r\n    {\r\n      itemsChanged.push(this.gridApi.getRowNode(key).data);\r\n    }\r\n    this.sendChanges.emit(itemsChanged);\r\n    this.changesMap.clear();\r\n    this.changeCounter = 0;\r\n    this.previousChangeCounter = 0;\r\n    this.redoCounter = 0;\r\n    this.params.colDef.cellStyle =  {backgroundColor: '#FFFFFF'};\r\n    this.gridApi.redrawRows();\r\n  }\r\n\r\n\r\n\r\n  deleteChanges(): void\r\n  {\r\n    for (let i = 0; i < this.changeCounter; i++)\r\n    {\r\n      this.gridApi.undoCellEditing();\r\n    }\r\n    this.changesMap.clear();\r\n    this.previousChangeCounter = 0;\r\n    this.changeCounter = 0;\r\n    this.redoCounter = 0;\r\n    this.params.colDef.cellStyle =  {backgroundColor: '#FFFFFF'};\r\n    this.gridApi.redrawRows();\r\n  }\r\n\r\n\r\n  onFilterModified(): void{\r\n    this.deleteChanges();\r\n  }\r\n\r\n\r\n  undo(): void {\r\n    this.gridApi.stopEditing(false);\r\n    this.gridApi.undoCellEditing();\r\n    this.changeCounter -= 1;\r\n    this.redoCounter += 1;\r\n  }\r\n\r\n  redo(): void {\r\n    this.gridApi.stopEditing(false);\r\n    this.gridApi.redoCellEditing();\r\n    this.changeCounter += 1;\r\n    this.redoCounter -= 1;\r\n  }\r\n\r\n\r\n  onCellEditingStopped(e)\r\n  {\r\n      if (this.modificationChange)\r\n      {\r\n        this.changeCounter++;\r\n        this.redoCounter = 0;\r\n        this.onCellValueChanged(e);\r\n        this.modificationChange = false;\r\n      }\r\n  }\r\n\r\n\r\n  onCellValueChanged(params): void{\r\n    this.params = params; \r\n    if (this.changeCounter > this.previousChangeCounter)\r\n      // True if we have edited some cell or we have done a redo \r\n      {\r\n\r\n        if (params.oldValue !== params.value && !(params.oldValue == null && params.value === ''))\r\n        {\r\n          \r\n          if (! this.changesMap.has(params.node.id)) // If it's firts edit of a cell, we add it to the map and we paint it\r\n          {\r\n            const addMap: Map<string, number> = new Map<string, number>();\r\n            addMap.set(params.colDef.field, 1)\r\n            this.changesMap.set(params.node.id, addMap);\r\n          }\r\n          else{\r\n            if (! this.changesMap.get(params.node.id).has(params.colDef.field))\r\n            {\r\n\r\n              this.changesMap.get(params.node.id).set(params.colDef.field, 1);\r\n            }\r\n\r\n            else{\r\n              // We already had edited this cell, so we only increment number of changes of it on the map \r\n             const currentChanges = this.changesMap.get(params.node.id).get(params.colDef.field);\r\n             this.changesMap.get(params.node.id).set(params.colDef.field, (currentChanges + 1));\r\n           }\r\n\r\n          }\r\n          this.paintCells(params, this.changesMap); //We paint the row of the edited cell \r\n          this.previousChangeCounter++; //We match the current previousChangeCounter with changeCounter\r\n        }\r\n\r\n      }\r\n    else if (this.changeCounter < this.previousChangeCounter){ // True if we have done an undo\r\n        let currentChanges = -1;\r\n        if (this.changesMap.has(params.node.id)) {currentChanges = this.changesMap.get(params.node.id).get(params.colDef.field);}\r\n        \r\n        if (currentChanges === 1) { //Once the undo it's done, cell is in his initial status\r\n\r\n          this.changesMap.get(params.node.id).delete(params.colDef.field);\r\n          if(this.changesMap.get(params.node.id).size === 0) { // No more modifications in this row\r\n            this.changesMap.delete(params.node.id);\r\n            const row = this.gridApi.getDisplayedRowAtIndex(params.rowIndex);\r\n\r\n            // We paint it white\r\n            this.gridApi.redrawRows({rowNodes: [row]});\r\n\r\n           }\r\n           else\r\n           {\r\n              this.paintCells(params, this.changesMap);\r\n           }\r\n\r\n        }\r\n        else if (currentChanges >1) // The cell isn't in his initial state yet\r\n        {                                 //We can't do else because we can be doing an undo without changes \r\n          this.changesMap.get(params.node.id).set(params.colDef.field, (currentChanges - 1));\r\n\r\n          this.paintCells(params, this.changesMap);//Not initial state -> green background\r\n\r\n        }\r\n        this.previousChangeCounter--;  //We decrement previousChangeCounter because we have done undo\r\n    }\r\n    else{ // Control of modifications without changes\r\n      if( !(params.oldValue == null && params.value === ''))\r\n      {\r\n        let newValue: string;\r\n        if(params.value == null) {newValue=''}\r\n        else{ newValue = params.value.toString() }\r\n\r\n\r\n        if(params.oldValue != null)\r\n        {\r\n          if (params.oldValue.toString() !== newValue.toString()) { this.modificationChange = true; }\r\n          else {this.modificationWithoutChanges(params)}\r\n        }\r\n        if(params.oldValue == null )         {\r\n          if (params.oldValue !== newValue.toString()) { this.modificationChange = true; }\r\n          else {this.modificationWithoutChanges(params)}\r\n        }\r\n        \r\n      }\r\n      else {this.modificationWithoutChanges(params)}\r\n    }\r\n  }\r\n\r\n  modificationWithoutChanges(params: any) {\r\n\r\n    if ( this.changesMap.has(params.node.id)) //Modification without changes in en edited cell\r\n    {\r\n      if(!this.undoNoChanges)\r\n      {\r\n        this.gridApi.undoCellEditing(); // Undo to delete the change without changes internally \r\n        this.undoNoChanges = true;\r\n        this.paintCells(params, this.changesMap);  //The cell has modifications yet -> green background \r\n      }\r\n      else { this.undoNoChanges = false; }\r\n\r\n\r\n    }\r\n    else {\r\n      //With the internally undo will enter at this function, so we have to control when done the undo or not \r\n      if(!this.undoNoChanges)\r\n      {\r\n        this.gridApi.undoCellEditing(); // Undo to delete the change internally\r\n        this.undoNoChanges = true;\r\n      }\r\n      else { this.undoNoChanges = false; }\r\n    }\r\n\r\n  }\r\n\r\n  getColumnIndexByColId(api: ColumnApi, colId: string): number {\r\n    return api.getAllColumns().findIndex(col => col.getColId() === colId);\r\n  }\r\n  paintCells(params: any,  changesMap: Map<number, Map<string, number>>, )\r\n  {\r\n    const row = this.gridApi.getDisplayedRowAtIndex(params.rowIndex);\r\n\r\n    this.changeCellStyleColumns(params,changesMap,'#E8F1DE');\r\n    this.gridApi.redrawRows({rowNodes: [row]});\r\n    this.changeCellStyleColumns(params,changesMap,'#FFFFFF'); \r\n    // We will define cellStyle white to future modifications (like filter)\r\n  }\r\n\r\n  changeCellStyleColumns(params: any, changesMap: Map<number, Map<string, number>>, color: string){\r\n\r\n    for (const key of changesMap.get(params.node.id).keys())\r\n    {\r\n      const columnNumber = this.getColumnIndexByColId(this.gridColumnApi, key);\r\n      this.gridColumnApi.columnController.gridColumns[columnNumber].colDef.cellStyle = {backgroundColor: color};\r\n    }\r\n\r\n\r\n  }\r\n\r\n}\r\n","import { Component, OnInit, Input, Output, EventEmitter, Inject } from '@angular/core';\r\nimport { Observable, Subject } from 'rxjs';\r\nimport { MatDialogRef } from '@angular/material/dialog';\r\n\r\nexport interface DialogData {\r\n  _GetAllsTable:  Array<() => Observable<any>>;\r\n  _columnDefsTable: Array<any[]>;\r\n  _singleSelectionTable: Array<boolean>;\r\n}\r\n\r\n\r\n@Component({\r\n  selector: 'app-dialog-grid',\r\n  template: `<h3 mat-dialog-title>{{title}}</h3>\r\n<mat-dialog-content class=\"dialogConent\">\r\n  <div *ngFor=\"let getAll of getAllsTable; let i = index\" class=\"appDialogDataGridDiv\">\r\n    <app-data-grid \r\n    [columnDefs]=\"columnDefsTable[i]\" [themeGrid]='themeGrid'  [getAll]='getAll' [globalSearch]=true [singleSelection]=\"singleSelectionTable[i]\"\r\n    [title]=\"titlesTable[i]\" [nonEditable]='nonEditable' [eventGetSelectedRowsSubscription]=\"getAllRows.asObservable()\" (getSelectedRows)='joinRowsReceived($event)' >\r\n    </app-data-grid>\r\n  </div>\r\n</mat-dialog-content>\r\n<div mat-dialog-actions align=\"end\">\r\n  <button mat-button  (click)=\"closeDialog()\">{{\"Cancel\" | translate}}</button>\r\n  <button mat-button  (click)=\"getAllSelectedRows()\" cdkFocusInitial>{{\"Add\" | translate}}</button>\r\n</div>\r\n`,\r\n  styles: [`.dialogConent{margin:inherit!important;padding:inherit!important;max-height:60vh!important;height:100%;width:100%;overflow:auto}`]\r\n})\r\nexport class DialogGridComponent implements OnInit {\r\n\r\n  title: string;\r\n  getAllRows: Subject<boolean> = new Subject <boolean>();\r\n  private _addButtonClickedSubscription: any;\r\n  tablesReceivedCounter: number;\r\n  allRowsReceived: Array<any[]> = [];\r\n\r\n  //Inputs\r\n  themeGrid: any;\r\n  getAllsTable: Array<() => Observable<any>>;\r\n  columnDefsTable: Array<any[]>;\r\n  singleSelectionTable: Array<boolean>;\r\n  titlesTable: Array<string>;\r\n  addButtonClickedSubscription: Observable <boolean> ;\r\n  nonEditable: boolean;\r\n\r\n  //Outputs\r\n  @Output() joinTables : EventEmitter<Array<any[]>>;\r\n\r\n  \r\n\r\n\r\n  constructor(private dialogRef: MatDialogRef<DialogGridComponent>) {\r\n    \r\n    this.joinTables = new EventEmitter();\r\n    // this.nonEditable = true;\r\n    this.tablesReceivedCounter = 0;\r\n   }\r\n\r\n  ngOnInit() {\r\n\r\n    if (this.addButtonClickedSubscription) {\r\n      this._addButtonClickedSubscription = this.addButtonClickedSubscription.subscribe(() => {\r\n        this.getAllSelectedRows();\r\n      });\r\n    }\r\n\r\n  }\r\n\r\n  getAllSelectedRows() {\r\n    this.getAllRows.next(true);\r\n  }\r\n\r\n  joinRowsReceived(data: any[])\r\n  {\r\n      this.allRowsReceived.push(data);\r\n      this.tablesReceivedCounter++;\r\n      if(this.tablesReceivedCounter === this.getAllsTable.length)\r\n      {\r\n        this.doAdd(this.allRowsReceived);\r\n        console.log(this.allRowsReceived);\r\n      }\r\n  }\r\n\r\n  doAdd(rowsToAdd){\r\n    this.dialogRef.close({event:'Add',data: rowsToAdd});\r\n  }\r\n\r\n  closeDialog(){\r\n    this.dialogRef.close({event:'Cancel'});\r\n  }\r\n\r\n}\r\n","import { NgModule } from '@angular/core';\r\n\r\nimport { FormsModule } from '@angular/forms';\r\nimport { CommonModule } from '@angular/common';\r\nimport { HttpClientModule, HttpClient, HTTP_INTERCEPTORS } from '@angular/common/http';\r\nimport { BrowserAnimationsModule, NoopAnimationsModule } from '@angular/platform-browser/animations';\r\nimport { RouterModule, Routes } from '@angular/router';\r\n\r\n//import * as ol from 'openlayers';\r\nimport { TranslateModule, TranslateLoader, TranslateService } from '@ngx-translate/core';\r\nimport { registerLocaleData } from '@angular/common';\r\nimport { AngularHalModule } from '@sitmun/frontend-core';\r\n\r\n\r\nimport { ReactiveFormsModule } from '@angular/forms';\r\nimport localeCa from '@angular/common/locales/ca';\r\nimport localeEs from '@angular/common/locales/es';\r\nimport { SitmunFrontendCoreModule } from '@sitmun/frontend-core';\r\nimport { DataGridComponent } from './data-grid/data-grid.component';\r\n\r\nimport { AgGridModule } from '@ag-grid-community/angular';\r\nimport { MatButtonModule } from '@angular/material/button';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { MatMenuModule } from '@angular/material/menu';\r\nimport { MatDialogModule } from '@angular/material/dialog';\r\nimport { BtnEditRenderedComponent } from './btn-edit-rendered/btn-edit-rendered.component';\r\n\r\nimport { TranslateHttpLoader } from '@ngx-translate/http-loader';\r\nimport { DialogGridComponent } from './dialog-grid/dialog-grid.component';\r\n\r\n\r\nregisterLocaleData(localeCa, 'ca');\r\nregisterLocaleData(localeEs, 'es');\r\n\r\n/** Load translation assets */\r\nexport function createTranslateLoader(http: HttpClient) {\r\n  return new TranslateHttpLoader(http, '../assets/i18n/', '.json');\r\n}\r\n\r\n\r\n/** SITMUN plugin core module */\r\n@NgModule({\r\n  imports: [\r\n    RouterModule,\r\n    HttpClientModule,\r\n    CommonModule,\r\n    FormsModule,\r\n    NoopAnimationsModule,\r\n    AngularHalModule,\r\n    ReactiveFormsModule,\r\n    BrowserAnimationsModule,\r\n    AgGridModule.withComponents([]),\r\n    SitmunFrontendCoreModule,\r\n    MatButtonModule,\r\n    MatIconModule,\r\n    MatMenuModule,\r\n    MatDialogModule,\r\n    TranslateModule.forRoot({\r\n      loader: {\r\n        provide: TranslateLoader,\r\n        useFactory: (createTranslateLoader),\r\n        deps: [HttpClient]\r\n      }\r\n    })\r\n\r\n  ],\r\n  declarations: [\r\n    DataGridComponent,\r\n    BtnEditRenderedComponent,\r\n    DialogGridComponent,\r\n  ],\r\n  entryComponents: [\r\n  ],\r\n  providers: [\r\n  ],\r\n  exports: [\r\n    HttpClientModule,\r\n    CommonModule,\r\n    FormsModule,\r\n    NoopAnimationsModule,\r\n    AngularHalModule,\r\n    TranslateModule,\r\n    ReactiveFormsModule,\r\n    DataGridComponent,\r\n    DialogGridComponent,\r\n    SitmunFrontendCoreModule\r\n  ]\r\n})\r\nexport class SitmunFrontendGuiModule {\r\n}\r\n"],"names":["BtnEditRenderedComponent","prototype","agInit","params","this","refresh","btnClickedHandler","$event","clicked","value","getParams","ngOnDestroy","Component","args","selector","template","styles","DataGridComponent","ngOnInit","_this","eventRefreshSubscription","_eventRefreshSubscription","subscribe","getElements","eventGetSelectedRowsSubscription","_eventGetSelectedRowsSubscription","emitSelectedRows","eventGetAllRowsSubscription","_eventGetAllRowsSubscription","emitAllRows","eventAddItemsSubscription","items","addItems","onGridReady","singleSelection","gridOptions","rowSelection","gridApi","api","gridColumnApi","columnApi","sizeColumnsToFit","_a","tslib_1.__values","columnDefs","_b","next","done","field","statusColumn","selectedData","getSelectedNodes","map","node","data","getSelectedRows","emit","rowData","forEachNode","push","getColumnKeysAndHeaders","columnkeys","header","length","getAllDisplayedColumns","forEach","element","userProvidedColDef","headerName","join","exportData","onlySelected","columnKeys","customHeader","skipHeader","exportDataAsCsv","quickSearch","setQuickFilter","searchValue","getAll","setTimeout","setRowData","console","log","newItems","updateRowData","add","removeData","stopEditing","selectedNodes","remove","selectedRows","rowIndex","selectedRows_1","selectedRows_1_1","id","getRowNode","estat","refreshCells","deselectAll","newData","new","onAddButtonClicked","onDuplicateButtonClicked","duplicate","applyChanges","itemsChanged","changesMap","keys","key","sendChanges","clear","changeCounter","previousChangeCounter","redoCounter","colDef","cellStyle","backgroundColor","redrawRows","deleteChanges","i","undoCellEditing","onFilterModified","undo","redo","redoCellEditing","onCellEditingStopped","e","modificationChange","onCellValueChanged","row","newValue","oldValue","has","get","currentChanges","set","addMap","Map","paintCells","delete","size","getDisplayedRowAtIndex","rowNodes","toString","modificationWithoutChanges","undoNoChanges","getColumnIndexByColId","colId","getAllColumns","findIndex","col","getColId","changeCellStyleColumns","color","columnNumber","columnController","gridColumns","TranslateService","Input","Output","translate","AllCommunityModules","frameworkComponents","btnEditRendererComponent","EventEmitter","getAllRows","defaultColDef","sortable","flex","filter","editable","nonEditable","columnTypes","dateColumn","filterParams","comparator","filterLocalDateAtMidnight","cellValue","dateCellValue","Date","dateFilter","getTime","suppressMenu","singleClickEdit","localeTextFunc","defaultValue","instant","DialogGridComponent","addButtonClickedSubscription","_addButtonClickedSubscription","getAllSelectedRows","joinRowsReceived","allRowsReceived","tablesReceivedCounter","getAllsTable","doAdd","rowsToAdd","dialogRef","close","event","closeDialog","MatDialogRef","Subject","joinTables","createTranslateLoader","http","TranslateHttpLoader","registerLocaleData","localeCa","localeEs","NgModule","imports","RouterModule","HttpClientModule","CommonModule","FormsModule","NoopAnimationsModule","AngularHalModule","ReactiveFormsModule","BrowserAnimationsModule","AgGridModule","withComponents","SitmunFrontendCoreModule","MatButtonModule","MatIconModule","MatMenuModule","MatDialogModule","TranslateModule","forRoot","loader","provide","TranslateLoader","useFactory","ɵ0","deps","HttpClient","declarations","entryComponents","providers","exports"],"mappings":"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"}