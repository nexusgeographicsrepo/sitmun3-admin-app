import { OnInit, EventEmitter } from '@angular/core';
import { Observable } from 'rxjs';
import { ColumnApi, Module } from '@ag-grid-community/all-modules';
import { TranslateService } from '@ngx-translate/core';
import { MatDialog } from '@angular/material/dialog';
import * as i0 from "@angular/core";
export declare class DataGridComponent implements OnInit {
    dialog: MatDialog;
    translate: TranslateService;
    private _eventRefreshSubscription;
    private _eventGetSelectedRowsSubscription;
    private _eventGetAllRowsSubscription;
    private _eventSaveAgGridStateSubscription;
    modules: Module[];
    UndeRedoActions: any;
    searchValue: string;
    private gridApi;
    private gridColumnApi;
    statusColumn: boolean;
    changesMap: Map<number, Map<string, number>>;
    private params;
    rowData: any[];
    changeCounter: number;
    previousChangeCounter: number;
    redoCounter: number;
    modificationChange: boolean;
    undoNoChanges: boolean;
    gridOptions: any;
    eventRefreshSubscription: Observable<boolean>;
    eventGetSelectedRowsSubscription: Observable<boolean>;
    eventGetAllRowsSubscription: Observable<boolean>;
    eventSaveAgGridStateSubscription: Observable<boolean>;
    eventAddItemsSubscription: Observable<boolean>;
    frameworkComponents: any;
    columnDefs: any[];
    getAll: () => Observable<any>;
    discardChangesButton: boolean;
    id: any;
    undoButton: boolean;
    redoButton: boolean;
    applyChangesButton: boolean;
    deleteButton: boolean;
    newButton: boolean;
    actionButton: boolean;
    addButton: boolean;
    globalSearch: boolean;
    themeGrid: any;
    singleSelection: boolean;
    nonEditable: boolean;
    title: string;
    hideExportButton: boolean;
    hideDuplicateButton: boolean;
    hideSearchReplaceButton: boolean;
    remove: EventEmitter<any[]>;
    new: EventEmitter<number>;
    add: EventEmitter<number>;
    sendChanges: EventEmitter<any[]>;
    duplicate: EventEmitter<any[]>;
    getSelectedRows: EventEmitter<any[]>;
    getAllRows: EventEmitter<any[]>;
    getAgGridState: EventEmitter<any[]>;
    constructor(dialog: MatDialog, translate: TranslateService);
    ngOnInit(): void;
    firstDataRendered(): void;
    onGridReady(params: any): void;
    emitSelectedRows(): void;
    emitAllRows(): void;
    saveAgGridState(): void;
    removeAgGridState(): void;
    getColumnKeysAndHeaders(columnkeys: Array<any>): String;
    exportData(): void;
    quickSearch(): void;
    getElements(): void;
    addItems(newItems: any[]): void;
    removeData(): void;
    newData(): void;
    onAddButtonClicked(): void;
    onDuplicateButtonClicked(): void;
    applyChanges(): void;
    deleteChanges(): void;
    onFilterModified(): void;
    undo(): void;
    redo(): void;
    onCellEditingStopped(e: any): void;
    onCellValueChanged(params: any): void;
    modificationWithoutChanges(params: any): void;
    getColumnIndexByColId(api: ColumnApi, colId: string): number;
    paintCells(params: any, changesMap: Map<number, Map<string, number>>): void;
    changeCellStyleColumns(params: any, changesMap: Map<number, Map<string, number>>, color: string): void;
    static ɵfac: i0.ɵɵFactoryDef<DataGridComponent, never>;
    static ɵcmp: i0.ɵɵComponentDefWithMeta<DataGridComponent, "app-data-grid", never, { "eventRefreshSubscription": "eventRefreshSubscription"; "eventGetSelectedRowsSubscription": "eventGetSelectedRowsSubscription"; "eventGetAllRowsSubscription": "eventGetAllRowsSubscription"; "eventSaveAgGridStateSubscription": "eventSaveAgGridStateSubscription"; "eventAddItemsSubscription": "eventAddItemsSubscription"; "frameworkComponents": "frameworkComponents"; "columnDefs": "columnDefs"; "getAll": "getAll"; "discardChangesButton": "discardChangesButton"; "id": "id"; "undoButton": "undoButton"; "redoButton": "redoButton"; "applyChangesButton": "applyChangesButton"; "deleteButton": "deleteButton"; "newButton": "newButton"; "actionButton": "actionButton"; "addButton": "addButton"; "globalSearch": "globalSearch"; "themeGrid": "themeGrid"; "singleSelection": "singleSelection"; "nonEditable": "nonEditable"; "title": "title"; "hideExportButton": "hideExportButton"; "hideDuplicateButton": "hideDuplicateButton"; "hideSearchReplaceButton": "hideSearchReplaceButton"; }, { "remove": "remove"; "new": "new"; "add": "add"; "sendChanges": "sendChanges"; "duplicate": "duplicate"; "getSelectedRows": "getSelectedRows"; "getAllRows": "getAllRows"; "getAgGridState": "getAgGridState"; }, never, never>;
}
